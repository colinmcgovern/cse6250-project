CNN_model
MyCNN(
  (convs): ModuleList(
    (0): Conv2d(1, 100, kernel_size=(3, 300), stride=(1, 1), padding=(2, 0))
    (1): Conv2d(1, 100, kernel_size=(4, 300), stride=(1, 1), padding=(3, 0))
    (2): Conv2d(1, 100, kernel_size=(5, 300), stride=(1, 1), padding=(4, 0))
  )
  (drop): Dropout(p=0.3, inplace=False)
  (fc): Linear(in_features=300, out_features=5, bias=True)
)
CNN_model.parameters()
<generator object Module.parameters at 0x7ff4c5279fc0>
valid_size
50
test_size
50
train_size
100
train_loader
data
tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([3., 0., 4., 0.], dtype=torch.float64)
data
tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([3., 2., 2., 3.], dtype=torch.float64)
data
tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([2., 1., 2., 3.], dtype=torch.float64)
data
tensor([[[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   1,   0,  ...,   0,  -1,   0],
         [  1,   0,   0,  ...,   2,   1,   3],
         [  3,   0,   1,  ...,   2,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   1,  -1,  ...,  -5,   4,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -1,  -1,  ...,   0,   5,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -1,  ...,   0,   0,   0],
         [  2,  -1,  -2,  ...,   2,   4,  -2],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
targets
tensor([2., 2., 1., 1.], dtype=torch.float64)
data
tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([1., 1., 4., 2.], dtype=torch.float64)
data
tensor([[[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  4,   1,  -2,  ...,  -2,   5,  -4],
         [  6,  -2,   1,  ...,   0,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  6,   2,   4,  ...,   3,   0,  -4],
         [  0,   0,   0,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -2,  ...,   0,  -3,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [ 13,  -6,   0,  ...,  -1,  -3,   9],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
targets
tensor([1., 2., 0., 0.], dtype=torch.float64)
data
tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([0., 1., 1., 1.], dtype=torch.float64)
data
tensor([[[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([1., 0., 0., 3.], dtype=torch.float64)
data
tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([3., 2., 2., 2.], dtype=torch.float64)
data
tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([1., 0., 0., 4.], dtype=torch.float64)
data
tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([3., 1., 1., 2.], dtype=torch.float64)
data
tensor([[[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([4., 2., 2., 1.], dtype=torch.float64)
data
tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([0., 1., 0., 2.], dtype=torch.float64)
data
tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([3., 2., 3., 3.], dtype=torch.float64)
data
tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([2., 0., 2., 1.], dtype=torch.float64)
data
tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([0., 2., 0., 2.], dtype=torch.float64)
data
tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([3., 2., 4., 2.], dtype=torch.float64)
data
tensor([[[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([0., 3., 3., 0.], dtype=torch.float64)
data
tensor([[[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([3., 1., 1., 1.], dtype=torch.float64)
data
tensor([[[  1,   1,   2,  ...,   4,   0,  -2],
         [  2,   1,   1,  ...,   0,  -1,   0],
         [  1,  -2,  -1,  ...,   0,  -5,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -2,  ...,  -4,   5,  -5],
         [  1,  -1,  -1,  ...,   0,   2,   0],
         [  1,   0,  -2,  ...,   1,   1,  -5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -1,  ...,   0,   0,   0],
         [  0,   1,   1,  ...,   6,   1,  -1],
         [  2,   0,   0,  ...,   7,   0,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
targets
tensor([2., 4., 0., 2.], dtype=torch.float64)
data
tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([1., 3., 0., 4.], dtype=torch.float64)
data
tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([2., 4., 2., 1.], dtype=torch.float64)
data
tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([1., 0., 2., 2.], dtype=torch.float64)
data
tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([2., 2., 3., 2.], dtype=torch.float64)
data
tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([0., 3., 2., 2.], dtype=torch.float64)
valid_loader
data
tensor([[[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([2., 1., 1., 0.], dtype=torch.float64)
data
tensor([[[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([3., 2., 2., 2.], dtype=torch.float64)
data
tensor([[[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([2., 3., 2., 1.], dtype=torch.float64)
data
tensor([[[  0,   0,   0,  ...,   3,   1,  -6],
         [  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   0,   0,  ...,   3,   0,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   4,   0,  ...,   0,   0,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   4,   0,  ...,   2,   5,   1],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,  -2,   2,  ...,   0,   5,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
targets
tensor([0., 1., 2., 1.], dtype=torch.float64)
data
tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([2., 2., 4., 2.], dtype=torch.float64)
data
tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([2., 1., 4., 2.], dtype=torch.float64)
data
tensor([[[  1,   2,  -1,  ...,   3,   1,  -6],
         [  2,  -1,  -1,  ...,   0,   1,  -2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,  -1,   1,  ...,   4,   5,   0],
         [  3,   6,   0,  ...,  -4,   0,   4],
         [  2,  -2,  -2,  ...,   6,   1,  -6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
targets
tensor([0., 2., 2., 4.], dtype=torch.float64)
data
tensor([[[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([3., 2., 0., 0.], dtype=torch.float64)
data
tensor([[[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([0., 1., 2., 0.], dtype=torch.float64)
data
tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([2., 2., 3., 2.], dtype=torch.float64)
data
tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([0., 2., 3., 2.], dtype=torch.float64)
data
tensor([[[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([0., 3., 1., 0.], dtype=torch.float64)
data
tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
targets
tensor([0., 0.], dtype=torch.float64)
epoch: 0
train
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.4054,  0.8002,  6.9856, -3.4680,  3.7926],
        [-6.2261, -3.4523,  2.0283, -0.9162,  2.3656],
        [-1.0768, -2.6567,  0.9208, -3.7499,  0.1602],
        [-3.5477, -0.2275,  1.5717, -4.0034,  0.4664]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 4, 2, 2]
target tensor([3, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(4.3548, grad_fn=<NllLossBackward0>)
Epoch: [0][0/25]	Time 1.829 (1.829)	Data 0.024 (0.024)	Loss 4.3548 (4.3548)	Accuracy 25.000 (25.000)
train
input tensor([[[  2,   0,  -1,  ...,  -3,   2,   3],
         [  2,  -1,  -1,  ...,   0,   1,  -2],
         [  1,   0,   0,  ...,   1,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -2,  ...,   0,  -3,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [  2,   2,   3,  ...,  -4,   2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   0,  -2,   0],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  0,   0,   0,  ...,   1,  -4,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-4.3356, -3.8095, -0.6936, -2.3237, -7.8924],
        [-5.4007, -8.2213,  1.3067,  2.3965, -0.3474],
        [-1.8102, -2.0694,  3.4944, -1.3014, -0.7437],
        [-6.4377, -6.0420,  0.8725, -3.2377, -1.3365]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 2, 2]
target tensor([2, 4, 2, 1])
<class 'torch.Tensor'>
loss
tensor(2.5959, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.0521, -1.0287,  0.0603,  0.5001, -0.1350],
        [-4.0005, -1.1224, -0.8959, -5.0069, -0.7019],
        [-7.0683, -0.4004,  1.4163, -1.0276, -3.2000],
        [-2.4158,  2.0869,  2.7229, -2.2902, -0.0721]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 4, 2, 2]
target tensor([1, 3, 3, 2])
<class 'torch.Tensor'>
loss
tensor(2.6953, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.1564,  1.3000, -0.1397, -0.0349, -8.6343],
        [-6.3328, -3.3332, -3.8234, -0.3543, -7.2888],
        [-3.6405, -0.5071, -5.6001, -1.7395, -2.1210],
        [-1.9558,  0.1286, -4.5112,  1.6192, -3.5814]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 1, 3]
target tensor([1, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(3.9749, grad_fn=<NllLossBackward0>)
train
input tensor([[[  0,   0,  -2,  ...,  -4,   5,  -5],
         [  1,  -1,  -1,  ...,   0,   2,   0],
         [  1,   0,  -2,  ...,   1,   1,  -5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -2,  -1,  ...,   2,  -4,  -5],
         [  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   0,   0,  ...,   2,   2,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  4,   1,  -2,  ...,  -2,   5,  -4],
         [  6,  -2,   1,  ...,   0,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-4.7279, -2.9610, -6.6670, -1.9088, -7.7049],
        [-6.1410, -2.2593, -3.2512, -1.0962, -7.1755],
        [-1.6146,  0.9464, -2.7281,  0.3098, -0.4359],
        [-2.2285,  0.8033, -1.0773,  0.7290, -4.6446]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 1, 1]
target tensor([4, 1, 1, 2])
<class 'torch.Tensor'>
loss
tensor(2.7359, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.2002,  6.6363,  0.7523, -4.4970, -1.6174],
        [-5.0421, -0.0916,  1.8907, -1.8952, -4.7817],
        [-6.2878,  2.9487, -4.7752, -3.0124, -7.6526],
        [-4.9061,  3.6063,  2.3967, -7.0308, -5.9074]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 1, 1]
target tensor([3, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(3.1903, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.7127,  -2.3021,  -2.8263,  -4.4630,  -5.0848],
        [-10.3059,  -0.3093,  -3.6247,  -6.3891,  -2.4700],
        [ -6.2411,   0.0106,  -1.0015,   0.5357,  -3.8301],
        [-10.2656,   8.7386,  -1.3213,  -9.4281,  -3.7643]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 3, 1]
target tensor([0, 3, 0, 0])
<class 'torch.Tensor'>
loss
tensor(8.4756, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.6420,  0.6821, -3.0631, -8.2039,  0.0462],
        [-4.2300, -5.4104, -0.9419, -7.6296, -2.9668],
        [-2.6595, -0.2558, -0.4197, -3.7143, -4.6607],
        [-2.2721, -2.1080,  2.1643, -4.3622, -2.7037]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 1, 2]
target tensor([3, 4, 0, 2])
<class 'torch.Tensor'>
loss
tensor(3.6624, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.2907,   1.6938,  -1.8226,  -2.8374,  -1.7089],
        [ -1.7113,  -7.4735,   0.4185,  -5.3913,  -4.7850],
        [ -3.0395,  -8.6589,   0.0519,  -7.3120,   1.6850],
        [ -0.1265,  -4.4341,   5.9733, -12.0673,   1.8490]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 4, 2]
target tensor([2, 0, 0, 3])
<class 'torch.Tensor'>
loss
tensor(7.2033, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 2.7957, -4.6277,  2.9950, -7.4523, -4.4738],
        [-2.4428, -7.9124, -0.3707, -2.5851, -7.5439],
        [-1.7003, -8.7094, -1.4680, -4.0079,  2.7866],
        [ 1.0200, -6.2829, -3.7717, -3.6332, -1.6882]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 4, 0]
target tensor([2, 4, 0, 1])
<class 'torch.Tensor'>
loss
tensor(4.9705, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.9305,  -6.7336,  -0.0842,  -4.6103,  -6.3102],
        [  6.7279, -13.4421,  -2.8458,  -5.9817,  -0.6450],
        [  3.5046,  -6.3774,  -0.7738,  -3.7773,  -2.7419],
        [  0.9305, -13.6825,  -3.4387,  -6.5621,  -0.7468]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 0, 0]
target tensor([0, 1, 4, 3])
<class 'torch.Tensor'>
loss
tensor(8.5317, grad_fn=<NllLossBackward0>)
Epoch: [0][10/25]	Time 1.687 (1.773)	Data 0.012 (0.022)	Loss 8.5317 (4.7628)	Accuracy 25.000 (25.000)
train
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  5.5526, -11.5444,  -3.2287,  -1.7211,  -4.1864],
        [  0.3266,  -8.1379,   0.9216,  -5.1118,   0.7385],
        [  2.1906,  -7.0707,   3.1004,   2.6985,  -2.6935],
        [  0.9674, -13.2155,  -0.5175,  -1.1515,  -4.0093]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 0]
target tensor([0, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.9958, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.6614,  -8.3757,  -0.3660,  -6.0289,   0.5096],
        [  4.2041, -12.5681,  -3.2779,  -2.9841,  -2.5506],
        [  4.7410, -15.6224,  -1.6170,  -1.1612,   0.3778],
        [  7.2303, -14.0341,  -1.6033,  -6.6290,  -6.6019]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 0, 0, 0]
target tensor([2, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(9.1066, grad_fn=<NllLossBackward0>)
train
input tensor([[[  2,  -2,  -1,  ...,   2,  -3,   4],
         [  2,   0,  -2,  ...,   0,   2,  -4],
         [  1,   0,  -1,  ...,  -5,   0,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   3,  -1,  ...,   0,  -3,   5],
         [  1,  -1,  -1,  ...,  -1,  -3,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,  -1,  -2,  ...,   0,   3,   4],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  7,  -3,  -1,  ...,   4,   1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  4.2561, -11.1960,  -2.1553,  -2.5886,  -1.7574],
        [  0.7869,  -7.6839,   1.4477,  -0.9028,  -0.6882],
        [  1.3763,  -9.8294,  -3.0646,  -2.1005,   0.1202],
        [  1.0711, -11.5543,   2.3627,  -6.0683,  -3.8788]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 0, 2]
target tensor([1, 2, 1, 0])
<class 'torch.Tensor'>
loss
tensor(7.2576, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.4355,  -6.8245,  -2.6000,  -2.8345,  -3.7740],
        [ -0.6774, -10.2159,  -2.0945,  -5.9669, -10.6067],
        [  2.8284,  -8.4866,   0.1900,  -2.8157,  -3.0889],
        [ -1.7540,  -9.6109,   1.7432,   0.2582,  -1.9973]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 0, 2]
target tensor([0, 0, 3, 1])
<class 'torch.Tensor'>
loss
tensor(4.4096, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.1169, -10.3343,   0.4491,  -2.2525,  -8.1321],
        [ -6.7533,  -8.7647,  -1.2676,   3.9585,  -4.2901],
        [  0.1535,  -8.1962,  -1.9956,  -1.3130,  -5.8975],
        [ -1.7485, -12.7308,   2.3237,  -1.8580,  -6.3871]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 0, 2]
target tensor([2, 3, 2, 3])
<class 'torch.Tensor'>
loss
tensor(1.6858, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-0.7162, -7.1729, -1.4040, -4.6996, -8.7313],
        [-8.6944, -7.9212, -0.3507, -1.5555, -8.7132],
        [-4.7758, -1.8161,  3.1863,  2.6577, -8.1667],
        [-8.2695, -6.9449,  0.0235,  0.3596, -6.5376]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 3]
target tensor([1, 4, 0, 2])
<class 'torch.Tensor'>
loss
tensor(6.2023, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.1280, -5.4022,  1.9013,  4.1430, -8.6254],
        [-3.4535, -6.0317, -1.1269,  1.2987, -5.6255],
        [-4.6248, -7.2741, -1.3403, -2.1152, -7.9714],
        [-7.8096, -2.9272,  1.9149, -0.7147, -2.3163]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 2, 2]
target tensor([2, 1, 3, 1])
<class 'torch.Tensor'>
loss
tensor(3.9705, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.6124,  -0.7575,   6.2011,  -1.4259,  -0.6847],
        [ -7.4657,  -3.6967,   1.0796,   0.8693,  -4.5088],
        [ -6.8829,  -1.2725,  -1.7664,   8.6910, -10.1625],
        [-15.0955,  -2.0047,   4.1820,  -3.2559,  -4.4447]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 3, 2]
target tensor([1, 3, 2, 3])
<class 'torch.Tensor'>
loss
tensor(6.4175, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-16.9809,  -2.0391,   3.2284,   2.9170,  -2.4826],
        [ -9.3447,  -3.3696,  -0.2207,  -1.7650,  -6.3397],
        [-13.8467,  -4.0061,  -4.7891,   1.2986,  -4.4671],
        [ -9.4179,  -3.9452,   2.5935,   0.9454,  -6.2494]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 3, 2]
target tensor([3, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(1.6471, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.4784,   2.1595,  -3.3129,   0.2273,  -1.0831],
        [ -8.1104,  -0.8972,  -6.0356,   4.2015,  -3.3096],
        [ -8.7278,  -0.4023,   0.4225,  -1.9408,  -6.8567],
        [-11.9023,   0.4872,  -5.1937,   0.8006,  -6.1032]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 2, 3]
target tensor([3, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(4.8302, grad_fn=<NllLossBackward0>)
Epoch: [0][20/25]	Time 1.819 (1.785)	Data 0.027 (0.022)	Loss 4.8302 (4.7102)	Accuracy 25.000 (25.000)
train
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.8267,   5.1343,  -0.5724,   1.7663,  -5.1120],
        [ -8.3087,   1.8574,   1.0852,  -6.9125,  -1.4307],
        [ -9.1450,   1.4088,  -2.1539,   2.6155,  -3.4049],
        [-11.2823,   5.8028,  -5.4970,  -0.3892,  -1.1907]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 3, 1]
target tensor([3, 2, 0, 1])
<class 'torch.Tensor'>
loss
tensor(4.1540, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.1280,   3.8438,  -5.0022,  -0.5879,  -3.1822],
        [-16.1190,  12.3732,  -1.2892,   2.4341,  -4.8343],
        [-13.0659,   1.0395,  -1.0160,   2.4442,  -8.7324],
        [ -9.4772,   1.5109,  -3.1215,   1.0532,  -5.3085]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 3, 1]
target tensor([1, 1, 0, 4])
<class 'torch.Tensor'>
loss
tensor(5.7709, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-13.8569,   4.1247,  -3.1844,  -2.6339,  -1.8981],
        [-11.1682,   5.4773,  -4.5486,   0.1622,  -2.4670],
        [-12.9495,   5.9496,   0.3924,  -4.7544,   0.5009],
        [-14.9271,   4.7019,   2.1771,   0.7883,  -3.6765]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 1, 1]
target tensor([0, 2, 4, 2])
<class 'torch.Tensor'>
loss
tensor(9.0236, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.9203,   3.9985,  -3.5072,  -0.5667,  -6.7896],
        [-17.2545,   2.2797,  -2.0953,  -0.7808, -11.5213],
        [-20.6936,  -1.9440,   0.5375,  -8.5967,  -5.4538],
        [ -9.9739,   3.0793,   1.3803,  -0.2956,  -2.5858]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 1]
target tensor([0, 1, 0, 1])
<class 'torch.Tensor'>
loss
tensor(9.1251, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.3300e+01,  1.5496e+00, -1.1147e-01, -3.6734e+00, -4.6176e-01],
        [-1.1574e+01,  1.1853e+00, -7.3308e-01, -2.7794e+00, -1.4054e+00],
        [-1.2110e+01,  1.7612e+00, -1.7925e-01, -3.8622e+00, -2.4442e-03],
        [-1.1235e+01,  5.8397e-01,  8.6891e-01, -3.0587e+00, -2.3051e+00]])
<class 'torch.Tensor'>
[1, 1, 1, 2]
target tensor([3., 3., 1., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.6219)
Test: [0/13]	Time 0.484 (0.484)	Loss 3.6219 (3.6219)	Accuracy 25.000 (25.000)
evaluate
input tensor([[[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.7270,   0.9070,  -0.3573,  -2.9113,  -2.9615],
        [-12.4083,   0.0587,   0.3177,  -2.5269,  -1.8830],
        [-12.1017,   1.0151,   0.5394,  -4.0556,  -1.3970],
        [-11.7679,   0.3321,   1.0204,  -1.0283,  -2.6856]])
<class 'torch.Tensor'>
[1, 2, 1, 2]
target tensor([3., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.5710)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.6206,   0.2061,   0.0390,  -2.3820,  -1.3994],
        [-12.4566,   0.9031,  -1.5285,  -2.4724,  -1.5489],
        [-12.2964,   1.2682,   1.3357,  -3.5077,  -1.1910],
        [-10.5819,   1.1521,   1.3104,  -3.0590,  -1.5428]])
<class 'torch.Tensor'>
[1, 1, 2, 2]
target tensor([0., 0., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(13.0028)
evaluate
input tensor([[[  0,   4,   0,  ...,   2,   5,   1],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,  -2,   2,  ...,   0,   5,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[ 10,  -6,   1,  ...,   2,  -5,   4],
         [  4,  -3,  -3,  ...,  -2,   1,   3],
         [  1,  -1,  -2,  ...,   3,   3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  6,  -2,   0,  ...,   1,   0,   2],
         [  1,  -1,   0,  ...,   0,  -6,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-12.3019,   0.1259,   0.8149,  -2.9147,  -1.8653],
        [-10.0396,   0.9922,  -0.3566,  -2.9936,  -1.2059],
        [ -9.0714,   1.5491,   0.6701,  -3.0499,  -2.6553],
        [-13.2370,   1.3111,   0.6145,  -3.3668,  -2.2757]])
<class 'torch.Tensor'>
[2, 1, 1, 1]
target tensor([1., 1., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.7892)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.4291,   1.6822,   0.1646,  -2.5035,  -3.2753],
        [-11.5275,   0.8980,   0.9416,  -3.4184,  -1.0657],
        [-12.1223,   1.5194,   1.5165,  -3.4872,  -0.7085],
        [ -7.1898,   0.7102,   0.7379,  -3.2710,  -2.4289]])
<class 'torch.Tensor'>
[1, 2, 1, 2]
target tensor([0., 1., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.4008)
evaluate
input tensor([[[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.4160,   0.3134,   0.9145,  -2.8978,  -0.9034],
        [-11.7488,   1.4529,   2.0917,  -2.8852,   0.1054],
        [-10.8365,   0.5270,  -0.4730,  -3.6615,  -0.5619],
        [-12.2353,   0.1781,  -0.1550,  -2.8373,  -1.9682]])
<class 'torch.Tensor'>
[2, 2, 1, 1]
target tensor([2., 2., 0., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.1544)
evaluate
input tensor([[[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         [  1,  -1,  -1,  ...,   0,   2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   1,  -1,  ...,   2,  -3,  -2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,   0,   1,  ...,   2,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  2,   3,   1,  ...,  -3,  -4,   0],
         [  1,   1,   0,  ...,   0,   6,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-13.4394,   0.6114,   0.3470,  -4.7546,  -1.0204],
        [ -9.3090,   0.4281,   0.2972,  -3.4958,  -1.6590],
        [-11.5767,   0.5907,   0.3777,  -2.5948,  -1.1814],
        [-13.9002,   1.1325,  -0.2329,  -3.7312,  -1.0885]])
<class 'torch.Tensor'>
[1, 1, 1, 1]
target tensor([2., 2., 4., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.4830)
evaluate
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.9805,   0.2314,  -0.1169,  -3.4971,  -1.9469],
        [-11.8321,   1.4538,   0.4240,  -3.5755,  -1.9499],
        [-10.4692,   1.2166,   0.7687,  -3.6623,  -0.7883],
        [ -8.8003,   0.6357,   1.5823,  -2.8000,  -2.6097]])
<class 'torch.Tensor'>
[1, 1, 1, 2]
target tensor([0., 4., 3., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.9369)
evaluate
input tensor([[[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.0793e+00, -1.1001e+00, -7.8266e-02, -2.8594e+00, -3.1038e+00],
        [-7.8198e+00,  1.4815e+00,  5.1163e-03, -2.3028e+00, -1.6392e+00],
        [-8.4949e+00,  7.6644e-01, -3.6194e-01, -2.1833e+00, -3.5607e+00],
        [-1.3693e+01,  2.2585e+00, -2.3145e-01, -3.3438e+00, -6.2629e-01]])
<class 'torch.Tensor'>
[2, 1, 1, 1]
target tensor([0., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.0509)
evaluate
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.9697,   0.3059,  -0.2303,  -2.8000,  -2.5328],
        [-10.4141,   0.9738,   0.9978,  -2.7775,  -2.0193],
        [ -8.5968,   1.8161,  -0.2193,  -1.7033,  -3.6625],
        [-11.3588,   1.8661,   2.1064,  -3.4866,  -1.4471]])
<class 'torch.Tensor'>
[1, 2, 1, 2]
target tensor([2., 4., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.3861)
evaluate
input tensor([[[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.8533,   0.4640,   0.9312,  -2.6646,  -2.6421],
        [-12.9524,   0.9273,  -0.6170,  -3.6484,  -0.9444],
        [-13.0674,   1.8799,  -0.0475,  -3.0830,  -2.9544],
        [-13.9641,   0.3370,   0.8464,  -3.6068,  -0.5300]])
<class 'torch.Tensor'>
[2, 1, 1, 2]
target tensor([2., 0., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(11.3125)
Test: [10/13]	Time 0.539 (0.518)	Loss 11.3125 (4.7009)	Accuracy 25.000 (22.727)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-14.3647,   0.5079,  -0.0510,  -3.7540,  -0.5484],
        [-11.8715,   1.2457,   0.1724,  -2.3428,  -2.5859],
        [ -9.3853,   0.8008,  -0.0228,  -3.4021,  -2.7965],
        [-11.4633,   0.3029,   0.3599,  -3.0082,  -1.4140]])
<class 'torch.Tensor'>
[1, 1, 1, 2]
target tensor([2., 2., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.1650)
evaluate
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.0480,   1.5072,   0.6858,  -0.9358,  -3.0856],
        [-10.4683,   1.6473,   0.3375,  -3.4152,  -2.0121]])
<class 'torch.Tensor'>
[1, 1]
target tensor([2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.4124)
epoch: 1
train
input tensor([[[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  4,  -2,   0,  ...,  -4,   2,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,  -2,  ...,   3,   3,   0],
         [  2,  -1,  -2,  ...,   2,   4,  -2],
         [  1,  -1,  -1,  ...,  -2,   0,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   4,   0,  ...,   0,   0,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-11.1061,   1.4851,   6.1278,  -7.3955,  -2.5494],
        [ -5.0976,   0.6456,   1.4165,  -0.9455,  -1.8214],
        [-11.3701,   1.9842,  10.6038,  -7.0056,  -3.2895],
        [ -1.0517,  -2.8201,  -1.9540,  -8.3605,  -2.3656]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 0]
target tensor([2, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.2728, grad_fn=<NllLossBackward0>)
Epoch: [1][0/25]	Time 1.807 (1.807)	Data 0.024 (0.024)	Loss 0.2728 (0.2728)	Accuracy 100.000 (100.000)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.1991,   4.0239,  -1.8241,  -5.1548,   0.4925],
        [ -8.1356,  -3.4072,   0.6698,  -2.6389,  -5.4319],
        [-10.2913,  -3.4537,  -2.3611,  -0.2208,  -4.4775],
        [ -8.1461,  -2.8377,  -5.8328,   4.8641,  -8.1654]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 3, 3]
target tensor([1, 1, 3, 3])
<class 'torch.Tensor'>
loss
tensor(1.0804, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.2634,   0.2176,   4.4412,  -6.7143,  -1.8986],
        [ -8.8826, -10.1436,   6.8644,  -5.9957,   3.4469],
        [ -2.6349,  -3.7052,   3.8091,  -5.3457,  -2.8644],
        [-11.2957,  -0.6551,  -1.5088,  -4.6493,   1.5109]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 4]
target tensor([1, 2, 0, 3])
<class 'torch.Tensor'>
loss
tensor(4.2583, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.2682,  -3.6971,   4.7687,   1.4142,  -1.3422],
        [ -7.0737,   1.6058,   3.7992,  -7.4465,  -3.4896],
        [ -7.8699,  -8.1050,   2.4271,  -7.6385,  -2.3111],
        [-11.8189,   1.2506,   2.0220, -11.4974,   0.3201]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.3552, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.6068,  -2.3488,   1.4590,  -1.3311,  -2.3192],
        [ -7.3169,  -8.2057,  -1.4315,   0.6735,   3.4563],
        [ -4.7418,  -5.3641,   1.2261,  -6.5884,   3.4747],
        [ -3.1487,   0.2178,  -1.0221, -11.3062,  -3.1668]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 4, 4, 1]
target tensor([2, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(1.9279, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.2765,  -3.7707,  -1.5336,  -4.8015,  -4.3040],
        [ -2.9817,  -6.1010,  -1.5505,  -2.3292,  -5.1008],
        [-11.4361,  -4.9491,  -1.1497,  -5.0773,  -1.5226],
        [ -3.7885,  -2.9449,  -5.9937,  -4.7402,   1.4559]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 4]
target tensor([0, 2, 2, 3])
<class 'torch.Tensor'>
loss
tensor(2.1452, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.5893, -6.4752, -3.4493, -7.5983, -0.7103],
        [-6.5983, -7.7535, -6.2822, -5.1558,  2.2312],
        [ 1.0104, -0.6858, -2.8661, -8.4103, -1.5396],
        [-3.4604, -1.0127,  2.6117, -8.6644, -1.7647]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 4, 0, 2]
target tensor([4, 4, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.1226, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.1910,  -7.6482,   4.3745,  -5.6079,  -4.8234],
        [ -3.5432, -10.0528,  -3.0433,  -3.3241,  -6.0251],
        [ -0.8708,  -8.4866,   6.0181,  -6.4077,  -8.8034],
        [ -4.7949,   0.5274,   0.3720,  -7.1711,  -2.9263]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 1]
target tensor([2, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.3804, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.8275,  -1.2650,  -0.5965,  -2.4327,  -4.5674],
        [  5.4614,  -3.1883,  -1.5246,  -4.1588,  -1.5118],
        [ -2.6654, -11.9245,   1.3793,  -6.7871,  -1.5291],
        [ -0.9327,  -8.9180,  -2.8355,  -7.7385,   0.8746]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 4]
target tensor([3, 0, 4, 0])
<class 'torch.Tensor'>
loss
tensor(1.8313, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.3869,  -5.8250,  -8.0135,  -4.3703,  -2.1775],
        [ -3.9332,  -8.3797,  -0.8986, -15.8430,   5.3848],
        [  2.9716,  -9.1926,  -0.7541,  -4.0431,   2.3683],
        [ -4.4250,  -9.0340, -10.5477,  -7.5389,  -9.0238]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 4, 0, 0]
target tensor([4, 4, 0, 1])
<class 'torch.Tensor'>
loss
tensor(2.4260, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.6507,  -0.7633,  -2.2328,  -4.0771,  -9.4124],
        [  5.7382,  -6.6448,  -7.0487,  -6.0396,  -1.1517],
        [  0.9143,  -6.3036,  -1.6958,  -1.4562, -13.7988],
        [  4.3809,  -2.3491,  -3.0635,  -5.2095,  -6.2732]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 0, 0]
target tensor([1, 0, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.1268, grad_fn=<NllLossBackward0>)
Epoch: [1][10/25]	Time 1.694 (1.719)	Data 0.023 (0.022)	Loss 0.1268 (1.3570)	Accuracy 100.000 (68.182)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.9025,   0.2746,   2.1587, -12.6485,  -8.8144],
        [ -0.0237,  -5.0751,  -1.4655,  -5.4236,  -5.1260],
        [ -1.3634,   1.4219,  -4.5027,  -1.4413,  -4.1126],
        [ -2.1650, -10.9104,   2.1545,  -1.8699,  -8.3608]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 1, 2]
target tensor([2, 0, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.1296, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.1342,   0.1431,  -1.9059,  -2.9975,  -7.7875],
        [ -3.1653,   5.4604,  -1.1855,  -5.5555,  -5.2517],
        [ -4.4911,  -1.6613,   1.6061,  -2.3114,  -7.7918],
        [ -1.9006,  -2.6339,  -3.1896,  -3.9361, -10.9134]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 0]
target tensor([2, 1, 2, 2])
<class 'torch.Tensor'>
loss
tensor(1.0559, grad_fn=<NllLossBackward0>)
train
input tensor([[[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  7.5901,  -1.0167,  -6.6811,  -0.8524, -11.0555],
        [  3.8361,  -6.9476,  -2.8745,   2.9553,  -4.5418],
        [ -2.9150,   1.0973,  -0.5841,  -6.3780,  -5.1827],
        [ -3.8421, -11.4218,  -2.3767,  -3.5319,  -9.1327]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 1, 2]
target tensor([0, 3, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.4633, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.1722,  -5.7198,  -5.0403,   5.2162, -11.7277],
        [  4.6864,  -3.0223,  -4.7350,  -3.5998,  -5.7877],
        [  1.4173,  -6.8384,  -6.5043,   1.1934,  -8.4844],
        [ -7.4901,   3.2094,   1.5184,   3.8878,  -9.1523]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 0, 3]
target tensor([3, 0, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.9436, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.4544e+00, -3.6155e+00, -2.3868e+00,  1.6391e+00, -1.9356e+01],
        [-6.5221e+00, -1.5256e+00, -4.7943e-01, -4.8298e+00,  1.0178e+00],
        [ 6.3638e-01, -2.0413e+00, -3.1002e+00, -3.2863e+00, -6.9330e+00],
        [-5.9900e-01, -2.7728e+00,  4.0523e-02, -1.3535e-02, -8.7569e+00]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 4, 0, 2]
target tensor([3, 4, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.3332, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.7447, -11.2126,   5.2472, -13.8535,  -2.9143],
        [ -1.7513,  -0.4569,  -2.5681,   0.2443, -14.4770],
        [ -1.7010,  -5.0904,  -1.3759,  -0.3984,  -8.7400],
        [ -5.7318,   1.2011,  -1.9985,  -2.3721,  -9.9251]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 3, 1]
target tensor([2, 3, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.5192, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.4934,  -4.8882,  -0.5748,  -2.2629, -14.2961],
        [ -0.7055, -15.0289,  -2.0861,  -3.1564, -12.2631],
        [-10.6105,  -3.6265,  -3.8771,   4.4844, -10.6998],
        [ -1.2970,  -0.1751,   3.0155,  -8.7260,  -9.6584]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 3, 2]
target tensor([0, 0, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.8720, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.4529,  -2.2023,  -4.2295,   2.5775, -15.4338],
        [ -6.5771,  -3.6305,  -1.0419,   7.3712, -13.0949],
        [ -3.5555,  -3.4279,  -4.4273,  -6.8338, -10.8288],
        [ -8.2710,  -5.5651,   0.1478,   2.8745,  -7.2823]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 1, 3]
target tensor([1, 1, 1, 3])
<class 'torch.Tensor'>
loss
tensor(4.1716, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 1.4166e-01, -2.3114e-01,  2.7977e+00,  2.7775e+00, -9.6256e+00],
        [-2.1915e+00,  8.1834e+00, -3.1659e+00, -7.8644e-01, -9.0771e+00],
        [ 1.5135e+00, -3.2710e+00,  2.0981e+00,  4.5167e-03, -6.6202e+00],
        [ 1.0529e+00, -1.3007e+00, -4.0975e+00, -6.7381e+00, -1.3486e+01]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 2, 0]
target tensor([2, 1, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.9284, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.8945,  -1.5381,   1.9422,   1.1241,  -6.0016],
        [  3.9781,  -7.6455,  -3.8265,  -4.9078, -10.7149],
        [  0.2705,   4.7839,  -1.6777, -11.2276,  -9.7320],
        [ -2.9056,  -2.1028,  -3.6166,   0.2051, -13.8534]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 1, 3]
target tensor([3, 0, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.9199, grad_fn=<NllLossBackward0>)
Epoch: [1][20/25]	Time 1.644 (1.790)	Data 0.023 (0.023)	Loss 0.9199 (1.2030)	Accuracy 50.000 (69.048)
train
input tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.3765,   3.4254,   7.0360, -10.8083, -10.2536],
        [  3.9943,   7.5371,  -2.1138,  -8.6422,  -6.5375],
        [-10.0943,  -4.0515,   0.7000,  -7.9219, -10.3898],
        [ -1.2639,  -9.2177,   4.4430,  -7.1629,  -6.0010]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 2, 2]
target tensor([2, 0, 1, 4])
<class 'torch.Tensor'>
loss
tensor(4.7016, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,  -1,   0,  ...,   0,  -6,  -4],
         [  5,  -1,   0,  ...,   7,   3,   0],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   2,  -2,  ...,   0,   1,  -6],
         [  3,  -1,  -1,  ...,  -2,   0,  -1],
         [  2,   0,   0,  ...,  -3,   2,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   0,   0,  ...,   3,   0,  -5],
         [  2,  -2,  -2,  ...,   6,   1,  -6],
         [  3,   1,  -1,  ...,  -2,  -2,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  1.3105,   1.4888,   1.4114,  -9.5865,  -5.8356],
        [ -8.6468,  -4.1262,  -5.4122,   0.5495, -10.6702],
        [ -6.6799,  -6.0899,   4.6698,  -3.2438, -14.7850],
        [ -1.8841,   2.9605,   9.6609, -10.6798,  -3.4359]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 2, 2]
target tensor([0, 3, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.3020, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   1,  -3,  ...,   1,  -3,   2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,  -1,  -1,  ...,  -2,   0,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,   0,  ...,   0,  -6,  -4],
         [  0,   2,   0,  ...,   3,   0,  -7],
         [  3,  -1,   2,  ...,   1,  -2,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   0,   3,  ...,   2,   2,   2],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -1.3782,   2.1763,   1.5932,  -3.9698,  -9.9350],
        [ -1.5706,   3.6489,  -4.3358,  -9.1169,  -9.6616],
        [  0.4433,   1.7494,  -2.3730,  -1.9435,  -4.6237],
        [  4.6357,   1.5148, -10.7006,  -0.8994,  -9.0608]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 1, 0]
target tensor([2, 4, 3, 0])
<class 'torch.Tensor'>
loss
tensor(4.5938, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.5798,  1.1374,  2.2570, -6.2705, -0.8913],
        [-1.0453,  5.8840,  2.1272, -4.5998, -7.7850],
        [-7.5489,  6.7223,  4.6453, -9.4104, -4.5006],
        [-7.2928, -5.3602, -5.5496, -4.0374, -3.0344]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 1, 4]
target tensor([3, 1, 1, 3])
<class 'torch.Tensor'>
loss
tensor(2.6081, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.5142e+00,  1.6089e+00,  3.8791e-04, -5.0241e+00, -7.2661e+00],
        [-4.4588e+00,  1.4339e+00, -9.6355e-01, -6.8040e+00, -7.1623e+00],
        [-4.7781e+00,  2.7517e+00, -3.0071e+00, -8.4078e+00, -7.4067e+00],
        [-4.5214e+00,  3.1969e+00, -1.9911e+00, -7.4257e+00, -6.0324e+00]])
<class 'torch.Tensor'>
[1, 1, 1, 1]
target tensor([2., 1., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.6529)
Test: [0/13]	Time 0.528 (0.528)	Loss 3.6529 (3.6529)	Accuracy 25.000 (25.000)
evaluate
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.5858,  2.9547, -1.1959, -7.7603, -5.4864],
        [-4.9085,  2.6932, -2.4318, -7.6866, -7.7953],
        [-3.0065,  1.9806, -0.8684, -7.0797, -5.9412],
        [-4.2078,  1.0494, -1.8874, -6.3977, -6.1605]])
<class 'torch.Tensor'>
[1, 1, 1, 1]
target tensor([0., 1., 1., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.7236)
evaluate
input tensor([[[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.8243,  2.1208, -1.5896, -4.7905, -7.5965],
        [-3.3321,  2.0389, -1.8302, -6.9810, -7.9403],
        [-3.0370,  1.3892, -1.0705, -6.5499, -7.1257],
        [-3.3270,  2.8627, -2.7075, -8.2649, -5.6418]])
<class 'torch.Tensor'>
[1, 1, 1, 1]
target tensor([2., 3., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.8397)
evaluate
input tensor([[[  2,   3,   1,  ...,  -3,  -4,   0],
         [  2,  -2,  -2,  ...,   6,   1,  -6],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   2,  -2,  ...,   0,   1,  -6],
         [  0,   0,   0,  ...,  -9,  -2,   3],
         [  2,   0,  -2,  ...,   2,  -2,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,  -1,   1,  ...,   4,   5,   0],
         [  3,   6,   0,  ...,  -4,   0,   4],
         [  2,  -2,  -2,  ...,   6,   1,  -6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-4.9533,  2.4432,  0.3530, -7.5061, -6.9187],
        [-4.6403,  1.9892, -2.9510, -8.6282, -6.8430],
        [-2.7384,  1.9589, -1.2065, -5.5662, -6.9627],
        [-4.6005,  2.6351, -1.3243, -7.8923, -8.2068]])
<class 'torch.Tensor'>
[1, 1, 1, 1]
target tensor([0., 2., 2., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.6350)
evaluate
input tensor([[[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.4017,  1.9078, -0.7281, -5.6989, -5.4770],
        [-0.9236,  1.3568,  0.2775, -5.7841, -7.6263],
        [-4.9975,  2.3825, -0.5447, -5.5400, -4.4372],
        [-3.8854,  2.2955, -1.9067, -7.9083, -6.8237]])
<class 'torch.Tensor'>
[1, 1, 1, 1]
target tensor([1., 0., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.9803)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.0324,  1.3549, -2.6674, -7.8811, -6.4149],
        [-1.7340,  2.8887, -1.7418, -5.9473, -6.2320],
        [-1.3888,  1.5742, -0.4982, -6.2390, -6.6579],
        [-3.0784,  2.8731, -0.3031, -5.7470, -7.3422]])
<class 'torch.Tensor'>
[1, 1, 1, 1]
target tensor([2., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.0190)
evaluate
input tensor([[[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  0,   0,  -3,  ...,   5,   0,  -5],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   2,  -2,  ...,  -3,  -1,   0],
         [  2,  -2,  -1,  ...,   2,  -3,   4],
         [  0,  -2,  -5,  ...,   0,   4,   7],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  7,  -4,   0,  ...,  -1,   1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,  -3,  -1,  ...,   0,  -4,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-2.8332,  1.7845, -0.9064, -5.2476, -6.1807],
        [-1.1011,  2.1972, -1.7868, -5.2065, -5.4465],
        [-2.7549,  1.6726, -0.3314, -5.2840, -7.5078],
        [-2.7849,  2.7465, -0.5214, -5.1496, -7.3388]])
<class 'torch.Tensor'>
[1, 1, 1, 1]
target tensor([0., 1., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.5500)
evaluate
input tensor([[[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.3794,  2.3767, -2.3322, -8.0957, -6.0861],
        [-3.1092,  1.6140, -1.6890, -6.2530, -7.3428],
        [-3.0274,  2.0500,  0.4005, -6.2107, -5.3871],
        [-4.1866,  1.9647, -2.0596, -7.7284, -8.0155]])
<class 'torch.Tensor'>
[1, 1, 1, 1]
target tensor([0., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.4993)
evaluate
input tensor([[[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.1573,  1.6111,  0.5107, -5.7184, -6.1903],
        [-2.8836,  2.0788, -1.5392, -5.0936, -7.5141],
        [-4.1177,  2.9294, -2.5827, -6.3652, -6.0016],
        [-2.4699,  2.5847, -1.5027, -5.8493, -8.2245]])
<class 'torch.Tensor'>
[1, 1, 1, 1]
target tensor([0., 1., 3., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.1176)
evaluate
input tensor([[[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.1730,  2.1925, -0.5299, -6.0478, -4.7714],
        [-3.2313,  0.9791, -3.1613, -6.5603, -6.8430],
        [-4.7598,  3.0519, -3.0487, -7.4418, -8.5690],
        [-1.3592,  0.6925, -1.4286, -5.9081, -6.3692]])
<class 'torch.Tensor'>
[1, 1, 1, 1]
target tensor([3., 3., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.4925)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.3971,  2.6027, -2.7557, -7.5979, -7.2261],
        [-3.5560,  1.8119, -4.1076, -7.3703, -7.2216],
        [-4.8024,  2.5845, -0.4887, -7.6015, -7.0917],
        [-3.3884,  3.1356, -0.6937, -6.9168, -6.1302]])
<class 'torch.Tensor'>
[1, 1, 1, 1]
target tensor([2., 0., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.4276)
Test: [10/13]	Time 0.546 (0.511)	Loss 4.4276 (4.2671)	Accuracy 0.000 (18.182)
evaluate
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.7126,  2.5548, -2.1663, -5.9822, -7.6801],
        [-2.0646,  1.4610, -3.0005, -7.1498, -6.7743],
        [-3.9088,  1.0606, -2.3240, -7.3205, -7.9479],
        [-2.8998,  1.3831, -1.3531, -6.6522, -7.2557]])
<class 'torch.Tensor'>
[1, 1, 1, 1]
target tensor([2., 0., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.9584)
evaluate
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.1679,  2.7218, -1.1309, -6.1193, -7.0993],
        [-1.9210,  1.6132, -0.9133, -4.7335, -4.7172]])
<class 'torch.Tensor'>
[1, 1]
target tensor([4., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.2391)
epoch: 2
train
input tensor([[[  1,   1,   2,  ...,   4,   0,  -2],
         [  2,   1,   1,  ...,   0,  -1,   0],
         [  1,  -2,  -1,  ...,   0,  -5,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   0,   0,  ...,   1,  -3,   0],
         [  1,  -1,  -1,  ...,  -1,  -3,   3],
         [  0,   1,   0,  ...,  -1,   8,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   1,   1,  ...,   6,   1,  -1],
         [  1,   2,   3,  ...,   0,  -3,   1],
         [  1,  -1,  -1,  ...,   2,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -2.9767,  -1.6201,   8.6541,  -9.5188,  -4.2359],
        [ -0.4589,   4.1092,  -1.4045,  -8.6988,  -9.3555],
        [ -1.2699,   3.2115,  -2.7006, -11.3904,  -4.5980],
        [ -1.6592,  -4.3858,   0.1788, -10.0316,   1.9594]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 1, 4]
target tensor([2, 2, 2, 4])
<class 'torch.Tensor'>
loss
tensor(2.9086, grad_fn=<NllLossBackward0>)
Epoch: [2][0/25]	Time 1.831 (1.831)	Data 0.024 (0.024)	Loss 2.9086 (2.9086)	Accuracy 50.000 (50.000)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.9221,  -0.3680,  -4.3313,  -7.2294, -14.2484],
        [ -9.8556,  -1.0249,   7.2827,  -4.8781,  -2.7586],
        [  5.2874,  -4.7408,  -8.7278,  -4.9505,  -6.4277],
        [ -3.6932,  -0.4259,  -5.6148,  -0.3647,  -4.1878]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 0, 3]
target tensor([0, 2, 0, 3])
<class 'torch.Tensor'>
loss
tensor(0.1984, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.9438,   6.8850, -10.4828,  -9.4885,  -6.1430],
        [ -4.8331,  -7.6174,   7.2426,  -6.7589,  -6.4874],
        [ -8.6530,  -3.2207,  -4.0199,  -9.0443,   0.5174],
        [-11.5015,   9.9022,  -3.0335,  -7.9889,  -7.7043]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 4, 1]
target tensor([1, 2, 4, 1])
<class 'torch.Tensor'>
loss
tensor(0.0086, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.4609,  -1.9969,   6.7137, -10.9710,  -9.1376],
        [ -6.2664,   3.3299,  -2.9041,  -2.2248, -12.4276],
        [ -9.6873,   1.5551,  -4.0011,   5.4434,  -6.9168],
        [  0.1614,   0.2072,  -7.2761,  -5.9390,  -3.2394]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 3, 1]
target tensor([2, 0, 3, 0])
<class 'torch.Tensor'>
loss
tensor(2.5891, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,   1,  ...,   2,  -2,  -2],
         [  6,  -2,   1,  ...,   0,  -1,   0],
         [  4,  -2,   5,  ...,   1,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  1,  -1,  -1,  ...,  -4,   1,   6],
         [  4,   2,   0,  ...,  -1,  -3,   8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   2,  -2,  ...,   0,   1,  -6],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [ 13,  -6,   0,  ...,  -1,  -3,   9],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -3.2136,  -3.2824,   4.6603,  -9.5633,  -4.8678],
        [ -0.9930,  -1.5153,   9.2338,  -7.2194, -13.4188],
        [ -5.5345,  -5.1692,  -3.2147,   2.5336, -12.7713],
        [-11.1760,  -5.0717,   1.2619,   8.4293,  -7.2666]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 3, 3]
target tensor([2, 2, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.0014, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.6343, -13.2258,   3.8247,  -1.3162,  -4.0878],
        [ -3.3065,  -8.1179,  -5.9570,   3.9342, -14.4358],
        [ -0.3379,  -4.6751,   0.0384,  -5.8025,  -4.2085],
        [  2.8310,  -3.1493,  -8.2988,  -2.4813,  -3.7714]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 2, 0]
target tensor([2, 3, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.1384, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.3031, -6.0076, -2.6046, -1.0575, -2.5617],
        [-1.9774, -8.4879, -2.8326, -3.9967, -6.6787],
        [-5.3646, -2.9447, -6.3326, -4.2223, -0.9797],
        [ 7.4093, -9.8980, -6.9430, -5.8546, -0.8432]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 4, 0]
target tensor([3, 0, 3, 0])
<class 'torch.Tensor'>
loss
tensor(1.1051, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.8561, -6.7838,  1.6066, -1.7531, -8.4552],
        [-4.8527, -2.8093, -1.2425, -3.0891, -3.0273],
        [ 4.3213, -9.5274, -2.2659, -0.9379, -3.6058],
        [ 3.2168,  6.7528, -2.5243, -9.0903, -5.3105]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 0, 1]
target tensor([2, 1, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.5216, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.2652,  -5.4744,   2.5284,  -6.0319,  -6.6008],
        [  5.8767,   2.4590,  -7.1583,  -7.4743,  -0.8385],
        [ -0.7614,  -1.9925,  -1.2178,  -5.5147,  -6.2034],
        [ -1.2157,  -9.4625,  11.9091,  -7.0311, -10.2990]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 0, 2]
target tensor([2, 1, 1, 2])
<class 'torch.Tensor'>
loss
tensor(1.3510, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.4152, -17.0227, -10.7877,   8.2231, -12.2141],
        [  1.1600,  -5.5390,  -3.3235,  -1.5156,  -5.0133],
        [ -5.3494,  -5.7734,  -5.1116,   3.2803,  -6.3734],
        [ -1.2106,  -5.4919, -11.8982,   0.5932,  -7.0972]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 3, 3]
target tensor([3, 1, 2, 1])
<class 'torch.Tensor'>
loss
tensor(5.3529, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.2708, -13.6739,   2.7497,  -0.7821,  -8.7218],
        [ -0.3268, -20.8705, -10.2300,   0.6208,  -6.2862],
        [ -0.5221, -13.4046,   5.5758,  -8.9515,  -9.1046],
        [  1.2280,  -3.0634,  -2.1013,  -2.3322,  -8.0061]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 2, 0]
target tensor([2, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.3471, grad_fn=<NllLossBackward0>)
Epoch: [2][10/25]	Time 2.280 (1.771)	Data 0.012 (0.020)	Loss 0.3471 (1.3202)	Accuracy 75.000 (72.727)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.6012, -15.5083,  -2.3221,  -3.8442,  -4.5880],
        [ -2.1221,   4.3639, -10.4514,  -1.8050,  -0.1584],
        [  7.2797, -20.3488,  -4.5422,  -4.6423,   1.0868],
        [ -5.5242,  -1.9185,  -7.6863,   1.1711, -10.2527]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 0, 3]
target tensor([0, 1, 4, 1])
<class 'torch.Tensor'>
loss
tensor(2.3533, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.2765,  -3.3761,   6.0733,  -4.7916,  -5.9084],
        [  0.1244,  -9.8210, -10.6240,  -9.6480,   9.8288],
        [ -5.6172,   3.4305,  -6.0157,  -5.8304,  -4.9906],
        [ -7.7041,  -5.2118,   5.8282,  -0.8380,  -6.1435]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 4, 1, 2]
target tensor([2, 4, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0025, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.1760,  -9.7246,   1.2590,   7.6356,  -7.6446],
        [ -2.4326,  -8.2058,  -3.7486,   5.0796,  -4.8572],
        [ 10.9224,  -4.6294,  -7.9358, -11.0959,   4.8707],
        [ -4.0018, -15.5452,   3.6969,  -2.8730,  -7.1047]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 0, 2]
target tensor([3, 3, 4, 2])
<class 'torch.Tensor'>
loss
tensor(1.5146, grad_fn=<NllLossBackward0>)
train
input tensor([[[  3,   0,   0,  ...,   1,  -3,   0],
         [  2,   0,   0,  ...,  -2,   5,   4],
         [  2,   0,  -2,  ...,   0,   2,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -3,  -1,  ...,  -4,   5,   8],
         [  2,   0,  -2,  ...,   2,  -2,  -4],
         [  3,  -1,  -2,  ...,   0,   3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  4,   1,  -2,  ...,  -2,   5,  -4],
         [  6,  -2,   1,  ...,   0,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ 2.8564, -8.0314,  0.8539, -3.3065,  0.7476],
        [-3.6713, -6.7874,  4.0813, -0.9762, -6.3339],
        [-2.5690, -9.0302, -2.2963, -5.4596, -9.0489],
        [-1.4796,  0.4182,  0.6848, -5.4110, -1.7710]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 2]
target tensor([2, 2, 1, 1])
<class 'torch.Tensor'>
loss
tensor(2.6271, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.7685,  -2.8397,  -3.1560,  -3.6237,  -2.5882],
        [ -6.3486,  -3.9298,   2.8813,  -5.0197,  -9.3735],
        [ -3.9205,   0.5733,   1.5708,  -9.5798,  -5.2993],
        [ -6.2873, -10.9073,   5.3979,  -6.0705,  -2.6213]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 2, 2]
target tensor([4, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.5776, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.4926,   3.2428,   3.2002,  -5.6230,  -2.0026],
        [-10.6601,   0.5877,  -1.8027,  -2.7585,   0.6643],
        [ -5.7570,   1.5981,   1.5979,  -4.0611,   2.1666],
        [ -2.4905,   6.0029,  -4.9354,  -5.3047,  -5.9348]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 4, 4, 1]
target tensor([2, 2, 2, 4])
<class 'torch.Tensor'>
loss
tensor(4.2911, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.4809,  -3.1230,  -4.2296,  -5.4508,  -1.3084],
        [ -6.5462,   9.7497,  -3.3919,  -4.5709,  -0.5648],
        [ -8.4845,   6.5437,  -3.4987,  -5.8870,  -3.6230],
        [-12.4720,   4.2109,  -5.8474,  -5.9605,  -2.4798]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 1, 1]
target tensor([0, 1, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.6179, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.6975,  -7.7646,  -7.2994, -13.6829,   3.9216],
        [ -8.7149,   0.8036,  -1.8680,  -9.6456,   2.8455],
        [ -6.5100,   2.4105, -13.0707, -15.6005,   0.2905],
        [ -8.8784,  12.6586,   1.4452,  -8.1755,   5.8817]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 4, 1, 1]
target tensor([0, 1, 0, 1])
<class 'torch.Tensor'>
loss
tensor(3.3834, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.7599,  -3.3413,  -5.5267,   2.7145,  -7.4279],
        [  0.7289,   0.6035,  -0.3385,  -8.7161,  -1.0607],
        [ -8.0022,  -3.2942,  -2.4096,  -7.6075,  -0.7606],
        [  2.6009,  -4.4448,   1.6806, -10.6813,   2.0953]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 4, 0]
target tensor([3, 0, 3, 0])
<class 'torch.Tensor'>
loss
tensor(2.1646, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.8026,   1.8673,  -0.2817,  -4.9412,  -3.2032],
        [-14.1161,   0.0802,  -8.1874,   0.2336,  -3.2396],
        [ -7.3732,  -0.2122,   4.7986,  -9.9357,  -4.5827],
        [ -1.8201,  -6.2402,  -3.1805,  -7.3922,  -1.6338]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 2, 4]
target tensor([0, 3, 2, 0])
<class 'torch.Tensor'>
loss
tensor(1.0991, grad_fn=<NllLossBackward0>)
Epoch: [2][20/25]	Time 1.715 (1.749)	Data 0.027 (0.023)	Loss 1.0991 (1.5787)	Accuracy 50.000 (64.286)
train
input tensor([[[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.5035,  -2.7582,  -2.9962,  -0.8649,  -4.6211],
        [-11.4783,  -1.2355,  -7.1996,  -4.1821,   8.2829],
        [-14.8962,  -0.3123,  -4.4308, -11.5840,  -8.9847],
        [-11.0276,   1.7296,  11.0031,  -4.4452,   1.8382]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 4, 1, 2]
target tensor([3, 4, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0684, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.5649,  -6.5773,  -5.9968,  -0.3326,  -7.0571],
        [ -8.4902,   4.7411,   2.6534, -14.1340,   0.7549],
        [ -2.9673,  -4.1549,   4.3218,  -8.7478,  -3.2577],
        [ -9.1519,  -0.2159,  -3.9150,   0.5093,  -5.6505]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 2, 3]
target tensor([3, 1, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.3182, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-15.5060,  -6.0746,  -1.2672,   3.4111, -14.0068],
        [ -3.2906,  -3.7034,   3.7866,  -6.3460,  -5.1551],
        [ -6.8819,  -4.9368,   5.9846,  -2.4922,  -6.8867],
        [ -6.1808,   6.7631,   3.1299,  -1.4856,  -2.1936]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 2, 1]
target tensor([3, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.9177, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.8425,  -0.5903,  -0.3794,  -6.2019,  -6.6706],
        [ -2.8332,  -8.4116,   5.7507,  -7.0970,  -7.4554],
        [ -9.1926,  -0.1062,   3.9678,  -0.4683, -14.6827],
        [  3.6605,  -4.0393,  -2.0474,  -5.9887,  -4.7571]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 0]
target tensor([0, 2, 3, 0])
<class 'torch.Tensor'>
loss
tensor(1.1347, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         [  3,  -2,   0,  ...,  -3,  -1,   8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -3,  ...,  -2,   0,  -6],
         [  7,  -4,   0,  ...,   0,   1,   1],
         [ 11,  -5,   2,  ...,  -3,   6,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   1,  -1,  ...,   2,  -3,  -2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,   0,   1,  ...,   2,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-4.0694, -5.2031,  1.0752, -6.9939, -5.7845],
        [-0.3776, -3.1912,  2.1636, -4.7761, -7.9803],
        [-3.8293, -3.5839, -0.3935, -6.6554, -7.0622],
        [-3.9904, -3.0401,  0.8256, -5.7491, -5.7476]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 0., 2., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.3274)
Test: [0/13]	Time 0.490 (0.490)	Loss 2.3274 (2.3274)	Accuracy 50.000 (50.000)
evaluate
input tensor([[[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  7,  -1,  -1,  ...,   0,   5,   1],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -1,  ...,   2,  -3,   4],
         [  2,  -1,   0,  ...,   0,  -3,   2],
         [  2,  -1,  -4,  ...,   0,  -4,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   4,   0,  ...,   0,   0,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-0.9788, -1.6049,  0.0993, -4.2470, -8.2702],
        [-0.3136, -2.6905,  0.8704, -3.9150, -6.0675],
        [-2.3575, -2.6601,  0.2985, -5.1920, -6.6964],
        [-2.5625, -2.2510,  1.7248, -5.2495, -6.1223]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 1., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.7517)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.1984, -2.8651,  1.1019, -3.2502, -6.1550],
        [-1.4218, -1.9293,  0.4650, -4.4688, -6.7525],
        [-2.5330, -2.2139,  1.1746, -4.0975, -7.7374],
        [-3.1507, -3.8440,  2.4720, -4.8180, -7.5530]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 1., 4., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.3203)
evaluate
input tensor([[[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.0244, -2.6455, -0.3164, -7.2259, -5.7939],
        [-3.2175, -3.3448,  2.2344, -4.9881, -6.9779],
        [-3.8117, -4.1153,  0.0947, -4.8793, -9.8610],
        [-3.6512, -1.7569,  2.6709, -3.7707, -6.6125]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 2., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.8672)
evaluate
input tensor([[[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.0158, -2.7609,  3.4735, -6.1391, -6.7604],
        [-2.8625, -2.2325,  0.5513, -4.0036, -6.8567],
        [-0.7498, -3.1075,  1.1563, -5.4748, -6.5990],
        [-3.4229, -3.3552,  0.8747, -6.1424, -7.1736]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 2., 3., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.6587)
evaluate
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.7642, -3.6432,  1.0603, -5.8545, -8.2587],
        [-2.4821, -2.5557,  2.2144, -3.7009, -4.7019],
        [-1.9675, -0.5442,  0.3642, -4.3057, -5.4308],
        [-2.3841, -1.1415, -0.0628, -3.7150, -7.3012]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 3., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.9606)
evaluate
input tensor([[[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.2594, -1.1405,  1.3657, -4.0874, -7.1174],
        [-2.6119, -1.0458,  2.3359, -3.0775, -7.2851],
        [-2.9311, -3.0231,  0.3831, -6.5604, -7.3484],
        [-4.2567, -3.3234,  0.3381, -4.6512, -8.5563]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 2., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.8013)
evaluate
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.9011, -0.5573,  0.4703, -3.6593, -3.8713],
        [-1.9033, -3.8869, -0.3149, -5.2121, -8.3344],
        [-3.4752, -1.0840, -0.3649, -6.3893, -5.9365],
        [-3.5916, -2.7412,  1.2634, -6.2087, -5.8509]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 0., 1., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.0467)
evaluate
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.2609, -1.1113,  2.5064, -2.9726, -6.6334],
        [-1.6814, -1.6594,  0.8227, -4.2786, -6.8548],
        [-4.9491, -1.1501,  1.8415, -3.2949, -5.0488],
        [-3.1734, -5.3280,  0.9418, -5.0921, -9.1460]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.0686)
evaluate
input tensor([[[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.8488, -1.2836,  0.3116, -3.3870, -6.7650],
        [-1.4545, -1.4722,  0.2527, -4.7011, -6.3694],
        [-3.7656, -2.2941,  1.4695, -3.9993, -5.4546],
        [-0.1404, -3.3397, -0.6612, -4.3506, -7.7179]])
<class 'torch.Tensor'>
[2, 2, 2, 0]
target tensor([2., 0., 1., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.6534)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.0117, -3.6704,  1.3461, -5.0390, -5.7164],
        [-3.8058, -3.7794, -0.1788, -5.3830, -7.1097],
        [-2.4779, -2.5748,  1.1235, -5.9469, -6.0205],
        [-4.0454, -2.7343,  1.2321, -5.5164, -7.3366]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 3., 1., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.4053)
Test: [10/13]	Time 0.528 (0.516)	Loss 4.4053 (2.7146)	Accuracy 25.000 (40.909)
evaluate
input tensor([[[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.6224, -2.3124,  1.3539, -4.0235, -6.0754],
        [-3.2240, -2.4766,  2.7506, -3.1458, -7.0598],
        [-4.6951, -3.9482,  0.2467, -5.5747, -8.1529],
        [-4.7683, -5.1445, -0.0635, -6.2457, -7.6300]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.2017)
evaluate
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.1874, -3.1984,  0.6288, -4.4934, -7.3465],
        [-2.5190, -2.6051,  1.7707, -5.2374, -8.2952]])
<class 'torch.Tensor'>
[2, 2]
target tensor([2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.5419)
epoch: 3
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.2030,  -2.9872,   6.9384,   2.3745, -13.0947],
        [ -3.1298,  -5.5550,  -1.9068, -13.0187,   4.4474],
        [ -4.1905,  -3.3530,   4.8815,  -6.0510, -17.4153],
        [  0.1474,  -1.7835,  10.4198,  -8.8348,  -5.5397]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 4, 2, 2]
target tensor([2, 4, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0033, grad_fn=<NllLossBackward0>)
Epoch: [3][0/25]	Time 1.816 (1.816)	Data 0.024 (0.024)	Loss 0.0033 (0.0033)	Accuracy 100.000 (100.000)
train
input tensor([[[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.4102, -9.4041, -4.3797,  2.3506, -9.5421],
        [-2.5110, -9.4335, -4.3878, -0.9709, -9.3473],
        [-2.3160,  5.6346, -2.4482, -6.0580, -8.8463],
        [-5.5125,  9.4308,  3.2631, -4.6162, -2.0746]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 1, 1]
target tensor([3, 3, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0571, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  5.0231,  -5.5538,   3.2868,  -7.0129,  -7.8609],
        [  9.2565,  -6.3239,   2.2838,  -6.7289,  -3.8477],
        [  0.9538,  -6.5930,   6.3318,  -4.7156, -12.7556],
        [ -1.7223,   6.5836,  -4.8267,  -6.1751,  -7.4098]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 2, 1]
target tensor([0, 0, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0420, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.1258,  -6.6792,   0.6252,  -2.8831,  -6.3303],
        [-11.3609,   0.7065,  -1.3208,  -3.5416, -15.0896],
        [ -1.5074,   0.2674,   2.8899,  -3.7307,  -6.4234],
        [ -0.1476,  -4.7645,  -2.1892,  -2.1140,  -1.0409]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 2, 0]
target tensor([2, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(1.2258, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  8.1679,  -5.8869,  -2.7298,  -8.6152, -10.2453],
        [ -0.6789, -10.6826,  -0.7711,   4.7435,  -8.2867],
        [ -4.2540,  -0.0247,   0.9898,  -1.5989,  -4.6233],
        [ 16.3987, -14.4109,  -4.8882,  -7.1225, -16.3874]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 2, 0]
target tensor([0, 3, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.3480, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,   2,  -1,  ...,   3,   1,  -6],
         [  0,  -1,  -4,  ...,  -6,   0,  -1],
         [  2,  -1,   0,  ...,   0,   5,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,  -1,   0,  ...,  -1,   0,   4],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   0,   0,  ...,   0,   4,   0],
         [  4,   1,  -2,  ...,  -2,   5,  -4],
         [  3,   1,   0,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -3.8140,   4.1630,  -2.9219, -15.3118, -15.1720],
        [ -0.6346,  -7.0635,  11.9196, -10.5316,  -5.8960],
        [  9.4703,  -7.6150,  -2.5210,  -6.0965, -14.5136],
        [  1.1413,  -2.7198,   2.9938,  -5.9687,  -8.0445]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 0, 2]
target tensor([1, 2, 0, 1])
<class 'torch.Tensor'>
loss
tensor(1.4659, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.3067,  -5.7321,   4.2781, -11.1793,  -9.1049],
        [  5.6362,   0.8105,  -3.4821,   1.2417,  -6.5327],
        [ -1.6025,  -8.0473,  10.1971,  -8.2161, -10.8209],
        [  6.1207,  -6.5815,   1.9446,  -3.9871,  -8.9854]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 0]
target tensor([4, 4, 2, 0])
<class 'torch.Tensor'>
loss
tensor(6.4295, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,  -1,  -1,  ...,  -1,  -3,   3],
         [  3,  -1,  -2,  ...,   0,   3,   4],
         [  1,   1,   0,  ...,   0,   6,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   5,   1,  ...,   1,   2,   0],
         [  2,   3,   0,  ...,   2,  -1,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   0,  -2,  ...,   0,  -7,   1],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  1,   2,   3,  ...,   0,  -3,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -2.0454, -10.7233,   2.2155,   7.9067, -15.8195],
        [  0.9793,  -7.8255,   7.2651,   0.6743,  -8.0496],
        [  5.9067,  -7.7121,   1.0549,   3.2516, -11.0530],
        [  1.6439, -11.9879,  -9.3723,   4.0657, -10.2042]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 0, 3]
target tensor([3, 2, 0, 3])
<class 'torch.Tensor'>
loss
tensor(0.0417, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.7712e+00, -1.1538e+01,  6.8906e+00, -2.0517e-01, -1.8151e+01],
        [-5.9683e-03,  7.3818e+00, -2.9842e+00, -3.5621e+00, -6.2194e+00],
        [-5.0787e-01, -8.6180e+00, -4.2256e+00,  4.6070e+00, -8.5815e+00],
        [ 1.8463e-01, -5.4412e+00, -4.5906e-01, -4.2392e+00, -5.7543e+00]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 3, 0]
target tensor([2, 1, 3, 1])
<class 'torch.Tensor'>
loss
tensor(1.5169, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  6.3954,  -4.0542,  -6.4167,  -3.6362,  -8.3216],
        [  0.7982,  -5.7172,   1.2675,   1.4466, -11.3351],
        [ -3.3579,  -6.0538,  -7.4863,  15.0919, -11.9091],
        [ -6.4592,   3.7107,   0.0211,  -3.6895,  -6.9952]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 3, 1]
target tensor([0, 2, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.2658, grad_fn=<NllLossBackward0>)
train
input tensor([[[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   0,   3,  ...,   2,   2,   2],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  6,   2,   4,  ...,   3,   0,  -4],
         [  0,   0,   0,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -4.1435,  -8.3143,   9.7957,  -1.3763, -11.4570],
        [ -3.3336,  -8.5208,  -2.8641,   1.8160, -12.2028],
        [-11.4946,   7.9996,  -3.6126,  -5.3104,  -5.0987],
        [  2.1040,  -3.1962,  -4.2397,  -3.5002,  -9.5282]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 1, 0]
target tensor([2, 0, 1, 0])
<class 'torch.Tensor'>
loss
tensor(1.2937, grad_fn=<NllLossBackward0>)
Epoch: [3][10/25]	Time 1.653 (1.710)	Data 0.012 (0.023)	Loss 1.2937 (1.1536)	Accuracy 75.000 (79.545)
train
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 0.2422,  2.6331,  6.5730, -0.7431, -8.8706],
        [ 0.4056, -5.7927,  8.6853, -1.3097, -5.8466],
        [-3.5201,  1.2742, -1.3366, -5.5247, -6.4281],
        [ 0.0684, -4.7021, -4.3527, -7.8002, -8.9393]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 0]
target tensor([2, 2, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0307, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.7821,  4.6048, -2.0290, -3.1575, -7.3654],
        [ 8.0159, -7.6196, -2.8394, -5.4878, -9.2224],
        [-2.3710, -3.0441,  3.9752,  2.1514, -9.5021],
        [-2.4737, -1.3009, -4.1730, -3.9899, -0.2251]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 2, 4]
target tensor([1, 0, 2, 4])
<class 'torch.Tensor'>
loss
tensor(0.1384, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.6958,  -4.5804,  -3.9920,   4.2033, -10.0268],
        [  0.8252,   3.1621,  -5.3680,  -2.3731,  -5.7777],
        [-11.0657,   2.5127,  -4.3993,  -6.2887, -10.9180],
        [  8.9086,  -7.1747,  -8.9215, -20.8896,   1.5218]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 1, 0]
target tensor([3, 1, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0246, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 2.7504, -4.4581,  0.7941, -7.0673, -3.2185],
        [ 0.3729, -6.6441, -2.0438,  5.4056, -9.2736],
        [ 7.5669, -3.9743, -6.3116, -1.3820, -6.2395],
        [-3.7093, -4.5194,  5.3895, -2.1154, -9.2404]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 0, 2]
target tensor([2, 3, 0, 3])
<class 'torch.Tensor'>
loss
tensor(2.4011, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.6889,   9.6407,  -1.7263, -12.9190,  -2.4201],
        [  4.7037,  -0.5459,  -1.6857,  -6.2303,  -5.9661],
        [  1.1991,  -6.1275,  -2.6118,   5.2699, -11.3346],
        [ -1.6857,  -7.3802,   6.4456,  -1.4816,  -6.6425]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 3, 2]
target tensor([1, 0, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0063, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.5086,  -2.6127,   0.7945,  -3.7682,  -4.8174],
        [ -3.3650,  -3.6128,   6.5119,  -8.3469,  -8.5265],
        [ -2.1903,  -6.5543,  -0.7686,   2.1756, -10.0739],
        [ -4.1400,   2.7295,   7.5878,  -2.7765, -10.5727]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 3, 2]
target tensor([2, 2, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0326, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.8203,  -2.9680,   1.3988,  -8.6350,   0.7752],
        [  0.4082,  -3.4373,  -4.5878,  -8.7657,  -7.3401],
        [ -3.1222,  -2.7338,  -3.7015,  -5.4645,   1.2286],
        [  9.0944, -13.5584,  -5.4703,   0.4905,  -7.4616]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 4, 0]
target tensor([2, 0, 4, 0])
<class 'torch.Tensor'>
loss
tensor(0.4518, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-9.5881,  6.2823,  1.6105, -6.2534, -1.7241],
        [-6.9548, -3.6006, -8.7793,  4.6802, -4.7554],
        [-4.4448, -5.9967, -7.4419, -1.1103,  6.1537],
        [-8.7410, 17.8681,  0.2699, -5.0026,  0.8892]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 4, 1]
target tensor([1, 3, 4, 1])
<class 'torch.Tensor'>
loss
tensor(0.0027, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.0973,   1.9496,   0.6764,  -6.0382,  -0.4080],
        [-15.3536, -10.6982,   8.0151,   0.9427, -11.1980],
        [ -7.0040,   1.6946,   2.6679,  -3.0047,  -4.3282],
        [ -9.5781,   0.7587,  -4.3870,  -1.0028,   6.8777]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 4]
target tensor([2, 2, 2, 4])
<class 'torch.Tensor'>
loss
tensor(0.4797, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.3868,  -7.0364,   3.5945,   4.8652, -10.0951],
        [ -5.8342,   7.0821,  -5.3932,  -6.1146,  -5.3141],
        [ -6.9682,   4.1467,   3.4289,  -6.9771,  -3.6479],
        [ -3.6819,  13.8897,  -7.2105,  -2.8740,  -2.8710]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 1, 1]
target tensor([3, 1, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.1612, grad_fn=<NllLossBackward0>)
Epoch: [3][20/25]	Time 1.671 (1.766)	Data 0.027 (0.024)	Loss 0.1612 (0.7818)	Accuracy 100.000 (84.524)
train
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.8405,  -5.2641,   2.5373,  -2.2723,  -7.1811],
        [ -0.9708,  -3.0429,   9.0486,  -3.8190,  -0.7354],
        [ -8.5173,   0.8226,   0.9162,  -0.3317, -10.6614],
        [-14.6311,  -1.5803,  -5.4755,   8.3743,  -3.0064]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 3]
target tensor([0, 2, 2, 3])
<class 'torch.Tensor'>
loss
tensor(1.0518, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.3136,   1.4100,  -0.6612,   2.4190,  -3.8216],
        [ -7.0766,  -9.8049,   9.6900,  -4.0292,  -5.7946],
        [-12.0340,   7.3339,  -0.8135,  -1.8235,  -7.4777],
        [-10.7773,  -6.4705,   8.2896, -10.9210,  -2.3841]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 1, 2]
target tensor([3, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0867, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.1400,   4.8155,  -0.8493,  -2.7717,  -9.3198],
        [ -9.9309, -11.3032,  -4.7965,  -4.0585,  -5.4882],
        [ -6.4588,  -3.1740,  11.1368,  -5.8199,  -3.1832],
        [ -0.2268,  -0.6480,  -1.3135,  -3.2125,  -1.5524]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 2, 0]
target tensor([1, 3, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.3460, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.6953,  -7.0457,   1.8487,  -4.1725,  -2.2752],
        [-10.6498,  -9.7233,   2.7017,  -4.9338,  -1.4290],
        [ -6.6448,  -4.6280,  -0.6906,  -6.3620,  20.1052],
        [  1.5631,  -6.4401,  -2.6672,  -3.4771,  -8.1448]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 4, 0]
target tensor([2, 2, 4, 0])
<class 'torch.Tensor'>
loss
tensor(0.0141, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.4245, -2.1494,  2.5543, -1.0492, -1.7516],
        [-8.2456, -2.6634, -0.4158, -2.0208, -3.0066],
        [-6.0494, -4.2250, -0.5364, -1.6205, -4.3302],
        [-7.2448, -2.8791, -0.2018, -1.0599, -2.4597]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([3., 1., 0., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.3481)
Test: [0/13]	Time 0.529 (0.529)	Loss 3.3481 (3.3481)	Accuracy 0.000 (0.000)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-9.4056, -3.5954, -0.9858, -0.8956, -3.7270],
        [-8.0947, -3.0480, -1.8307, -2.2894, -3.0506],
        [-6.3835, -2.9501,  1.6365, -1.8648, -5.0486],
        [-4.1093, -1.5237,  0.8576, -1.9620, -4.0156]])
<class 'torch.Tensor'>
[3, 2, 2, 2]
target tensor([2., 0., 3., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.4862)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-9.8230, -4.6911,  0.2498, -3.3405, -1.3948],
        [-8.9185, -3.2016, -0.3401, -1.5366, -1.4929],
        [-4.2086, -2.4354, -0.5763, -2.4426, -2.9431],
        [-4.3218, -3.3523, -1.5374, -1.5236, -4.2517]])
<class 'torch.Tensor'>
[2, 2, 2, 3]
target tensor([2., 2., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.0828)
evaluate
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         [  1,  -1,  -1,  ...,   0,   2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -2,  ...,  -4,   5,  -5],
         [  3,  -1,   0,  ...,  -1,   0,   4],
         [  0,   0,   0,  ...,   0,   0,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -3,  ...,  -2,   0,  -6],
         [  7,  -4,   0,  ...,   0,   1,   1],
         [ 11,  -5,   2,  ...,  -3,   6,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-5.4969, -1.9626,  1.4549, -1.9272, -3.0611],
        [-3.8890, -2.8863, -0.0808, -0.2246, -2.2113],
        [-7.6936, -0.9314,  1.4700, -0.6143, -1.9511],
        [-3.4116, -2.9832,  2.3355, -2.5797, -4.6745]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 1., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.3981)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.2992, -3.6179,  0.1340, -4.0761, -3.0690],
        [-6.2491, -1.0285,  2.5849, -1.4536, -2.9487],
        [-7.4136, -2.0705, -0.4852, -2.4516, -2.2634],
        [-6.5806, -3.2274, -0.3451, -2.4317, -3.0994]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([3., 0., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.8473)
evaluate
input tensor([[[  0,   2,  -2,  ...,   0,   1,  -6],
         [  0,   0,   0,  ...,  -9,  -2,   3],
         [  2,   0,  -2,  ...,   2,  -2,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  0,   0,  -3,  ...,   5,   0,  -5],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  7,  -4,   0,  ...,  -1,   1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  4,  -3,   0,  ...,  -1,   1,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-4.7357, -1.5004,  1.1170, -1.1894, -4.1134],
        [-6.0569, -2.6940,  1.2615,  0.6127, -2.4381],
        [-8.7694, -2.6187, -0.6092, -2.1256, -2.9123],
        [-6.2278, -2.5222,  1.1734, -1.3741, -3.7393]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 0., 2., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.3315)
evaluate
input tensor([[[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-8.4074, -3.4122, -0.4514, -1.7370, -2.5907],
        [-3.5262, -1.8215,  0.9426, -1.8521, -4.8546],
        [-6.3058, -2.5004,  2.5786, -0.9496, -3.3582],
        [-4.6888, -1.8823,  1.2385, -1.0138, -4.4333]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([3., 0., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.6088)
evaluate
input tensor([[[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.4185e+00, -1.8603e+00,  2.0764e+00, -1.5010e+00, -1.3197e+00],
        [-6.5809e+00, -3.1192e+00,  1.8108e-03, -1.7438e+00, -4.4684e+00],
        [-7.8428e+00, -2.0573e+00,  4.3174e-01, -2.7546e+00, -3.3602e+00],
        [-7.0588e+00, -5.0547e+00, -7.8708e-03, -8.1982e-01, -5.3757e+00]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 2., 4., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.1320)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.7324, -2.2314,  2.3027, -0.2581, -4.0469],
        [-5.3822, -0.0511,  2.6420, -1.0776, -4.2170],
        [-6.6854, -1.4907,  0.5776, -2.2415, -1.8168],
        [-7.8482, -2.9894,  0.6825, -1.5192, -3.8442]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 2., 1., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.5745)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-7.5293, -2.0681,  1.4546, -1.9460, -3.0061],
        [-3.5455, -2.4406,  0.5117, -2.5500, -3.9901],
        [-4.5609, -0.9274,  1.1414, -0.9107, -3.3232],
        [-5.2640, -1.5103,  1.6142, -0.5965, -3.4745]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 0., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.1592)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.8567, -1.2866,  0.9429, -0.7190, -1.3057],
        [-8.4815, -2.7488,  0.0121, -1.5950, -1.1145],
        [-5.9706, -0.4121,  0.4183, -1.0710, -3.5567],
        [-7.3484, -2.8389,  0.5760, -2.1075, -2.3980]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 0., 2., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.2329)
Test: [10/13]	Time 0.485 (0.493)	Loss 3.2329 (2.5638)	Accuracy 50.000 (40.909)
evaluate
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.2878e+00, -3.2058e+00,  1.3414e+00, -1.3934e+00, -4.9583e+00],
        [-5.1644e+00, -8.2737e-01,  1.4151e+00, -1.0940e+00, -1.7049e+00],
        [-4.1454e+00, -2.6840e+00,  8.7944e-01, -2.0256e+00, -3.0783e+00],
        [-4.9522e+00, -1.1512e+00,  4.4581e-03, -1.5268e+00, -4.9733e+00]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 2., 3., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.2209)
evaluate
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-8.4570, -2.7936, -1.9581, -0.7627, -4.2068],
        [-7.1266, -3.7406,  2.7207, -2.4928, -1.8288]])
<class 'torch.Tensor'>
[3, 2]
target tensor([0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(8.9709)
epoch: 4
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 6.3590, -5.0747, -3.6675, -5.3697, -1.5069],
        [-7.0493,  4.4420,  1.7980, -0.9023, -3.5626],
        [-6.6735,  6.6230, -0.5941, -3.7840, -1.3112],
        [-5.9862, -0.8878, -3.3141,  3.9721, -0.2152]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 1, 3]
target tensor([0, 1, 1, 1])
<class 'torch.Tensor'>
loss
tensor(1.2396, grad_fn=<NllLossBackward0>)
Epoch: [4][0/25]	Time 1.723 (1.723)	Data 0.008 (0.008)	Loss 1.2396 (1.2396)	Accuracy 75.000 (75.000)
train
input tensor([[[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.3614,  13.8444,   0.5577,  -7.7832,   0.5209],
        [ -7.1339,  -2.5549,   9.4758,  -2.8741,  -5.9922],
        [  0.9353,  -2.3562,   5.1838,  -6.8570,  -1.0291],
        [ -4.5043,  -1.6169,  -5.2049,   0.5007,  -6.0385]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 3]
target tensor([1, 2, 0, 3])
<class 'torch.Tensor'>
loss
tensor(1.0972, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.1598,  -2.7909,  -5.2470,  -3.5481,  -1.3486],
        [-11.0887,  -5.9297,  11.3937,  -2.3252, -10.4443],
        [ -3.8072,   4.5483,   0.3918,  -3.1191,  -2.9754],
        [ -3.6788, -17.4253,  -8.4672,   3.7082,  -9.7492]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 1, 3]
target tensor([0, 2, 1, 3])
<class 'torch.Tensor'>
loss
tensor(0.0914, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.9447,  -5.0260,   0.2381,   2.2201, -10.7944],
        [ -7.2090, -12.7894,  -4.7048,   4.8956,  -4.9931],
        [ -7.7810,  -5.3044,  -4.4600,   7.7130,  -8.0523],
        [ -7.2007,  -3.0818,  -4.9127,  -3.7247,   8.1212]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 3, 4]
target tensor([3, 3, 3, 4])
<class 'torch.Tensor'>
loss
tensor(0.0325, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.4258,   7.5574,  -3.2736,   0.5244,  -3.9469],
        [ -1.0765,  -0.5974, -10.1146,  -3.6122,  -0.5116],
        [ -1.6528,  -4.2175,  -2.7489,   9.0610,  -7.5365],
        [ -5.8813,   9.7125,  -2.8065,  -5.0965,  -6.4040]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 4, 3, 1]
target tensor([1, 0, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.3737, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-13.6286,   2.4421, -12.0053,  -4.1877,  -6.2736],
        [  5.1386,  -5.7001,  -5.8588,  -6.2195, -11.3635],
        [ -6.1907,  -9.9717,   0.5782,  -1.7148,  -5.6740],
        [  5.6428,  -6.9942,  -5.3821,  -2.3800,  -2.4037]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 2, 0]
target tensor([1, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0253, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.5347,  -5.2094,  -3.0768,   8.5181,  -5.0838],
        [ -1.7548,  -7.0931,   7.3292,   2.1576,  -6.5245],
        [ -8.6170,  -0.8163,   4.8084,   2.7553, -10.4306],
        [  2.8151,  -8.7766,  -6.3857,  -6.0530,  -2.6295]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 2, 0]
target tensor([3, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0336, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.7070,  -6.4882,   5.8423,  -0.6222,  -3.5368],
        [ -6.0698,  -4.5207,   8.7610,  -0.9453,  -4.1450],
        [  1.3196, -11.1554,  12.9877,  -1.5211,  -3.8184],
        [  7.7071,  -6.4699,  -3.2146,  -1.7409,  -1.7282]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 0]
target tensor([2, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0005, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.0429, -14.9134, -10.0963,  -7.4596,   2.0575],
        [ -1.6226,   8.0642, -12.4019, -11.1500,  -1.4416],
        [  2.1179,   0.3576,  -5.8572,  -1.0715,   0.7627],
        [ -4.4353,  -8.3381,   1.4125,  -1.3625,  -4.5348]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 0, 2]
target tensor([4, 1, 4, 2])
<class 'torch.Tensor'>
loss
tensor(0.4524, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-0.4390,  1.6623, -3.3379, -4.4821, -1.4474],
        [-8.3935, -2.8492,  3.3787, -7.9105, -6.3256],
        [ 1.1416,  7.4583, -0.6765, -3.6021, -8.4506],
        [ 4.6755, -7.4975, -7.7948, -0.2935, -6.4517]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 1, 0]
target tensor([1, 2, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0433, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  1,  -1,  -1,  ...,  -4,   1,   6],
         [  4,   2,   0,  ...,  -1,  -3,   8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -3,  ...,  -2,  -2,  -4],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  7,  -2,   0,  ...,  -3,   7,   1],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -0.3410,  -6.0854,   4.8795,  -3.3216,  -3.5920],
        [  1.9656, -10.4274,  -4.9868,   4.3437,  -6.6234],
        [ -1.3985,  -4.4175,   7.1160,  -5.1458,  -5.2197],
        [ -0.5549,   3.8591,  -6.5967,  -0.1173,  -8.9958]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 2, 1]
target tensor([2, 3, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0313, grad_fn=<NllLossBackward0>)
Epoch: [4][10/25]	Time 1.756 (1.698)	Data 0.027 (0.018)	Loss 0.0313 (0.3110)	Accuracy 100.000 (90.909)
train
input tensor([[[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.0902,   5.3149,  -3.4422,  -9.0467,  -0.9880],
        [  2.1253,   4.7144,  -2.4774,  -2.8246,  -2.9358],
        [ -1.8662, -10.4000, -10.5669,   6.6715,  -5.8076],
        [  0.0213,  -9.3504,  -8.5011,   6.8790,  -4.8927]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 3, 3]
target tensor([1, 1, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.0204, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.6766,  -6.8997,  -5.2899,  -3.9812,  -9.6768],
        [ -6.8830,  -8.9953,  -1.1318,  -2.8377,  -2.7845],
        [  6.9391,   0.7440,  -1.3627,  -7.4085,  -5.5161],
        [ -3.6699,  -9.1227,  -0.6692,   3.4077, -11.4313]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 0, 3]
target tensor([2, 2, 1, 3])
<class 'torch.Tensor'>
loss
tensor(2.7989, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.3698,  -6.9367,  -6.6826,   6.3979,   1.0808],
        [ -4.6917,  -6.7341,  -8.9897,   4.4135,  -5.3008],
        [ -3.6386, -11.4615,  -5.6842,   2.6501,  -9.9998],
        [ -4.8489,  -3.4020,  -6.9626,  12.8183,  -4.8478]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([3, 3, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.0021, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.9187, -5.6723, -5.4813, -1.5298, -7.0067],
        [ 7.0283, -3.0514, -3.8199, -5.0281, -4.8253],
        [ 4.0888, -5.3441, -6.5014, -7.0786, -2.3366],
        [10.1144, -3.1187, -4.6400, -6.0317, -4.1930]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 0, 0]
target tensor([3, 0, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.0131, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.0245e+01,  5.7899e+00, -1.2671e+01, -2.5077e+00, -1.0035e+01],
        [-3.8790e+00,  1.4614e+00,  4.3020e-03, -6.2262e+00, -3.1662e+00],
        [-2.3508e+00,  1.1348e+01, -8.6218e+00, -6.0735e+00, -4.1556e+00],
        [-3.9074e-01, -9.1062e+00,  7.6016e+00, -2.3637e+00, -3.8691e+00]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 1, 2]
target tensor([1, 1, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0555, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 11.0192,  -5.1286,  -4.0502,  -2.0552,  -2.7105],
        [  0.8108,  -1.4400,  -8.1837,  -2.1782,  -0.1537],
        [ -5.2954,  -9.2729,   2.1749,  -5.2114,  -8.3980],
        [ -7.5561, -10.7822,   8.3729, -10.3953,   0.0515]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 2, 2]
target tensor([0, 0, 0, 2])
<class 'torch.Tensor'>
loss
tensor(1.9754, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.2941,   4.9232,  -7.5319,  -2.7033,   6.6222],
        [  0.8322,  -3.0739,   1.4266,  -4.9585,  -7.2950],
        [ -8.3267,   1.5160,  -5.5140,  -1.9752,  -3.5469],
        [  0.1957, -13.7132,  -8.9208,  -1.6444,  12.5478]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 1, 4]
target tensor([4, 2, 1, 4])
<class 'torch.Tensor'>
loss
tensor(0.1632, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 13,  -6,   0,  ...,  -1,  -3,   9],
         [  5,  -1,   0,  ...,   7,   3,   0],
         [  2,   0,  -2,  ...,   2,   4,  -8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   1,   0,  ...,   0,  -1,   0],
         [  1,   0,   0,  ...,   2,   1,   3],
         [  3,   0,   1,  ...,   2,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  6.5421,  -3.5806,  -8.6373,  -2.4463,  -4.9983],
        [ -6.3282,   3.9589,  -2.8732,   3.6133,  -5.6766],
        [  4.0351,  -7.0744,   1.1048,   0.1787,  -3.2487],
        [ -3.0097,  -0.9544,   1.8180, -13.0572,  -5.4932]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 0, 2]
target tensor([0, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(2.6099, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.0490,  -3.6923,   1.5297,  -3.7535,   0.2943],
        [ -0.5853,  -6.5018,  -1.4574,   5.7233,  -6.7041],
        [ -4.6123,  -0.0378,  12.6764,  -8.2707,  -8.6268],
        [ 10.0667, -11.5737,  -3.1650,   0.2079,  -3.6058]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 2, 0]
target tensor([2, 3, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.1068, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.0169,  -4.1718,   9.5601,  -3.5233,  -6.2176],
        [ -9.1175,  -6.8227,   8.3578,  -0.6566,  -6.1702],
        [ -3.0396,  11.3587,  -8.1030, -11.6706,  -2.4517],
        [ -3.3968,   0.9037,  -0.1171,  -2.1339,  -7.7829]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 1]
target tensor([2, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.3432, grad_fn=<NllLossBackward0>)
Epoch: [4][20/25]	Time 1.702 (1.703)	Data 0.028 (0.021)	Loss 0.3432 (0.5481)	Accuracy 75.000 (88.095)
train
input tensor([[[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 13.2656, -10.9440,  -1.6862,  -5.5434,  -5.3298],
        [ -5.2561,  -3.3096,   8.2731,  -8.2454,  -7.1420],
        [ -5.3302,  -7.3401,   3.1650,  -5.8807,  -7.8271],
        [ -7.1827,  -5.7460,  -1.8153,  -4.7576,  12.2933]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 4]
target tensor([0, 2, 2, 4])
<class 'torch.Tensor'>
loss
tensor(9.4665e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.9969,  11.4283,   0.6191,  -3.8859, -10.7927],
        [ 12.4316,  -8.3605,  -7.0912,  -5.4299,  -6.3552],
        [ -3.8791,   1.4260, -10.0854,  -4.0062,  -6.3962],
        [ -7.5472,  -7.5240,   2.3957,  -6.5294,  15.0624]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 1, 4]
target tensor([1, 0, 1, 4])
<class 'torch.Tensor'>
loss
tensor(0.0024, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.3923,   0.2133,  10.4900,  -4.5276,  -3.8882],
        [  5.7043,  -9.5872,  -1.3449, -10.8164,   3.9593],
        [ -2.6273,   2.3284,  12.2183,  -9.5207,   0.2433],
        [ -6.9771,  -8.4541,   8.4539,  -5.6443,  -1.8453]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 2]
target tensor([2, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0405, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-13.3890,   1.7082,  15.5686,  -5.2503,  -6.9733],
        [ -4.8747,  -6.9395,   3.5236,  -6.5756,  -1.3169],
        [ -4.0757,  -4.0101,  14.3801, -11.4067,  -5.6088],
        [ -5.6709,  -6.3654,  10.0297,  -9.7336, -12.1064]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2, 4, 2, 2])
<class 'torch.Tensor'>
loss
tensor(1.2122, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[  1,  -1,   0,  ...,   0,  -6,  -4],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   1,   3,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   0,  -2,  ...,   2,  -4,   0],
         [  2,  -2,  -2,  ...,   6,   1,  -6],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         [  3,  -2,   0,  ...,  -3,  -1,   8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-3.3143, -2.0861,  3.7285, -4.3096, -4.7842],
        [-5.4291, -3.1602,  4.2259, -5.8056, -4.3653],
        [-3.2766, -2.6309,  4.4909, -4.0052, -2.9649],
        [-7.7318, -3.8373,  4.9343, -8.4600, -2.2208]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.2362)
Test: [0/13]	Time 0.465 (0.465)	Loss 3.2362 (3.2362)	Accuracy 50.000 (50.000)
evaluate
input tensor([[[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.9922, -2.6056,  2.7495, -7.0982, -3.9590],
        [-6.8292, -1.0961,  5.6590, -4.1002, -2.6452],
        [-5.9033, -2.0457,  6.3258, -6.5467, -3.7629],
        [-4.9148, -1.8718,  4.9145, -4.5595, -4.2393]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 2., 2., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.7262)
evaluate
input tensor([[[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.9181, -2.4605,  4.3536, -6.0744, -5.0825],
        [-3.7378, -3.0147,  4.6032, -5.0819, -3.1310],
        [-7.9528, -4.1743,  3.3533, -6.2569, -4.5038],
        [-4.6802, -3.8356,  3.4669, -6.0594, -4.7959]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 3., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.1627)
evaluate
input tensor([[[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   2,  -2,  ...,  -3,  -1,   0],
         [  2,  -2,  -1,  ...,   2,  -3,   4],
         [  0,  -2,  -5,  ...,   0,   4,   7],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   4,   0,  ...,   0,   0,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   3,   1,  ...,  -3,  -4,   0],
         [  2,  -2,  -2,  ...,   6,   1,  -6],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-7.6341, -3.2651,  4.6254, -7.1499, -4.2850],
        [-4.3287, -2.2148,  4.5356, -3.9412, -5.0154],
        [-4.5801, -2.4882,  4.7849, -6.0757, -2.6126],
        [-5.5380, -4.0894,  6.8451, -6.6885, -2.3033]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.0967)
evaluate
input tensor([[[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.7259, -0.6286,  4.2583, -3.9512, -4.3496],
        [-4.9530, -2.8866,  4.9876, -3.7604, -3.3330],
        [-3.8076, -2.3998,  3.7486, -6.5799, -2.5557],
        [-2.3306, -2.7499,  5.0050, -5.7230, -4.3451]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 0., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.2118)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.2125, -4.1771,  4.3765, -7.5317, -2.8450],
        [-5.9127, -1.4675,  5.0388, -6.4673, -3.2779],
        [-2.4251, -2.1453,  3.7334, -5.1016, -5.2139],
        [-5.3532, -1.8619,  5.5720, -3.7459, -5.0074]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([3., 1., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.1455)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.4968, -2.6725,  4.1622, -6.7538, -2.7161],
        [-7.2133, -2.4499,  4.7848, -6.8445, -3.8452],
        [-4.3538, -1.0570,  3.0307, -4.3783, -4.9944],
        [-5.8671, -3.0672,  4.4625, -7.2142, -3.6849]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 4., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.8936)
evaluate
input tensor([[[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.8553, -2.1916,  4.9920, -4.9046, -1.9072],
        [-6.0942, -2.3090,  4.6751, -6.2631, -2.8349],
        [-4.3650, -1.7015,  6.0367, -4.7013, -1.8364],
        [-5.1947, -0.3653,  4.3149, -5.0054, -3.9434]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 4., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.3614)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.4614, -2.7991,  4.2516, -7.0609, -4.4708],
        [-4.6927,  0.1303,  6.1527, -4.1940, -4.9281],
        [-3.0983, -2.5594,  3.3283, -6.3684, -3.8219],
        [-5.9579, -2.8716,  5.2216, -6.5408, -3.5450]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 2., 0., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.3122)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.5933, -3.9792,  5.5094, -5.6091, -5.0364],
        [-7.4393, -3.4189,  4.6031, -5.6796, -1.3792],
        [-6.9048, -3.1940,  2.8815, -5.5619, -4.9615],
        [-4.7949, -1.3891,  4.4165, -3.8858, -3.3607]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([3., 2., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.2286)
evaluate
input tensor([[[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.0728, -0.8737,  6.1054, -4.0627, -4.4613],
        [-2.9041, -2.8222,  2.4508, -4.5186, -3.9529],
        [-3.8551, -2.0935,  3.7952, -3.9350, -4.5692],
        [-4.5131, -0.5212,  4.3971, -3.3320, -2.5196]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 0., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.3898)
Test: [10/13]	Time 0.496 (0.507)	Loss 4.3898 (5.1604)	Accuracy 50.000 (38.636)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.2715, -1.9916,  5.0858, -5.4272, -3.7362],
        [-5.2328, -2.1104,  6.7347, -4.6338, -4.1536],
        [-4.6208, -3.2111,  4.4045, -4.4437, -5.5197],
        [-5.9411, -5.5879,  3.8962, -5.3959, -5.9434]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.0006)
evaluate
input tensor([[[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-7.6924, -3.1959,  3.7238, -6.7376, -2.8140],
        [-7.8499, -2.7526,  4.5787, -6.0923, -1.9486]])
<class 'torch.Tensor'>
[2, 2]
target tensor([3., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(11.4473)
epoch: 5
train
input tensor([[[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   0,   3,  ...,   2,   2,   2],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,  -1,   0,  ...,   7,   3,   0],
         [  2,   0,   0,  ...,   7,   0,  -1],
         [  3,   0,   0,  ...,   1,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   4,   0,  ...,   0,   0,   0],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  4.0356,  -4.3458,   0.5842, -11.9558,   1.3457],
        [ -8.0810, -11.4791,  16.1092,  -5.1827,  -9.3207],
        [ -3.1149,  -7.3184,   7.5516,  -7.5067,  -6.3267],
        [  1.9285,  -8.8086,  -4.2973, -13.7102, -12.2898]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 0]
target tensor([0, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0243, grad_fn=<NllLossBackward0>)
Epoch: [5][0/25]	Time 1.839 (1.839)	Data 0.024 (0.024)	Loss 0.0243 (0.0243)	Accuracy 100.000 (100.000)
train
input tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.9083,  -5.6480,  16.2414, -11.0920, -11.9327],
        [ -5.5637,   8.5702,  -2.3964, -11.0224,  -4.3766],
        [-10.0586,  -6.3450,   1.5896,   5.1576,  -3.0603],
        [  1.4058,  -6.6619,   0.1377,  -3.3488,  -0.9545]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 3, 0]
target tensor([2, 1, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0884, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.7159,   0.5910,  12.5749,  -3.5299,  -3.4771],
        [ -1.6907,  -6.2527,   2.7355,  -2.9549,  -1.2819],
        [-10.8195,  -4.1435,  -3.1598,  -0.1557,  -8.4490],
        [ -9.2329,  -3.4290,  -1.1232,  -9.7281,   7.3859]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 3, 4]
target tensor([2, 0, 3, 4])
<class 'torch.Tensor'>
loss
tensor(1.1314, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.6934,  -9.1510,   0.6106, -10.0036,  -9.5593],
        [ -5.8156,   7.5754,   3.6303,  -6.0265,  -2.4885],
        [ -5.8190,  -2.1358,   9.1289,  -9.1982,  -5.8661],
        [ -1.1063,  -3.4095,   3.8267,   0.1954,  -4.6271]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 2, 2]
target tensor([0, 1, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.9941, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.3824,  -7.4955,   4.0209,   6.8563,  -9.7838],
        [ -1.4485,  -0.5620,  10.1741,  -4.1113,  -2.6592],
        [ -5.8142,  -6.3369,   4.8987,   8.2735,  -3.6105],
        [ -7.6060,   6.7793,   1.6483,  -4.8077,  -0.9459]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 3, 1]
target tensor([3, 2, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.0243, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.6236,  -3.8798,   2.7841,  -6.7924,   7.2204],
        [ -2.5370,  -7.7580,   8.0228,  -9.3471,   5.3311],
        [ -8.3024,  -5.3203,  17.8569, -10.5682,   0.5073],
        [ -5.7793,  11.5331,   3.9757,  -6.4145,  -0.7189]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 2, 1]
target tensor([4, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0195, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.0296,  -9.1065,   5.1419,  -8.0232,  -2.6730],
        [  8.4639,  -5.0583,  -1.4315, -10.8788,   5.7607],
        [ -9.6298,  -1.9432,   6.7240, -10.4830,  -2.9040],
        [ -5.3128,  -1.0980,   3.2431,  -2.5077,  -1.0144]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 2]
target tensor([2, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0239, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.3615,  -6.3574,  -0.7382, -10.7162,  -5.0459],
        [  5.4541, -14.5877,   1.3430,  -1.8107, -10.8476],
        [  1.8351,  -8.9534,   4.7204,  -3.8905,  -3.3394],
        [  1.6676,  -1.5952,  -4.6113,  -4.8267,  -3.0348]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 2, 0]
target tensor([0, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.1032, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.0726,  12.5877,  -7.9528,  -8.4913,   0.0224],
        [ -3.1848,  -2.7469,  10.2130,  -9.6258,  -3.6955],
        [-10.8003,  -5.8007,   3.6589,  -2.2700,  -5.1874],
        [ -1.9836, -10.8336,  10.4329, -11.6501,  -1.6741]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 2]
target tensor([1, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0007, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.7687,  -6.0176,  -7.0998, -13.3371,  17.6002],
        [  0.4980,  -4.4574,  -3.7000, -10.0982,   1.6734],
        [  0.7554,  -8.0150,  -6.4430,   4.8563,  -3.8653],
        [ -5.5291,  -9.8715,  -3.9153,  -0.7499,   0.2970]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 4, 3, 4]
target tensor([4, 1, 3, 3])
<class 'torch.Tensor'>
loss
tensor(1.9456, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.1918,   7.8628,  -1.0034,  -5.8742,   0.5751],
        [ -7.6600, -10.4892,   8.4553,  -6.4056,  -1.8352],
        [ -4.7684,  -6.2104,   0.9076,   4.4354,  -3.0306],
        [ -9.1301,  -4.5635,   9.7140,  -6.9190,  -0.2090]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 3, 2]
target tensor([1, 2, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0076, grad_fn=<NllLossBackward0>)
Epoch: [5][10/25]	Time 1.696 (1.896)	Data 0.031 (0.024)	Loss 0.0076 (0.3966)	Accuracy 100.000 (90.909)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  7.4659, -11.4960,  -2.3843,  -2.2044,  -0.3738],
        [ -1.2630,  -5.7316,   3.1717, -11.0744,  -1.5218],
        [ -0.7295,  -9.1838,  10.9765,  -3.4663,  -5.0541],
        [ -4.5732,   2.2070,  -1.5329,  -6.0681,  -3.9880]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 1]
target tensor([0, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0121, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  4.1486,  -3.6877,  -7.1271,  -0.4278,  -1.5711],
        [ 14.9966,  -8.6648, -12.7832,  -4.1215,  -1.9203],
        [ -1.0818,  -9.2775,   3.1633,  -2.2225,  -2.3720],
        [ -2.8270,  -5.6924,   1.8443,  -0.2105,  -2.7267]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 2, 2]
target tensor([0, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0437, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.8158,   8.8852,  -3.7471,  -4.8524,  -1.7302],
        [ -6.3928,  11.8608,  -3.2478,  -8.5574,  -3.3029],
        [ -3.1957,   7.7026,  -8.2061,  -4.7909, -10.0647],
        [  5.1024,  -2.8697,  -5.4049,  -9.4647,   0.8358]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 1, 0]
target tensor([1, 1, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0036, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.6048,  4.0390, -4.8896,  2.2477, -6.1539],
        [-4.8728,  7.1628, -2.6527, -9.5106, -3.0213],
        [-1.1783, -1.3778, -6.0824,  9.7177, -3.4996],
        [-6.8856, 14.9125, -1.3819, -5.0729, -7.1729]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 3, 1]
target tensor([1, 1, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.0386, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.4624,  10.8760, -10.4217,  -1.4535,  -1.1222],
        [ -0.3362,  -7.9277,   6.9337,  -0.7314,  -5.8223],
        [ -2.4936,   2.8352,  -1.9241,   3.6111,  -4.7017],
        [ -3.1774,   6.9824,  -4.5372,  -0.3683, -10.8305]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 3, 1]
target tensor([1, 2, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.0962, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  6.5271, -11.6957,  -9.3326,  -1.4710,  -8.0013],
        [ 12.4519,  -7.2846,  -6.5030,  -5.0597,  -6.9431],
        [ -1.6134,  -4.4715, -13.3972,  15.9387,  -7.5240],
        [ -3.2168,  -7.0969,   5.2539,   1.5046,  -2.8610]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 3, 2]
target tensor([0, 0, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0060, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 0.5080, -3.1893, -2.3910, -7.7947, -6.7872],
        [-0.0396,  7.6277, -4.6354, -3.9415, -1.2812],
        [-0.8122,  5.4705, -4.9375, -3.3502, -2.8377],
        [-5.0552, -3.8431,  2.8044, -9.6085, -9.0030]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 1, 2]
target tensor([0, 1, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0206, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.4194,   5.3893,  -9.9064,  -2.2661,  -5.4615],
        [  0.3955,  -2.2518, -12.7262,   7.0697,  -6.3114],
        [ -7.1992,  -1.6301,   3.7343,   0.3725, -10.2110],
        [  0.3772,  -7.1401,   2.9936,  -1.0873,  -6.9308]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 2, 2]
target tensor([1, 3, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0324, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-9.0047, -1.7675, -5.7881, -2.9178, -9.6020],
        [-3.8274, -7.4293,  1.9400, -4.4971, -6.4188],
        [-4.5986,  5.8506, -7.5669, -2.3991, -9.2322],
        [-3.4230,  1.2908,  0.9872, -0.4723, -7.0522]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 1, 1]
target tensor([3, 2, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.5242, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [  5,  -1,  -1,  ...,  -1,   2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -2,  ...,  -6,  -5,   0],
         [  1,  -2,  -3,  ...,  -2,  -2,   5],
         [  3,  -3,  -1,  ...,   1,  -1,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,   0,  ...,   0,   6,  -2],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         [  0,   0,   2,  ...,   4,   1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  3.6964,  -0.6534,   1.0504,  -4.7734,  -4.2160],
        [ -4.3618,  -3.2302, -13.3650,   3.3927, -12.0653],
        [ -2.5363,  -3.1452,  -5.2433,  10.7436, -11.3586],
        [  1.3088,   0.4508,   2.5988,  -2.0664, -12.1447]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 3, 2]
target tensor([2, 3, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.7666, grad_fn=<NllLossBackward0>)
Epoch: [5][20/25]	Time 1.768 (1.810)	Data 0.027 (0.023)	Loss 0.7666 (0.2813)	Accuracy 75.000 (92.857)
train
input tensor([[[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  6.3214,  -8.3593, -10.0368,   1.5092,  -9.0343],
        [  0.5289,   9.0839,  -3.3531,   1.2273,  -2.9346],
        [ -0.9249,  -3.5061, -13.8496,   2.6871,   5.7371],
        [  3.1971,  -5.1477,   8.3572,   0.4411, -13.0896]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 4, 2]
target tensor([0, 1, 4, 2])
<class 'torch.Tensor'>
loss
tensor(0.0156, grad_fn=<NllLossBackward0>)
train
input tensor([[[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  5.7747,  -6.6407,  -7.0674,   0.7893,  -7.5688],
        [ 12.7610,  -8.0109, -16.9839,  -3.8583, -15.9438],
        [ -0.1823,  -6.0422,   2.3200,  -1.2703,  -1.6238],
        [ -1.1946,  -3.8295,  -6.4660,   6.4201,  -4.7014]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 2, 3]
target tensor([0, 0, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0322, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.3942,   5.9267,  -3.8817,   4.8752,   7.8530],
        [ -5.1670,  -8.2905,   0.7836,  12.8610, -12.8838],
        [  3.8063,  -6.8353,  -4.3180,  -2.7667, -12.1697],
        [ -6.7332,   2.5195,   3.2687,   2.9412,  -9.0813]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 3, 0, 2]
target tensor([4, 3, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.2417, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -2,  ...,   0,  -3,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [  2,   2,   3,  ...,  -4,   2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   0,   0,  ...,   2,   0,  -8],
         [  0,   2,  -2,  ...,  -3,   4,  -2],
         [  2,  -2,  -1,  ...,   2,  -3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,  -2,  ...,  -5,   1,   0],
         [  2,   3,   1,  ...,   1,  -5,  -4],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -0.7240,  -4.3117,   2.6496,   1.9987,  -5.4246],
        [ -0.6735,  -2.0902,  -5.0917,   1.3914,   6.8429],
        [  0.9489,  -7.4831,  -4.6124,  -6.6714,  12.5477],
        [ -6.7554, -11.3346,   2.4654,   4.7457,   2.6384]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 4, 4, 3]
target tensor([2, 4, 4, 4])
<class 'torch.Tensor'>
loss
tensor(0.6893, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.8109, -2.9004, -3.6788,  0.7143, -8.5259],
        [-3.3583, -3.8266, -3.7733,  1.1868, -7.4107],
        [-2.8389, -2.1106, -1.7249,  1.9615, -7.1664],
        [-0.8064, -0.9076, -2.3242,  3.0398, -7.4772]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([2., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.7550)
Test: [0/13]	Time 0.480 (0.480)	Loss 4.7550 (4.7550)	Accuracy 0.000 (0.000)
evaluate
input tensor([[[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.1671, -4.0500, -3.4281,  2.4978, -9.5151],
        [-1.8440, -2.0315, -3.3613,  1.3209, -9.0350],
        [-2.7792, -1.9635, -1.8116,  1.7940, -5.2032],
        [-1.9586, -1.3035, -2.3926,  3.0510, -6.9376]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([0., 1., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.1035)
evaluate
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -2,  ...,  -4,   5,  -5],
         [  3,  -1,   0,  ...,  -1,   0,   4],
         [  0,   0,   0,  ...,   0,   0,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  1,   0,  -1,  ...,   4,   4,   1],
         [  1,   2,  -2,  ...,  -4,   3,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -2.9872,  -6.4687,  -3.2769,   3.0129, -11.2604],
        [ -4.4603,  -1.0306,  -0.5124,   2.2378,  -6.5963],
        [  0.0452,  -2.4802,  -1.2760,   2.7611,  -6.5156],
        [ -2.6522,  -1.8628,  -0.8453,   3.5172,  -8.7187]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([2., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.7128)
evaluate
input tensor([[[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -2,  ...,  -6,  -5,   0],
         [  3,  -1,   1,  ...,  -2,   0,   2],
         [  2,   5,  -3,  ...,  -4,  -3,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   4,   0,  ...,   0,   0,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  0,   0,  -3,  ...,   5,   0,  -5],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-3.3450, -2.7073, -2.8981,  0.9200, -8.7660],
        [-2.2740, -0.4523, -0.4384,  1.3082, -4.4957],
        [-2.0585, -2.6171, -1.9921,  1.3714, -7.4571],
        [-1.7371, -2.3837, -1.5408,  3.7048, -7.0621]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([2., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.7112)
evaluate
input tensor([[[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.0094, -2.2631,  0.1258,  2.5023, -4.8229],
        [-3.8803, -3.4598, -3.6672,  2.5650, -9.2417],
        [ 0.3907, -1.9073, -2.7888,  1.4675, -8.1318],
        [-3.2612, -3.1957, -3.7452,  2.0949, -7.9126]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([3., 2., 0., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.9408)
evaluate
input tensor([[[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.3019,  -1.9204,  -1.6483,   1.0974,  -6.8888],
        [ -3.0100,  -3.2322,  -3.9631,   4.0352, -10.1647],
        [ -2.7338,  -0.6481,  -0.0364,   3.1592,  -7.0530],
        [ -0.7337,  -2.4563,  -2.6402,   2.5236,  -7.5677]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([4., 0., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.5806)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.8254, -2.5244, -1.5890,  1.9108, -6.9755],
        [-2.0816, -3.4488, -2.9131,  2.8834, -8.6072],
        [-3.7440, -2.9064, -2.6998,  1.9939, -8.4926],
        [-2.2446, -0.6180, -1.8878,  1.7432, -7.8198]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([2., 2., 4., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.5925)
evaluate
input tensor([[[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-0.3407, -3.1388, -1.8426,  1.4550, -6.5491],
        [-2.2164,  0.1195,  1.0784,  1.5237, -8.1589],
        [-2.5348, -0.4342, -1.1841,  1.3157, -6.9800],
        [-3.7665, -2.3628, -2.6322,  2.8958, -6.8772]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([3., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.6758)
evaluate
input tensor([[[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.9090, -3.0967, -5.0975,  1.4572, -8.8500],
        [ 0.3016, -2.5812, -0.4948,  0.9772, -6.7350],
        [-2.0417, -1.7920, -1.0448,  2.4364, -8.2817],
        [-2.8561, -1.7803, -0.5946,  1.1781, -8.4754]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([0., 0., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.7899)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.3489, -4.0216, -0.7698,  2.0911, -9.1636],
        [-1.8931, -2.1401, -1.1093,  3.0499, -8.6703],
        [-1.9565, -1.5198, -1.8904,  1.4899, -7.9399],
        [-1.7159, -4.3740, -0.9654,  0.9078, -5.7092]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([3., 4., 1., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.4468)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-9.9401e-01, -4.3235e+00, -3.0499e+00,  1.6195e+00, -6.6255e+00],
        [ 5.0290e-01, -3.4128e+00, -3.1286e+00,  1.8643e+00, -8.0511e+00],
        [-2.8424e+00, -2.0629e+00,  7.4867e-03,  1.8615e+00, -8.0741e+00],
        [-3.2522e+00, -2.5407e+00, -1.5968e+00,  1.6637e+00, -9.2758e+00]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([3., 0., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.9921)
Test: [10/13]	Time 0.561 (0.541)	Loss 1.9921 (3.9365)	Accuracy 25.000 (11.364)
evaluate
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.1767, -3.5548, -0.9585,  1.4126, -8.6799],
        [-2.9589, -4.0186, -3.8043,  2.7434, -5.7129],
        [-0.9624, -2.4082, -1.3598,  1.1221, -7.0825],
        [-0.2499, -1.9467, -2.9448,  0.8294, -7.1350]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([2., 2., 1., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.5556)
evaluate
input tensor([[[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.1742, -2.2671, -2.3693,  1.7275, -7.3404],
        [-1.1427, -3.0756, -1.6725, -0.5399, -5.2330]])
<class 'torch.Tensor'>
[3, 3]
target tensor([3., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.6642)
epoch: 6
train
input tensor([[[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.3501,  6.0110, -9.2428,  5.2064, -7.7107],
        [-1.2949, -8.2226,  6.6520,  2.6998, -5.9783],
        [-7.0752, -2.2096,  7.6272, -1.8653, -8.6402],
        [ 8.3246, -3.2031, -6.4546,  5.1853, -2.0865]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 0]
target tensor([1, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.1079, grad_fn=<NllLossBackward0>)
Epoch: [6][0/25]	Time 1.759 (1.759)	Data 0.024 (0.024)	Loss 0.1079 (0.1079)	Accuracy 100.000 (100.000)
train
input tensor([[[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.2331,  -5.9790,  -1.1070,   2.2151,  -9.1749],
        [ -3.9850,  -0.2627,  10.5460,  -2.1475,  -4.0156],
        [-12.9003,   3.7928,  -2.8797,   1.2334,  -6.7610],
        [  6.2094,  -8.8404,  -6.3341,   0.8595,  -2.7400]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 1, 0]
target tensor([0, 2, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0997, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.1605,  -5.2473,   4.1712,  -2.7891,  -8.5312],
        [ -3.2025,  -8.3694,   9.8722,   5.9130,  -8.9009],
        [  4.5313,  -5.0812,  -4.2882,  -5.9899,   6.8302],
        [-13.2253,   1.8853,   2.6259,  -5.3880,  -3.8518]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 4, 2]
target tensor([2, 2, 4, 1])
<class 'torch.Tensor'>
loss
tensor(0.3118, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.2662,  -7.0477,   0.8387, -10.1178,  -9.6749],
        [ -5.8717,   7.9869,   1.6961,  -1.1723,  -7.7244],
        [ -3.6788,  -0.4040,   3.7865,  -5.9455,  -4.3946],
        [ -2.1804,  -1.8264,  -6.8047,   1.0067,   8.2530]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 2, 4]
target tensor([0, 1, 2, 4])
<class 'torch.Tensor'>
loss
tensor(0.2597, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  5.4046,  -4.3654,  -3.4494,  -5.5335,  -4.1642],
        [ -9.5638,  -8.3662,  -4.9044,   1.2638, -10.2663],
        [ -1.6299,  -4.5644,  -7.0698,  13.5335,  -8.3024],
        [ -2.0941,   0.6549,  -5.6536,   4.4232,  -9.0963]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 3, 3]
target tensor([0, 3, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.0067, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 0.8415,  6.1895, -6.4378, -5.4724, -0.6738],
        [-8.8755, -4.5734, -5.3688,  9.3646, -8.5218],
        [-4.6547, -0.6128,  8.3136, -2.0199, -5.8461],
        [ 9.0658,  0.0290, -5.7501, -1.6517, -2.8302]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 2, 0]
target tensor([1, 3, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0015, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.7236,  15.2375,  -7.9266,  -6.2366,  -9.5557],
        [-10.5051,  10.7472,  -2.4959, -10.8264,  -0.5064],
        [-11.1036,  18.1125,  -0.9141, -12.1449,  -1.7393],
        [ -1.7828,   0.1393, -10.5985,   1.7898,  -1.9114]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 1, 3]
target tensor([1, 1, 1, 3])
<class 'torch.Tensor'>
loss
tensor(0.0547, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.7891, -11.2038,   5.1751,   0.2212,  -9.7502],
        [ -6.1581,  -0.9743,   7.3489,  -4.5421,  -7.7398],
        [ -9.3283,  -1.0628,  -1.5246,  -0.3441,  -6.7254],
        [ -5.6209,  14.5851,  -6.0757,  -6.0310,  -3.9825]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 3, 1]
target tensor([2, 2, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.1484, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.7529,  -2.7873,  -6.8656,  -6.2933,   7.6733],
        [ -5.9548,   3.8464,  -8.9931,   5.3276,  -2.6209],
        [  3.3656,  -1.7543,  -6.1731,   0.2234, -14.4233],
        [ -4.6034,  -1.1602, -18.3131,   6.6613,  -8.4185]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 3, 0, 3]
target tensor([4, 3, 0, 3])
<class 'torch.Tensor'>
loss
tensor(0.0634, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.7107,   2.3296,   2.8154,  -1.2089,  -8.7191],
        [  6.1171,  -8.4957, -10.1265, -12.4030,  -8.6651],
        [  6.0932,  -2.0177,  -9.7324,  -6.6512,  -3.0458],
        [  1.1845,  -8.1045,   9.1602,  -0.5220,  -4.0765]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 0, 2]
target tensor([2, 0, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.1228, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.9792,   4.0945,  -7.7001,  -7.4038,  14.0630],
        [  0.3605,  -6.2862,  -0.1306,   1.0144,  -5.9428],
        [  1.6205,  -6.3199,  -4.1480,   8.7894,  -6.8241],
        [ -1.0493,  -4.4897,  -3.9636,   4.6924,  -3.4288]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 3, 3, 3]
target tensor([4, 2, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.4398, grad_fn=<NllLossBackward0>)
Epoch: [6][10/25]	Time 1.640 (1.712)	Data 0.009 (0.020)	Loss 0.4398 (0.1470)	Accuracy 75.000 (93.182)
train
input tensor([[[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-9.3033, 16.0858, -6.8503, -8.0161, -2.3427],
        [ 8.9430, -4.8157, -6.2190, -1.7505, -2.7980],
        [-4.2473,  7.6585, -4.2951, -6.9356, -6.4906],
        [ 4.3457, -9.6768, -3.0278, -5.1211,  2.1373]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 1, 0]
target tensor([1, 0, 1, 2])
<class 'torch.Tensor'>
loss
tensor(1.8696, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.4271,  8.3776,  4.0393,  0.7867, -6.9796],
        [-3.8921, -8.7841, -2.7583, 11.4412, -3.2872],
        [-5.8396, -3.1485, -5.7549,  2.2593, -7.8001],
        [-0.9222, -4.9690,  5.5766, -4.6408, -3.7922]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 3, 2]
target tensor([1, 3, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0051, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,   1,  -4,  ...,  -4,   2,   1],
         [  2,   3,   1,  ...,  -3,  -4,   0],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   0,   0,  ...,   0,   4,   0],
         [  4,   1,  -2,  ...,  -2,   5,  -4],
         [  3,   1,   0,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [  5,  -1,  -1,  ...,  -1,   2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -4.3628,  -2.1770,   7.7525,  -6.2652,  -8.3371],
        [ -4.9643,   0.7940,  -5.0510,  -0.8611, -10.2946],
        [-13.1231,  -4.2140,  13.4193,  -6.4345,  -1.4639],
        [  0.0172,  -5.1559,  -8.9013,  -0.7684, -12.2551]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 2, 0]
target tensor([2, 1, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.3363, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.0985, -11.4828,   2.6760,  -8.0171,  -4.4870],
        [ -2.6444,  -3.4115,  -0.6271,   5.8637,  -6.4321],
        [ -3.1018,  -3.2955,  -6.8155,   7.2499,  -3.4586],
        [ -9.0878,   2.4494,  -0.1499,  -3.7781,  -2.0274]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 3, 1]
target tensor([2, 3, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.0217, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.2379, -11.2169,   0.0888,   3.4860,  12.5386],
        [ -2.5116,   0.4602, -17.1421,  -6.3374,  20.0141],
        [ 11.1829,  -6.6337,  -3.1868,  -5.3296,  -8.3781],
        [ -9.7665,  -1.5588,   4.7123,  -4.9021,  -7.0546]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 4, 0, 2]
target tensor([4, 4, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0005, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.8441,   6.8677,   3.9201,  -4.2287,  -7.5966],
        [  2.5717,  -6.7107,  -2.8101,  -8.8615,  -4.7717],
        [ -8.1032,  -9.1547,   2.9277,  10.2978, -10.4793],
        [ -5.0808,  -7.0102,   3.1797,   1.7483,  -3.2569]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 3, 2]
target tensor([1, 0, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0682, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.7494,  -8.0382, -10.9930,  -1.5097,   0.5239],
        [  8.8946,  -7.7170,   2.2478,   1.7298,   0.6108],
        [ -9.9935,  -5.6289,  -3.5705,   9.9816, -10.5852],
        [-13.3982,  -4.4172,   4.5603,   0.3132,  -8.8530]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 3, 2]
target tensor([0, 0, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0152, grad_fn=<NllLossBackward0>)
train
input tensor([[[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.4443,  -4.2239,   5.9099,  -6.9489,  -6.7437],
        [  4.5828,  -2.1790,  -1.5842,  -0.4635,  -0.7742],
        [ -7.1506,  -6.0073,  13.7112,  -5.1807,  -2.2552],
        [  7.1738,  -3.7079,  -5.7071,  -3.3307,  -4.8701]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 0]
target tensor([2, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0036, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,  -1,  -1,  ...,  -1,  -3,   3],
         [  0,  -1,  -6,  ...,  -4,   0,  -8],
         [  4,  -1,   1,  ...,   6,  -4,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,  -2,  ...,   3,   3,   0],
         [  2,  -1,  -2,  ...,   2,   4,  -2],
         [  1,  -1,  -1,  ...,  -2,   0,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,   1,  ...,   2,  -2,  -2],
         [  6,  -2,   1,  ...,   0,  -1,   0],
         [  4,  -2,   5,  ...,   1,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -8.0696,  -5.8448,   7.0144,  -6.3343,  -0.7980],
        [-11.9191,  -5.2120,  13.2904,  -2.6902,  -6.4941],
        [ -9.3127,  -1.4402,   8.2551,  -2.7469,  -5.1488],
        [ -1.9530,  -4.7319,   6.7950,  -4.2234,  -2.5483]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.5460,   2.2499,  -1.1635,  -4.2559,   8.6529],
        [ -5.6192,   5.5258,  -0.3536,  -3.5735,  -4.3678],
        [ -5.6550,   3.8871,  -4.2533, -11.7096,  -8.0971],
        [ -4.0450,   9.0669,   2.4889,  -9.1314,   0.6806]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 1, 1]
target tensor([4, 1, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0017, grad_fn=<NllLossBackward0>)
Epoch: [6][20/25]	Time 1.701 (1.728)	Data 0.027 (0.023)	Loss 0.0017 (0.1876)	Accuracy 100.000 (94.048)
train
input tensor([[[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.2890,  -2.9432,  11.3602,  -6.3309,   1.3597],
        [  2.4579,  -8.2128,   2.2246,  -8.6945,  -2.0526],
        [-13.7885, -11.9034,   5.3526,  -3.0408,  -9.8693],
        [-12.5702,  10.2158,   3.4687,  -4.9357,  -6.9910]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 1]
target tensor([2, 0, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.1477, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.3817,  -1.8165,  14.1390,  -4.7335,  -4.0922],
        [ -5.1570,  -0.2568,  -3.1206,  -8.7895,  11.5034],
        [  2.9471,  -5.0168,  -2.6822,  -6.4742,  -4.4971],
        [ -4.5828,   3.6823,  -2.5703,  -3.8126,  -2.1007]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 4, 0, 1]
target tensor([2, 4, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.0026, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  4.8590,  -5.4999,   0.6779, -10.2132,  -1.0866],
        [ -2.4120,  -6.6465,   6.4450,  -7.9884,  -9.0999],
        [ -8.8164,   4.1987,  -2.8869,  -7.3146,  -2.0883],
        [ -3.1451,   5.9201,   1.4222,  -0.3465,  -1.2437]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 1, 1]
target tensor([0, 2, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0086, grad_fn=<NllLossBackward0>)
train
input tensor([[[  3,   0,   0,  ...,   1,  -3,   0],
         [  1,  -1,  -1,  ...,  -1,  -3,   3],
         [  0,   1,   0,  ...,  -1,   8,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   1,   0,  ...,   0,  -1,   0],
         [  1,   0,   0,  ...,   2,   1,   3],
         [  3,   0,   1,  ...,   2,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[ 13,  -6,   0,  ...,  -1,  -3,   9],
         [  5,  -1,   0,  ...,   7,   3,   0],
         [  2,   0,  -2,  ...,   2,   4,  -8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-13.2197,  -5.6567,   7.5163,  -1.0334,  -4.4616],
        [ -8.8213,  -3.0096,  10.1228,  -3.8904,  -3.8268],
        [-16.4981,  -1.0364,  12.9380,   1.9582,  -2.4088],
        [  2.1272,  -5.8094,  -2.4285,  -3.2985,  -5.2846]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 0]
target tensor([2, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0040, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.3773, -4.1123,  2.3079, -2.8040, -1.6751],
        [-6.7717, -1.5664,  1.5991, -2.2358, -3.8380],
        [-3.6914, -2.5621,  3.4800, -1.9085, -3.5918],
        [-8.2029, -2.7207,  1.6874, -2.1649, -3.7293]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 1., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.7900)
Test: [0/13]	Time 0.522 (0.522)	Loss 4.7900 (4.7900)	Accuracy 25.000 (25.000)
evaluate
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.9658, -0.2812,  1.6553, -1.3811, -4.4201],
        [-5.3643, -1.1507,  2.8216, -0.7680, -4.9740],
        [-8.0654, -1.1762,  3.4969, -1.0204, -2.0826],
        [-9.4149, -2.4525,  2.5769, -0.7756, -4.5182]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 2., 1., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.4987)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.3851, -1.4709,  0.8059, -1.8006, -4.3628],
        [-7.8465, -1.8593,  0.9482,  0.3454, -5.3517],
        [-8.9686, -3.4628,  0.5614, -2.5742, -1.6295],
        [-7.4676, -1.0907,  2.4328, -2.6402, -2.6392]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 0., 2., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.7287)
evaluate
input tensor([[[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.4785, -0.1791,  3.0428,  0.6693, -3.8463],
        [-8.7822, -1.7538, -0.3000, -2.1022, -3.7892],
        [-8.3605, -0.8972,  3.4376, -0.2754, -2.8768],
        [-6.4766, -1.7803,  2.3585, -0.8323, -3.7358]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 0., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.6457)
evaluate
input tensor([[[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-8.0721, -2.6809,  1.2111, -1.2516, -3.5174],
        [-6.7624, -1.8770,  0.0269, -2.7928, -3.5623],
        [-8.1058, -3.3404,  0.5975, -1.7616, -1.3730],
        [-7.1098, -1.3403,  4.5886, -1.2266, -4.2245]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([3., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.7540)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.5857, -3.0850,  1.6655, -1.8468, -1.9172],
        [-4.3698, -2.4958,  2.4841, -1.8639, -2.7421],
        [-4.6121, -1.0160,  1.2678, -2.1061, -2.4193],
        [-8.2632, -6.2316,  1.9399, -0.5710, -6.3051]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([3., 3., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.5154)
evaluate
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.3958, -3.2882,  1.4461, -1.6492, -4.2155],
        [-5.7867, -1.4663,  3.9139, -1.0477, -1.3734],
        [-6.1771, -2.5738,  3.5907, -1.9656, -5.4326],
        [-7.5697, -3.0632,  1.5639, -0.1781, -4.3360]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 3., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.1533)
evaluate
input tensor([[[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.0912,  0.4475,  3.3262, -2.0752, -3.6878],
        [-8.6041, -2.0844,  3.9102, -1.7760, -4.6542],
        [-5.8169, -3.1218,  2.9198, -1.8663, -5.2028],
        [-6.9888, -1.6332,  2.9827, -0.1058, -5.3361]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.0328)
evaluate
input tensor([[[  0,   2,  -2,  ...,   0,   1,  -6],
         [  0,   0,   0,  ...,  -9,  -2,   3],
         [  2,   0,  -2,  ...,   2,  -2,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,  -1,  ...,   1,   1,   3],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,   0,   0,  ...,   0,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  0,   0,  -3,  ...,   5,   0,  -5],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-4.6547, -2.0765,  0.6976,  0.0901, -4.7021],
        [-7.3990, -0.6470,  2.9038, -2.0860, -3.2157],
        [-6.0108, -2.2375,  2.3466,  0.2966, -2.7149],
        [-4.0685, -2.7825,  2.7826, -1.1752, -2.9423]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 1., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.5383)
evaluate
input tensor([[[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.6877, -1.1918,  2.2143, -2.0696, -2.4954],
        [-6.6977, -1.2218,  2.8626, -2.0575, -2.2214],
        [-3.9623, -1.7448,  2.0776, -1.3915, -4.5077],
        [-6.5112, -2.1446,  1.3722, -1.5527, -2.0023]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([3., 2., 1., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.9686)
evaluate
input tensor([[[  1,   2,  -2,  ...,  -6,  -5,   0],
         [  3,  -1,   1,  ...,  -2,   0,   2],
         [  2,   5,  -3,  ...,  -4,  -3,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  7,  -4,   0,  ...,  -1,   1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  4,  -3,   0,  ...,  -1,   1,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,  -1,   0,  ...,   7,   3,   0],
         [  2,  -1,  -1,  ...,   2,   6,  -2],
         [  0,   0,  -2,  ...,  -1,   0,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-5.8905,  0.0424,  2.5886, -1.8188, -1.5392],
        [-6.4073, -2.3518,  3.3295, -0.4412, -5.3871],
        [-8.1350, -1.4569,  2.3180, -2.7602, -3.7510],
        [-4.5204, -0.9593,  1.9699,  0.3946, -4.3396]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 4., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.2774)
Test: [10/13]	Time 0.520 (0.512)	Loss 2.2774 (3.2639)	Accuracy 75.000 (43.182)
evaluate
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-8.5784, -1.2442,  1.1902, -1.5825, -1.6269],
        [-5.7494,  0.1616,  4.5156, -1.5587, -4.3495],
        [-7.6145, -2.2230,  2.4529, -2.3498, -5.3103],
        [-6.2821, -1.1934,  1.5294,  0.3205, -3.6296]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.7458)
evaluate
input tensor([[[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.1417, -2.5832,  1.4618, -2.7333, -2.6579],
        [-5.7622, -3.5297,  0.5357, -1.2778, -4.7693]])
<class 'torch.Tensor'>
[2, 2]
target tensor([0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.5650)
epoch: 7
train
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.8910,   4.1548,   0.4384,  -2.2677,  -5.7010],
        [ -9.8963,  -2.7384,   0.7827,  -1.3415,   8.8389],
        [ -3.8164,  -5.5668,  -2.8595,  -1.7240,  -9.1963],
        [ -1.0615, -10.3853,  -2.0692,  -7.0442,  -3.9350]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 4, 3, 0]
target tensor([1, 4, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.7138, grad_fn=<NllLossBackward0>)
Epoch: [7][0/25]	Time 1.834 (1.834)	Data 0.024 (0.024)	Loss 0.7138 (0.7138)	Accuracy 75.000 (75.000)
train
input tensor([[[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.0166,  10.2138,  -7.8400,  -0.8698,  -3.8489],
        [ -7.1133, -12.8746,  -3.2070,  11.4182, -12.4204],
        [ -8.1895,  -6.3056,  -3.7291,   5.4155,  -6.9298],
        [  2.6919,  -5.0706,  -3.0620,  -2.6851,  -5.7872]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 3, 0]
target tensor([1, 3, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0021, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.0561,  -1.8671,  -3.3395,  -5.2410,  -2.1528],
        [  4.3357,  -3.5670,  -4.3762,  -7.9847, -11.2327],
        [ -4.9773,  10.0102,  -0.5369,  -1.8045,  -0.9526],
        [ -6.4554,  -1.8573,   2.0053,  -2.9976,   6.9127]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 1, 4]
target tensor([2, 0, 1, 4])
<class 'torch.Tensor'>
loss
tensor(0.6313, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.2081,  -3.0579,   2.7685,  -7.0276, -10.1375],
        [  0.6563,  -7.7534,  -0.1611,  -4.8209, -12.6564],
        [ -8.1792,  -7.2355,   4.2799,   0.9811,  -2.4104],
        [ -1.0755,  -5.7252,  10.0764,  -3.8597,  -8.2748]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 2]
target tensor([2, 0, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.9271, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-8.8319, -4.2637,  1.6254, -3.4847,  7.9555],
        [-3.4571, -7.6793, -2.0342,  3.9245, -6.5638],
        [-0.2633, -7.7995,  7.6589, -8.1936, -0.8103],
        [-0.6624, -0.6641,  7.0877, -1.7290, -2.0619]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 3, 2, 2]
target tensor([4, 3, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0017, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.8311,  -6.0380,   6.5174,  -9.9087,  -8.4302],
        [-10.4092,  -4.8747,  12.7982,  -4.2672,  -4.5829],
        [ -1.3980,  17.7304,  -0.7822, -15.1317,  -1.8812],
        [ -4.8765,   3.9494,  12.4878,  -3.5118,  -3.4114]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 2]
target tensor([2, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0023, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  8.5734,  -3.4486,  -3.8761,  -1.1603,  -4.1453],
        [ -5.9939,  -8.5359,   4.6882,   6.5677,  -3.5541],
        [  0.2955, -10.6878,   7.5122,  -3.3832,  -5.5515],
        [ 10.1009,  -3.6854,   2.2416,  -3.2249,  -7.4310]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 2, 0]
target tensor([0, 3, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0358, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  8.6580,  -9.7632,  -3.6677,  -1.4005,  -0.2808],
        [ -4.7229,  11.3140,  -2.1036,  -8.8269,  -2.7613],
        [ -8.8704,  -9.7802,  -4.1697,   2.6384, -17.4212],
        [ 13.5318,  -8.2048,  -1.8282,  -8.9737,  -7.7034]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 3, 0]
target tensor([0, 1, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-15.2780, -11.6455,  21.7761,  -2.7303, -11.3195],
        [  9.1366,  -8.9627,  -0.8196,  -1.5296,  -5.4422],
        [ -9.2023,  -6.5605,  -8.3229,  -2.2680,   4.4822],
        [ -6.5064,  -1.1710,   5.9617,  -4.7628,  -5.5462]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 4, 2]
target tensor([2, 0, 4, 2])
<class 'torch.Tensor'>
loss
tensor(0.0005, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  4.9073,  -4.8710,  -6.7154,  -5.4146,  -2.5329],
        [ -1.9117,  -5.3415,   9.7311,  -5.0240,  -2.5484],
        [ 10.6188,  -6.7069, -13.1381,  -1.2696,  -4.6328],
        [ -4.3856,  -0.5745,  -2.3227,  -3.0148,   1.6156]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 0, 4]
target tensor([0, 2, 0, 4])
<class 'torch.Tensor'>
loss
tensor(0.0337, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.6105,   7.5896,   2.1963,  -4.2465, -13.2934],
        [ -3.8380,  11.5562,  -3.8031, -10.9836,  -4.6376],
        [ -0.7253,   3.4656,  -3.0096,  -6.9937,   0.9782],
        [ -8.7231,  -2.7636,  -4.6976, -13.4774,  24.9501]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 1, 4]
target tensor([1, 1, 1, 4])
<class 'torch.Tensor'>
loss
tensor(0.0249, grad_fn=<NllLossBackward0>)
Epoch: [7][10/25]	Time 1.759 (1.741)	Data 0.027 (0.026)	Loss 0.0249 (0.2158)	Accuracy 100.000 (93.182)
train
input tensor([[[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 2.5038, -8.8361, -5.7386, 11.9862, -4.2709],
        [-4.1790, -2.8601,  1.3255, -2.8672, -6.1435],
        [-0.9217,  2.5198, -1.9271, -4.2288, -3.9061],
        [-2.7852, -7.8945, -0.3652,  0.0217, -6.0508]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 1, 3]
target tensor([3, 2, 1, 3])
<class 'torch.Tensor'>
loss
tensor(0.1588, grad_fn=<NllLossBackward0>)
train
input tensor([[[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  6,   1,   2,  ...,  -1,   0,   1],
         [  2,  -1,  -1,  ...,   2,   6,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   0,   0,  ...,   1,  -3,   0],
         [  2,   0,   0,  ...,  -2,   5,   4],
         [  2,   0,  -2,  ...,   0,   2,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,   0,  ...,   0,   6,  -2],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         [  0,   0,   2,  ...,   4,   1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-4.2059, -7.1479,  7.3780,  3.8976, -4.7710],
        [-0.8124, -6.8166,  4.4347, -0.3337, -3.0376],
        [-6.0504, -4.8640,  4.6509, -4.4093, -7.3258],
        [-2.0547, -3.3217,  5.8796, -3.4128, -8.0904]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0113, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.9608,   7.8060,   2.4017,   1.0282,  -9.9526],
        [ -1.5790,  -8.1641,   8.3379,  -3.1515,  -6.0491],
        [ -8.4931,  -4.4933,   9.1532,  -7.5513,  -9.2057],
        [-11.0641,  10.9111,   0.4623,  -0.0936,  -2.0856]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 1]
target tensor([1, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0014, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.2523,   6.0411,  -1.0135,  -1.0404, -10.1000],
        [ -4.7659,   3.0595,  -0.5672,  -4.3841,  -1.7153],
        [  6.0992,  -2.9254,   0.9912,  -0.0378,  -2.6027],
        [ -2.2708, -14.9078,  -6.3190,   9.6741, -10.2818]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 0, 3]
target tensor([1, 1, 0, 3])
<class 'torch.Tensor'>
loss
tensor(0.0135, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.7268e+00, -1.5648e+00,  9.2882e+00, -8.8166e-03, -8.3478e+00],
        [-2.7938e+00, -4.0042e+00, -1.1731e+01,  6.1322e+00, -3.9083e+00],
        [-5.3728e+00, -1.4844e+01, -4.2584e+00,  2.1875e+01, -1.5658e+01],
        [-3.4399e+00, -1.1507e+01,  7.6165e-01,  4.7488e+00, -1.1055e+01]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 3, 3]
target tensor([2, 3, 3, 2])
<class 'torch.Tensor'>
loss
tensor(1.0015, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.5260,   3.6721,  -1.4425,  -3.9762,  -6.9009],
        [ -1.6234,   1.0238,  -4.3140,  -0.3192,  -7.6529],
        [  3.4489,  -7.1501,  -4.1636,   6.0820,  -4.4577],
        [ -0.8914, -15.4774,   8.8274,  -7.4778,  -5.5515]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 3, 2]
target tensor([1, 1, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0916, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  1,   0,  -1,  ...,   4,   4,   1],
         [  2,   0,  -1,  ...,  -1,   2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -2,  ...,  -6,  -5,   0],
         [  1,  -2,  -3,  ...,  -2,  -2,   5],
         [  3,  -3,  -1,  ...,   1,  -1,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  1,  -1,  -1,  ...,  -4,   1,   6],
         [  4,   2,   0,  ...,  -1,  -3,   8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -2.6745,  -6.6037,   6.4755,  -5.4101,  -4.8156],
        [  6.3462,  -4.5146,  -7.5744,  -2.9219,  -5.5571],
        [  4.7598, -15.0084,  -2.7935,   4.9195, -20.3971],
        [ -4.2914,  -8.4562,  -3.2052,  13.1465, -10.8932]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 3, 3]
target tensor([2, 0, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.1542, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  7.4876,  -5.6269,  -4.2026,  -5.0541,  -2.5063],
        [  4.5173,  -7.1693,  -3.0933,  -5.1406,  -4.5171],
        [ -5.0393,  12.6194,   4.6454,  -0.9304,  -4.4940],
        [  7.4493,  -8.0489,  -8.5244,  -3.9839, -14.3492]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 1, 0]
target tensor([0, 0, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  4.6854,  -0.5602,  -7.8875,  -2.0314,  -7.2879],
        [  1.2967, -10.7849, -11.6406,   8.6878, -12.2400],
        [  2.6748,  -9.3383,   3.6886,   3.8942, -13.8488],
        [ -1.7563,  11.3942,   1.2220,  -4.6180,  -6.1657]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 3, 1]
target tensor([1, 3, 2, 1])
<class 'torch.Tensor'>
loss
tensor(1.5512, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.9305,   4.2657,  -2.4531,  -4.2496,  -2.4302],
        [  7.4001,  -8.9937,  -2.1011,  -8.5710,  -0.6099],
        [ 10.6015,  -9.8539,  -4.6644,  -3.8567,  -5.8467],
        [-11.9490,  -0.9805,  -0.8158,  -6.7526,  -2.7227]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 0, 2]
target tensor([1, 0, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.2165, grad_fn=<NllLossBackward0>)
Epoch: [7][20/25]	Time 1.708 (1.736)	Data 0.036 (0.024)	Loss 0.2165 (0.2654)	Accuracy 75.000 (91.667)
train
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.0509,  -5.7252,   3.5764,  -1.2698, -14.0325],
        [-10.6342, -10.8456,   8.6158,  -3.8248,  -1.7616],
        [ -4.6859,  -7.6851,   7.3157,  -5.7532,  -6.2378],
        [ -1.2352,  -4.7253,  -2.3451,  -0.7097, -10.0313]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 3]
target tensor([2, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.2818, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.1576,  -3.3665,   0.7026,   1.8087,   9.9111],
        [ -5.6668,  -4.3872,  11.8226,  -9.2700,  -9.8706],
        [-11.1887,  18.0598,  -7.1899,  -9.6075,  -6.2578],
        [ -4.8648,  -3.1427,   5.5444,  -0.0640,  -5.4895]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 1, 2]
target tensor([4, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0011, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.3633,  -2.4659,   4.2874,  -0.4781,  -7.6967],
        [ -5.4733,  -9.7250,   2.7044,  -2.4109,  -7.7915],
        [-13.9352,  -6.4532,   0.5116,   2.2098,  -7.7276],
        [ -6.5639,  -6.3007,  -1.6103,   4.9245,  -5.1683]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 3, 3]
target tensor([2, 2, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.4710, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  6,   0,   0,  ...,  -3,   4,   2],
         [  2,   0,  -1,  ...,  -1,   2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  6,  -2,   1,  ...,   0,  -1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [ 11,  -3,   0,  ...,   3,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   0,   0,  ...,   2,   0,  -8],
         [  0,   2,  -2,  ...,  -3,   4,  -2],
         [  2,  -2,  -1,  ...,   2,  -3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -4.5847,   6.8191,   2.1010,  -8.4518,  -6.7798],
        [ -8.8250,  -7.1468,  -0.8737,   5.3541, -14.5569],
        [ -2.2239,  -0.4998,  -7.3472,  -1.0942,  15.1339],
        [-11.5840,   1.2154,  17.0898,  -7.0934,  -4.7272]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 4, 2]
target tensor([1, 3, 4, 2])
<class 'torch.Tensor'>
loss
tensor(0.0027, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-7.1368,  2.7816,  0.2626, -7.5249, -7.1993],
        [-3.2100,  1.7424,  0.3234, -6.8238, -5.4431],
        [-4.6987,  2.5095,  1.1326, -7.4201, -6.0768],
        [-2.2530, -0.7480,  0.9775, -5.0807, -3.9148]])
<class 'torch.Tensor'>
[1, 1, 1, 2]
target tensor([0., 0., 1., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.7082)
Test: [0/13]	Time 0.475 (0.475)	Loss 4.7082 (4.7082)	Accuracy 25.000 (25.000)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.0832,  1.7818,  1.3188, -4.4281, -4.2315],
        [-7.0962,  1.1091,  1.4093, -6.4577, -6.5463],
        [-5.0206,  0.0556,  0.8759, -5.4042, -3.9813],
        [-4.4693,  2.9983,  2.5205, -5.1758, -5.3365]])
<class 'torch.Tensor'>
[1, 2, 2, 1]
target tensor([0., 3., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.2335)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-7.1105,  1.4317,  3.7765, -5.9773, -7.8570],
        [-6.2495,  2.1404,  2.2336, -7.0368, -4.6221],
        [-5.3260, -0.2100,  2.4291, -4.5889, -7.2134],
        [-4.3560,  1.7119,  1.5551, -3.9130, -5.6807]])
<class 'torch.Tensor'>
[2, 2, 2, 1]
target tensor([2., 4., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.1110)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.7214,  0.6242,  1.0495, -7.1852, -4.8327],
        [-5.7461,  0.7337,  2.5072, -7.0907, -7.7658],
        [-7.2664,  1.7381,  3.4807, -3.2555, -4.8264],
        [-3.6142,  2.1817,  0.8915, -4.6666, -5.8131]])
<class 'torch.Tensor'>
[2, 2, 2, 1]
target tensor([2., 1., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.7112)
evaluate
input tensor([[[  7,  -4,   0,  ...,  -1,   1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  4,  -3,   0,  ...,  -1,   1,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,   0,  ...,   0,  -6,  -4],
         [  5,  -1,   0,  ...,   7,   3,   0],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   1,  -3,  ...,   1,  -3,   2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  2,  -2,  -1,  ...,   2,  -3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-4.7341,  0.9191,  2.9664, -4.7562, -7.3557],
        [-3.0673,  0.0713,  0.7121, -5.7927, -6.9665],
        [-2.1035,  0.2155,  1.8380, -5.8512, -4.8956],
        [-4.8504,  1.3573, -0.3215, -7.6407, -6.4039]])
<class 'torch.Tensor'>
[2, 2, 2, 1]
target tensor([4., 0., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.5838)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.4491,  0.8230,  0.3772, -6.9782, -3.7049],
        [-1.2778,  1.7898, -0.1365, -5.6600, -5.5127],
        [-6.1910,  1.4587,  4.7861, -5.2995, -6.3435],
        [-5.9914,  0.6430,  3.0903, -3.3767, -7.8638]])
<class 'torch.Tensor'>
[1, 1, 2, 2]
target tensor([3., 0., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.9189)
evaluate
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.7861,  2.4739,  1.0392, -6.7364, -3.6263],
        [-5.9218,  0.4858,  1.2970, -4.3846, -6.5514],
        [-5.5768, -2.0421,  1.3574, -5.4937, -8.4474],
        [-6.0427,  1.9460,  0.4279, -5.8543, -8.4714]])
<class 'torch.Tensor'>
[1, 2, 2, 1]
target tensor([0., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.5172)
evaluate
input tensor([[[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.7372,  0.1500,  2.0369, -5.3804, -5.4896],
        [-5.3021,  0.3003,  2.8023, -6.8178, -8.0719],
        [-4.8291,  2.4833,  3.2809, -4.2046, -6.7060],
        [-4.6555,  1.0427,  3.1721, -4.4152, -3.8841]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 3., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.4272)
evaluate
input tensor([[[  2,   2,  -2,  ...,  -3,  -1,   0],
         [  2,  -2,  -1,  ...,   2,  -3,   4],
         [  0,  -2,  -5,  ...,   0,   4,   7],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   3,   1,  ...,  -3,  -4,   0],
         [  2,  -2,  -2,  ...,   6,   1,  -6],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -2,  -1,  ...,   2,  -4,  -5],
         [  2,   0,  -2,  ...,  -3,   4,  -5],
         [  1,   1,  -4,  ...,  -4,   2,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-3.9801,  1.1153,  2.2877, -4.4057, -7.2073],
        [-4.4373, -0.6382,  1.9764, -7.5579, -4.0100],
        [-6.3634,  2.2826,  2.5607, -8.0339, -6.8583],
        [-3.0966, -0.5213,  1.9082, -4.7600, -4.5904]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 0., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.5214)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.1997,  0.9735,  1.9133, -4.8203, -5.7942],
        [-5.5700,  2.8130,  2.5023, -6.7401, -6.0081],
        [-7.4641,  0.6291,  3.0424, -5.8146, -7.4012],
        [-3.3015,  0.4898,  0.9965, -3.8720, -6.0458]])
<class 'torch.Tensor'>
[2, 1, 2, 2]
target tensor([2., 1., 4., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.1008)
evaluate
input tensor([[[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.6600,  1.7492,  2.2379, -2.8405, -5.7644],
        [-5.5245,  1.7039,  1.5889, -4.0219, -3.3830],
        [-5.2254,  1.2580, -0.1319, -8.0479, -6.7206],
        [-5.7614,  2.0020,  2.2935, -5.2583, -3.9075]])
<class 'torch.Tensor'>
[2, 1, 1, 2]
target tensor([0., 2., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.9008)
Test: [10/13]	Time 0.523 (0.512)	Loss 2.9008 (3.5213)	Accuracy 0.000 (34.091)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.2183, -0.0419, -0.1653, -6.4835, -4.4999],
        [-2.9234,  1.1440, -0.0260, -3.4594, -5.7593],
        [-5.5455,  1.5885,  2.4873, -6.3187, -5.4639],
        [-2.7929,  0.2986, -0.6432, -7.4655, -6.3349]])
<class 'torch.Tensor'>
[1, 1, 2, 1]
target tensor([2., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.5056)
evaluate
input tensor([[[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.8417,  1.7941,  1.1677, -2.9860, -5.6204],
        [-5.2904,  2.0223,  2.0637, -7.0999, -5.8511]])
<class 'torch.Tensor'>
[1, 2]
target tensor([2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.4498)
epoch: 8
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.8544,  -0.8819,   5.1199,  -5.1815,  -4.5527],
        [ -4.1632,  -3.6161,   5.3867,  -7.1713,  -4.1850],
        [ -5.6054,  -0.0570,   3.3316,  -9.2541, -10.3872],
        [ -6.2410,  -0.6956,  17.4585, -11.3702,  -7.4892]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2, 2, 0, 2])
<class 'torch.Tensor'>
loss
tensor(2.2433, grad_fn=<NllLossBackward0>)
Epoch: [8][0/25]	Time 1.895 (1.895)	Data 0.024 (0.024)	Loss 2.2433 (2.2433)	Accuracy 75.000 (75.000)
train
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.9097,  14.0615,  -9.9856, -17.2588,  -5.1175],
        [ -6.5258,  -4.5579,  -1.1764,  -8.9737,  -7.8532],
        [ -5.9478,   0.8696,   4.0188,   1.1516, -12.4708],
        [ -8.0584,  -8.7653,  11.0769,  -6.6874,  -8.9589]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 2]
target tensor([1, 0, 3, 2])
<class 'torch.Tensor'>
loss
tensor(2.0878, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.2124,  -1.3257,   6.4196, -11.6373,  -6.7383],
        [  4.5188,  -9.3709,  -5.8395,  -9.8615,  -5.3798],
        [-10.5267,  11.6355,   0.1881, -12.8309,  -2.0581],
        [ -5.5384,  -3.4589,   4.3591,  -9.9523,  -4.5228]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 1, 2]
target tensor([2, 0, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -1,  -1,  ...,   0,   5,   1],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   0,  -2,  ...,   2,  -4,   0],
         [  0,   1,  -1,  ...,  -5,   4,   0],
         [  1,   2,  -2,  ...,  -6,  -5,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  7,  -4,   0,  ...,  -1,   1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,  -2,   0,  ...,  -3,  -1,   8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  7.3587,  -0.9007,  -7.1850, -11.3180,  -3.9900],
        [-10.5775,   6.3182,  10.7787, -12.0993,  -3.7655],
        [ -9.0400,   2.3868,   7.4704,  -7.3886,  -6.4540],
        [ -7.0559,  12.4463,  -4.6008,  -7.6946,  -8.9911]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 1]
target tensor([0, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0045, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.5584,  10.3026,  -5.5494,  -8.9779,  -0.6107],
        [ -4.2700,   0.1007,  -2.5059,  -2.9714,  -5.7160],
        [ -0.2459,  14.2728,  -6.1342, -10.0937,  -9.6796],
        [ -4.0130,  14.2463,  -3.0335, -10.8103, -15.5783]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 1, 1]
target tensor([1, 3, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.7999, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.8531,  -0.2672,  12.1985, -21.4389,  -0.8150],
        [  0.6697,   6.6820,  -4.0709,  -8.8282,  -2.3742],
        [ -1.7672,   0.1587,   6.8209,  -4.4252,  -6.4431],
        [ -1.6877,  -0.8613,  -9.2129,  -3.1848,  -9.4011]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 2, 1]
target tensor([2, 1, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.6892, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,   2,  -2,  ...,  -6,  -5,   0],
         [  1,  -2,  -3,  ...,  -2,  -2,   5],
         [  3,  -3,  -1,  ...,   1,  -1,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -2,  ...,  -4,   5,  -5],
         [  3,  -2,   0,  ...,  -3,  -1,   8],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,  -1,  ...,  -1,  -3,   3],
         [  0,   0,   0,  ...,   0,  10,  -2],
         [  2,   0,  -2,  ...,   2,   4,  -8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -6.7407,   2.1643,  -5.5609,   6.8568, -12.2767],
        [ -2.6264,  -3.6659,   5.5647,  -4.7558,  -2.0851],
        [ -3.2466,  -8.0808,   8.1576,  -4.1968,  -9.3003],
        [ -5.6401,  -1.7060,  -3.9011,   4.8172,  -3.6526]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 2, 3]
target tensor([3, 2, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0030, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.1930,  13.8227,  -3.7345,  -4.4996,  -7.5783],
        [  7.3180,  15.3170,  -7.5992, -12.9674,  -8.1423],
        [ -5.7030,  -1.2400,  -1.5127,  11.2084, -16.8341],
        [  0.5342,  -7.8740, -10.0726,  -8.4184,  10.0640]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 3, 4]
target tensor([1, 1, 3, 4])
<class 'torch.Tensor'>
loss
tensor(0.0001, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.8160,   1.5576,   5.9691,  -1.3919,  -6.4843],
        [  8.2090,  -0.1035,  -6.6676,  -6.5642,  -2.9800],
        [ 10.6204,   0.2266,  -9.0473,  -2.0385,  -9.2040],
        [ -3.1182,   1.5321, -10.8704,  -2.9065,  10.9895]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 0, 4]
target tensor([2, 0, 0, 4])
<class 'torch.Tensor'>
loss
tensor(0.0033, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.7563,  -3.7868,  -0.4139,   0.1759,  -3.6016],
        [  2.1279,  -7.1972,   0.1766,  -6.4383, -15.4260],
        [ -5.3577,  -8.7008, -19.8883,  16.6766,  -5.8697],
        [  0.7757,   1.1001,  -1.4267,  -4.4256,  -9.0728]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 3, 1]
target tensor([2, 2, 3, 2])
<class 'torch.Tensor'>
loss
tensor(1.7528, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 12.3434,  -9.0330,  -3.2606,  -1.5868,  -6.1529],
        [ -6.3997,  -1.5331, -10.7764,   7.2877,  -5.7379],
        [ -3.1282,  10.1984,  -3.3007,  -2.3866,  -3.1889],
        [ 10.7002,  -4.0842, -15.3954,   4.3210,  -4.7608]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 1, 0]
target tensor([0, 3, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0005, grad_fn=<NllLossBackward0>)
Epoch: [8][10/25]	Time 1.661 (1.726)	Data 0.027 (0.022)	Loss 0.0005 (0.6895)	Accuracy 100.000 (81.818)
train
input tensor([[[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.8974,  11.2604, -12.7228,  -1.9968, -15.3367],
        [  4.7771,  -2.0477,  -5.4321,  -4.6042,  -4.3075],
        [ -5.0037,   1.6569,   0.1490,  -2.9708,  -5.7125],
        [ 14.5842,  -4.5396, -19.2737,  -7.6173,  -2.5381]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 1, 0]
target tensor([1, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.4297, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.5248,  -3.5797, -13.7564,  13.3638, -11.1077],
        [  1.1816,  -0.4197,   5.7999,  -4.1648,  -7.3329],
        [-13.0885,  -9.1587,  -5.0643,   8.9454,   7.6909],
        [ 12.4075,  -4.3616, -15.5604,  -6.1246,   2.3213]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 3, 0]
target tensor([3, 2, 4, 0])
<class 'torch.Tensor'>
loss
tensor(0.3793, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.6576,   1.9055,  -4.3455,  12.0158,  -7.2092],
        [  4.0438,  -3.4642,  -4.8538,   1.0834,  -7.4861],
        [ -5.1232,   1.0713,  -6.6649,  -6.6462,   4.9158],
        [-15.0569,  17.4992,  -0.9202,  -6.4230,  -2.8968]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 4, 1]
target tensor([3, 0, 4, 1])
<class 'torch.Tensor'>
loss
tensor(0.0181, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.5375, -10.7366,  -5.3564,  -2.8447,   7.1303],
        [-12.0486,  11.5252,  -8.7838,  -5.8587, -12.2570],
        [-12.6723,  -6.6323,  18.4864,   5.0812,  -6.8887],
        [  0.8798, -12.9083,  -9.4611,  -3.5570, -12.3180]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 2, 0]
target tensor([4, 1, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0055, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.5457, -6.9317,  3.4018, -5.2911, -7.1494],
        [ 5.5205, -7.3458, -1.1618, -4.7766, -5.8333],
        [-5.9177, -6.1323, -4.2828,  4.9185, -7.4885],
        [ 8.5277, -9.3992, -7.6860, -4.0839, -9.6635]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 3, 0]
target tensor([2, 0, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0005, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.8920,  -1.1257,  11.0922,  -6.6916,  -9.1097],
        [  3.3132,  -8.1370,  -2.3356,  -4.1767,   0.3971],
        [ -7.2400,  -7.2772,  -0.5277,  -2.8200,   5.4291],
        [ -8.3100,  -9.3517,  13.9686,  -2.1843, -11.5946]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 4, 2]
target tensor([2, 0, 4, 2])
<class 'torch.Tensor'>
loss
tensor(0.0149, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.7132,   6.3441,   2.8866,  -7.0839,  -2.9522],
        [ -7.9413,  -1.8061,  -1.2994,   1.7814,  -7.5169],
        [ -5.4587,   4.3487,  -4.7603,  -3.3754,  -1.7593],
        [-14.4588, -16.3861,   5.0683,   7.4431,  -5.3734]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 1, 3]
target tensor([1, 1, 1, 3])
<class 'torch.Tensor'>
loss
tensor(0.9454, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  2,   0,  -3,  ...,   0,   3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -1,  ...,   0,   0,   0],
         [  2,  -1,  -2,  ...,   2,   4,  -2],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -7.4278,   0.6494,  -0.1865,  -9.4592,  -7.4483],
        [-12.2388,  -7.2634,   6.1628,   1.2384,  -4.2212],
        [-15.7299, -11.2915,  13.5022, -10.6770, -13.4454],
        [ -9.1823,  -7.3108,  -7.7123,  -1.7191,  -8.6669]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 3]
target tensor([1, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(1.4918, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.0761,  -9.8452,  -2.3177,   3.0936,  -7.1722],
        [ -9.9158,  -2.9826,   8.5687,  -2.3096,  -4.5708],
        [ -9.2122, -10.6124,   6.2126,   8.1385,  -7.5206],
        [ -1.7639,  -4.8387,  -0.6513,  -6.3014,  -5.3913]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 3, 2]
target tensor([3, 2, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.3909, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.2994,   3.8655,   0.3551,  -3.4964,  -2.5518],
        [ -8.4141, -12.8710,   8.7513,  -9.1955, -11.8897],
        [ -3.9931,   5.4998,   0.9611,  -4.0866,  -6.4726],
        [-11.7160,  -5.6696,  16.7311,  -2.9954,  -7.3637]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 1, 2]
target tensor([1, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0106, grad_fn=<NllLossBackward0>)
Epoch: [8][20/25]	Time 1.690 (1.759)	Data 0.014 (0.020)	Loss 0.0106 (0.5367)	Accuracy 100.000 (84.524)
train
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.7614,  -7.4064,  -7.8814,   4.7420,  -6.7850],
        [-11.0837, -10.6680,  -1.7463,   3.2337,  -5.7308],
        [ -5.8424,  -3.7976,   7.0432,  -4.4857,  -8.8450],
        [ -8.5414,   1.0022,   1.6612,  -6.4768,   0.8243]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 2, 2]
target tensor([3, 3, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.3336, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  5.2237, -10.1475,  -4.2182, -13.9835,  -1.1181],
        [  7.5112,  -6.5835,   0.9267, -11.3828,  -7.6285],
        [ -6.1796, -10.9236, -11.1411, -16.5682,  11.5314],
        [ -6.6001,  -3.1697,  10.1569,  -7.6785,  -2.6908]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 4, 2]
target tensor([0, 0, 4, 2])
<class 'torch.Tensor'>
loss
tensor(0.0008, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.7868,   0.7470,   6.8505,  -5.7034,  -5.8993],
        [ -9.3972,  -5.5734,   6.1597, -12.2088,  -1.7390],
        [ -6.6571,  11.0041,   2.0260,  -6.1779,  -2.6156],
        [ -5.4666,  -3.7396,  12.2697,  -5.0139,  -2.4706]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 2]
target tensor([2, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0007, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.9590,  -7.8781,   0.2363,   3.4287,  -6.5887],
        [  5.2606,  -5.9906,  -8.4800,  -8.4505,  -6.4592],
        [-12.7895,  -0.7675,  -2.4858, -12.6477,  20.4260],
        [ -3.0729,  -3.5011,   9.9420,  -7.7063,  -4.0730]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 4, 2]
target tensor([3, 0, 4, 2])
<class 'torch.Tensor'>
loss
tensor(0.0101, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.9252, -2.0318,  2.8702, -5.9895, -3.7959],
        [-5.6152, -0.9058, -1.5554, -8.3214, -2.2467],
        [-5.2539, -0.7345,  3.9152, -6.6057, -1.1344],
        [-5.0684, -0.2458,  0.4779, -9.4869,  0.1108]])
<class 'torch.Tensor'>
[2, 1, 2, 2]
target tensor([2., 0., 3., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.3358)
Test: [0/13]	Time 0.490 (0.490)	Loss 4.3358 (4.3358)	Accuracy 25.000 (25.000)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.0750, -0.0325,  0.5966, -9.1882, -1.6099],
        [-2.7917, -0.9376,  1.2834, -6.0315, -4.0725],
        [-6.4877, -0.6601,  2.3484, -9.0409, -0.0845],
        [-4.3237, -1.4998,  1.2391, -8.1354, -3.0520]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 1., 4., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.8880)
evaluate
input tensor([[[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-7.4291, -0.6640,  0.6013, -8.5206, -1.8873],
        [-5.8666, -2.2360, -0.5242, -8.8574, -1.5038],
        [-6.0935, -4.8799,  0.9498, -8.4361, -3.6511],
        [-4.7676,  0.9672,  2.5148, -6.6901, -1.1236]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([3., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.5269)
evaluate
input tensor([[[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.4973,   0.0570,  -0.0145,  -9.7001,  -1.9293],
        [ -3.1622,   0.4759,   2.2298,  -6.5743,  -1.9998],
        [ -4.9321,  -0.6587,  -0.9334, -11.5041,  -1.2165],
        [ -7.3104,  -0.8490,   2.7103,  -4.6792,  -1.1925]])
<class 'torch.Tensor'>
[1, 2, 1, 2]
target tensor([0., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.4116)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.6826,  -0.9958,  -1.8187, -10.6190,  -0.2494],
        [ -4.9866,  -1.9162,   1.3496,  -8.0039,  -1.2495],
        [ -3.1581,  -2.4041,  -0.6589,  -9.5070,  -2.8499],
        [ -4.2463,  -1.3480,   0.1339, -11.6074,  -1.6724]])
<class 'torch.Tensor'>
[4, 2, 2, 2]
target tensor([3., 1., 0., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.2941)
evaluate
input tensor([[[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.7079e+00, -2.2980e+00,  2.1751e+00, -7.5331e+00, -6.8481e-01],
        [-5.5936e+00, -2.0308e+00,  2.1204e+00, -8.8065e+00, -4.3543e+00],
        [-2.6186e+00,  8.8627e-03,  9.6983e-01, -5.4391e+00, -2.4378e+00],
        [-6.2669e+00, -2.9051e+00,  2.8502e+00, -9.6681e+00, -3.0364e+00]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([3., 3., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.7139)
evaluate
input tensor([[[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.0506,   1.3050,   2.0297,  -8.1783,  -2.8298],
        [ -4.2131,  -3.7485,   1.9400, -11.8164,   0.6990],
        [ -1.6475,  -1.2790,   1.0315,  -6.2298,  -1.8439],
        [ -6.8556,  -2.7791,   0.2327, -10.1433,   0.1148]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 0., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.5891)
evaluate
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.8807,  0.5302,  1.2528, -6.6182, -3.6514],
        [-5.5968, -2.8464,  2.4516, -7.1154, -4.1062],
        [-6.4160, -1.0154,  3.2783, -8.4985, -2.4333],
        [-1.1534, -1.0593,  2.1488, -8.3198, -2.8082]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.1336)
evaluate
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.0900, -1.2966, -1.2392, -9.5135, -1.3348],
        [-3.5079, -0.9682,  2.1488, -5.8036, -1.9073],
        [-4.8027, -0.0214,  2.4271, -8.1575, -2.0245],
        [-5.2602, -1.0877,  1.1921, -9.6260, -0.0645]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.3886)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.2710,  -0.7975,   0.7519,  -8.2603,   0.2288],
        [ -6.0519,  -1.5898,   1.6045,  -8.9377,  -2.7240],
        [ -7.4527,  -0.2341,   1.1501, -10.4401,  -1.0803],
        [ -4.2635,  -0.6394,   0.6453, -10.5306,  -1.6265]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 4., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.8815)
evaluate
input tensor([[[  0,   0,   2,  ...,   5,  -7,  -4],
         [  1,   0,   0,  ...,   2,  -3,  -1],
         [  1,  -3,  -1,  ...,   3,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   3,  -2,  ...,   1,   3,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[ 10,  -6,   1,  ...,   2,  -5,   4],
         [  4,  -3,  -3,  ...,  -2,   1,   3],
         [  1,  -1,  -2,  ...,   3,   3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-5.5165, -0.3135,  2.4270, -6.2466, -2.6375],
        [-3.3760, -0.7212,  0.6288, -8.8708, -0.3961],
        [-4.4344, -0.8974,  3.9196, -8.9796, -1.6907],
        [-5.1941, -0.0170,  3.7818, -5.9016, -3.5569]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 1., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.4725)
Test: [10/13]	Time 0.503 (0.512)	Loss 2.4725 (3.3305)	Accuracy 50.000 (38.636)
evaluate
input tensor([[[  2,   2,  -2,  ...,  -3,  -1,   0],
         [  2,  -2,  -1,  ...,   2,  -3,   4],
         [  0,  -2,  -5,  ...,   0,   4,   7],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,   0,  ...,  -1,  -2,  -1],
         [  0,   2,  -2,  ...,  -3,   4,  -2],
         [  2,  -1,  -1,  ...,   0,   1,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,  -1,  ...,   1,   1,   3],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,   0,   0,  ...,   0,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -3.3308,  -0.0998,   1.8994,  -6.8881,  -4.5754],
        [ -6.1245,  -4.0683,   0.0467, -10.0027,   1.9318],
        [ -6.1829,   0.4579,   1.7499,  -9.9046,  -1.1488],
        [ -6.3317,  -1.2204,  -0.1503, -13.0195,  -0.9021]])
<class 'torch.Tensor'>
[2, 4, 2, 2]
target tensor([2., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.0841)
evaluate
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.4060,  -0.2468,   0.8348, -10.5721,   0.9234],
        [ -2.3641,  -2.3991,  -1.7691, -11.3016,  -2.1335]])
<class 'torch.Tensor'>
[4, 2]
target tensor([0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.8733)
epoch: 9
train
input tensor([[[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-9.7369, -8.2551, -6.2954, -0.6540, -5.4207],
        [-9.3662, -2.0212, 12.9882, -9.0788, -0.8718],
        [-0.3181, -3.0362, -7.1460,  3.8442, -7.2597],
        [ 1.2745, -1.2192, -6.8276, -2.9213, -4.7288]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 3, 0]
target tensor([3, 2, 3, 3])
<class 'torch.Tensor'>
loss
tensor(1.0802, grad_fn=<NllLossBackward0>)
Epoch: [9][0/25]	Time 1.776 (1.776)	Data 0.024 (0.024)	Loss 1.0802 (1.0802)	Accuracy 75.000 (75.000)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-15.3894,  10.4572,  -5.3219, -18.7383, -12.1494],
        [-10.3711,  13.8787,   1.3857,  -7.9358,  -3.7088],
        [  2.4961,  -4.6961,   0.9813,  -8.0576,  -3.2724],
        [ -4.5090,  20.6036,  -0.5546, -23.0785,   4.0914]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 0, 1]
target tensor([1, 1, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.0505, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.5865,  -0.6424,   9.0917, -13.2087,  -1.0479],
        [ -4.1836,   9.4651,  -6.2149,  -6.7315,  -7.0761],
        [ -1.5749,   2.3148,   3.8570, -12.5581,  -3.4868],
        [ -9.9157, -12.1448, -16.3185,   9.4536,  -5.6027]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 2, 3]
target tensor([2, 1, 0, 3])
<class 'torch.Tensor'>
loss
tensor(1.4075, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.2994,  -7.7601,  -6.4738, -19.9809,  -5.9306],
        [-14.7895, -12.2950,  -2.0972,  11.5724,  -9.9562],
        [ -4.9095,  17.0671,  -0.9297, -15.9075,  -5.5640],
        [ -4.8660,   5.9930,  -1.3144,  -4.0620,  -1.9831]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 1, 1]
target tensor([0, 3, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0004, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.7720,  -4.2861,  10.0315, -12.0375,  -7.2334],
        [ 10.4973,   1.1457, -10.2434, -16.1276,  -3.5391],
        [ -8.4977,  -1.5504,  10.5103,  -9.0872,  -2.2158],
        [-11.0350,   7.4101,  -4.0487,  -3.8300,  -1.7369]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 1]
target tensor([2, 0, 2, 1])
<class 'torch.Tensor'>
loss
tensor(5.6830e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  5.5428,   1.2377, -13.9038,  -7.4442,  -0.6655],
        [ -6.4095,  -3.4463,  16.5027, -19.1377,  -1.0481],
        [  4.3648,  -0.6765,  -8.9057, -12.9002,  -0.6315],
        [ -4.4591,  -3.4284,   3.9577,  -6.9647,  -3.7171]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 0, 2]
target tensor([0, 2, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0075, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.5156,  12.2216,  -6.8344,  -8.1563,   1.0058],
        [ -9.5641,  -7.6527,   9.2268, -13.6551,  -4.5288],
        [ -2.1462,  -0.6112, -10.2201, -13.2698,  10.3535],
        [ -3.9859,   2.0252,   5.5108, -10.3673,   1.7454]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 4, 2]
target tensor([1, 2, 4, 2])
<class 'torch.Tensor'>
loss
tensor(0.0131, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -1,  -1,  ...,   0,   5,   1],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -2,  ...,  -4,   5,  -5],
         [  3,  -2,   0,  ...,  -3,  -1,   8],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -3,  ...,  -2,  -2,  -4],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  5.0069,  -4.7596,  -6.4359, -10.1007,   0.1672],
        [-12.7810,   1.2318,   7.1342,  -6.5690,  -0.5251],
        [ -6.1730,  -9.9680,   9.2634,  -7.5607,  -4.0025],
        [ -3.1647,   0.5781,   8.0550,  -8.9681,   0.1023]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 2]
target tensor([0, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0030, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.7875e+00, -3.1719e+00, -4.4628e+00,  1.2450e+00,  2.7972e-01],
        [ 4.7933e+00, -3.2198e+00, -4.8344e+00, -3.6338e+00, -3.8971e+00],
        [-9.4408e+00,  8.0491e-03,  3.3835e+00, -7.1017e+00,  1.8081e+00],
        [-4.2799e+00, -3.9188e-01,  3.7650e+00, -7.1217e+00, -5.3406e+00]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 2, 2]
target tensor([3, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.1428, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 12.9702,  -3.4347,  -9.8515, -17.4716,  -0.5093],
        [ -6.4310,  16.1329,  -9.6347, -11.6898,  -1.2659],
        [  5.8885,  -1.4642,   2.0999, -10.9164,  -1.7192],
        [-15.6333,  13.3195,  -3.1035,  -2.9224,  -3.5179]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 0, 1]
target tensor([0, 1, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.0059, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.6692,   2.0813,  15.9708, -15.7202,   0.0742],
        [ -5.7439,  -6.4554,  -1.2496, -14.3064,  -4.6769],
        [ -7.6821,   2.6370,   4.0692,  -7.8928,   1.7289],
        [ -1.5624,  15.1900,  -2.7065,  -8.1480,  -3.0390]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 1]
target tensor([2, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0842, grad_fn=<NllLossBackward0>)
Epoch: [9][10/25]	Time 1.674 (1.742)	Data 0.012 (0.024)	Loss 0.0842 (0.2541)	Accuracy 100.000 (95.455)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,   0,  ...,  -1,  -2,  -1],
         [  1,   2,  -2,  ...,  -6,  -5,   0],
         [  1,   0,  -3,  ...,   4,  -4,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   0,   0,  ...,   3,   0,  -5],
         [  2,  -2,  -2,  ...,   6,   1,  -6],
         [  3,   1,  -1,  ...,  -2,  -2,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  2,   0,  -3,  ...,   0,   3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -1.3848,  -2.5833,   4.0206,  -6.2631,  -4.5681],
        [ -9.3094,  -1.2997,  10.6323, -13.7081,  -0.4683],
        [ -6.1844,  -2.5856,   3.1301,  -3.3737,  -8.2475],
        [-10.6535,   6.6097,  11.4751,  -7.2777,  -6.2644]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0047, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.4768,   0.0948,  -3.8585,  -6.3591,   5.4273],
        [ -5.2535,  -1.5515, -18.3475,  -4.5152,  -5.7414],
        [ -9.0141,   7.2432,  -5.8232,  -7.5775,  -4.8071],
        [ -9.8214,  14.3466,  -2.4981,  -8.1602,  -1.9303]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 1, 1]
target tensor([4, 3, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.7640, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,   2,  -1,  ...,   3,   1,  -6],
         [  0,  -1,  -4,  ...,  -6,   0,  -1],
         [  2,  -1,   0,  ...,   0,   5,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  6,  -2,   1,  ...,   0,  -1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [ 11,  -3,   0,  ...,   3,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-12.7849,  16.5761, -16.6145, -18.8757,  -0.2628],
        [ -8.6356,  20.6300,  -9.3050, -10.5714,  -4.9919],
        [ -6.7979,  -4.9021, -18.0964,   1.6335,  -6.4250],
        [-10.2021,  -1.9540,   2.3069, -12.4983,  -6.4639]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 3, 2]
target tensor([1, 1, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0040, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.8930,   1.7147, -10.1410,  -7.7802,  -2.2832],
        [ -5.9064,  -2.3381,  -9.3600,  -1.0478,  13.0423],
        [ -9.2461,  17.0451,  -9.2414,  -5.4816,  -8.6668],
        [  6.6783,   1.1256,  -7.2205,  -6.2935, -11.1674]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 4, 1, 0]
target tensor([0, 4, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0283, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  5.0391,  -0.9232, -15.6311,  -3.1684,  -0.1184],
        [ -4.0733,  -7.6863,   4.4295,  -2.2233,  -6.6041],
        [ -7.9491,  -2.1484, -12.7222,   4.5032,  -7.2122],
        [ -5.9882,   4.4328, -18.7923, -10.2811,  17.3380]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 3, 4]
target tensor([0, 2, 3, 4])
<class 'torch.Tensor'>
loss
tensor(0.0028, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 11.0084,  -5.4870, -16.1727,  -4.8189,  -5.1754],
        [ -4.0893,  -3.8408,  -7.4633,   6.1965, -14.1900],
        [ -3.8454,  -6.9829,  -1.8132, -11.1525,  24.2086],
        [ -1.7693,  -2.1989,   3.7434,  -3.1819,  -1.9221]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 4, 2]
target tensor([0, 3, 4, 2])
<class 'torch.Tensor'>
loss
tensor(0.0028, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.8439, -4.6244, -6.2010,  1.9925, -3.6736],
        [-5.8569,  0.2301,  3.5575, -2.5416,  2.5784],
        [-3.9774, -4.3321,  2.2047, -4.6699, -2.0646],
        [-6.0703,  7.8336, -7.9345, -3.8380, -0.6068]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 2, 1]
target tensor([3, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0932, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 2.2855, -5.8302, -5.9729, -8.6935, -3.0993],
        [-4.5140, -5.9643, 12.7291, -6.8941, -4.5345],
        [-4.1125, -8.3082, -8.9939, 18.7811, -6.6632],
        [-4.0502, -6.2514, -6.0440,  7.4130, -6.6810]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 3, 3]
target tensor([0, 2, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.0013, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.7687,  -9.7002, -20.3835,  -9.1022,  12.9046],
        [ -6.0737,  13.0266, -11.4774,  -0.8255,  -1.7151],
        [ -9.2355,  -1.2492,   3.8961,  -6.1705,  -1.9135],
        [  6.3802,  -8.7281,  -6.4571,  -3.1220,  -5.6200]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 2, 0]
target tensor([4, 1, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0022, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.7307,  -9.7298,  14.6693,   4.1848,  -6.0686],
        [ -9.7378,   0.1102, -17.5586,  -5.6791,   1.0209],
        [ -3.9248,  -6.6013,   3.9842,  -1.2738,  -6.2694],
        [  3.4575,  -4.7279,  -4.3741,  -2.5953,  -7.0804]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 4, 2, 0]
target tensor([2, 4, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0869, grad_fn=<NllLossBackward0>)
Epoch: [9][20/25]	Time 1.685 (1.750)	Data 0.024 (0.023)	Loss 0.0869 (0.1803)	Accuracy 100.000 (96.429)
train
input tensor([[[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.7684,   2.3973,  -8.1482,  -1.9441,  -4.8758],
        [ -6.0278,  -2.5255,  -7.4815,  -4.0556, -13.0437],
        [ -4.2789,  -5.9700,   5.9283,  -3.0880,  -3.8308],
        [ 11.0540,  -8.6262, -10.9257,   2.6580, -15.6975]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 0]
target tensor([1, 1, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0600, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.1137,  -6.1444,  -6.5621, -11.7812,   3.2610],
        [ -1.1712,  -7.2836,   6.2086,   0.1653,  -8.1264],
        [ -4.8038,  -3.9711, -24.9958,  16.2250, -10.4322],
        [ -4.0499,  -6.8546,  -4.7760,  17.2600,  -9.9824]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 3, 3]
target tensor([4, 2, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.0039, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.4636,  -6.1663,  -3.6731,   7.9896,   0.9986],
        [ -4.8577,   3.9895,  -9.0956,   1.8057,  -9.9770],
        [ -6.2731, -11.6495,   4.3177,  -3.7259,  -6.0085],
        [  6.1459,  -7.7637,  -9.2259,  -3.0708,   1.9981]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 2, 0]
target tensor([3, 1, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0310, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.1248,   9.3656,  -2.7987,  -3.3827,  -3.9111],
        [-11.5088,  -2.7033,  -2.8681,  16.8145, -11.2748],
        [ -0.4973, -17.0537, -15.6324,  -6.2841,  -9.3099],
        [ -1.4867,  -7.1173,   1.2400,  -2.1776,   2.0431]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 0, 4]
target tensor([1, 3, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.3016, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.0768, -3.0709, -1.5962, -0.1350, -7.0271],
        [-4.2906, -6.1368, -7.8859,  4.5430, -7.4741],
        [-4.8737, -5.0526, -1.0832,  3.3966, -7.7395],
        [-4.7485, -4.8965, -1.2820,  1.4125, -8.4288]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([1., 0., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.2117)
Test: [0/13]	Time 0.531 (0.531)	Loss 4.2117 (4.2117)	Accuracy 25.000 (25.000)
evaluate
input tensor([[[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.1961, -4.8339, -3.8584,  2.5193, -6.1695],
        [-3.9531, -5.6996, -3.7749,  0.4399, -4.1578],
        [-3.5490, -6.6066, -6.0616, -0.0133, -6.4087],
        [-1.5395, -5.1383, -1.0703,  1.0706, -4.8575]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([0., 2., 3., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.2961)
evaluate
input tensor([[[  4,   0,   1,  ...,   0,  -2,   4],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         [  5,   0,  -1,  ...,  -2,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   1,  -1,  ...,   2,  -3,  -2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,   0,   1,  ...,   2,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   0,   0,  ...,  -3,   0,  -2],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         [  1,   2,   2,  ...,  -3,   0,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-4.5689, -3.8996,  0.5878,  2.0923, -4.4895],
        [-4.6334, -4.9567, -5.1355, -1.5859, -6.1913],
        [-5.2662, -4.7206, -2.2090,  0.9455, -3.8178],
        [-3.8844, -4.4214, -2.3241, -0.1013, -4.2816]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([3., 2., 4., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.2887)
evaluate
input tensor([[[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.8780, -7.0917, -1.3817,  1.0722, -6.9450],
        [-6.2025, -4.8355, -1.2483,  3.9392, -4.4889],
        [-3.2246, -4.2670, -0.2130, -0.2470, -5.5844],
        [-1.8839, -5.7959, -5.4414, -0.2805, -4.5035]])
<class 'torch.Tensor'>
[3, 3, 2, 3]
target tensor([1., 2., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.5891)
evaluate
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.2279, -6.0880, -1.3077,  0.0989, -7.5635],
        [-4.9562, -3.0369, -1.1639,  0.5645, -5.8353],
        [-2.4719, -4.9832, -3.3424,  1.8970, -3.8818],
        [-3.1197, -5.1505, -3.1760,  0.7012, -7.6989]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([2., 0., 0., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.0447)
evaluate
input tensor([[[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.8250, -5.9040, -3.3300,  2.9231, -7.4051],
        [-1.4173, -6.5506, -5.1747,  1.5522, -7.1160],
        [-5.5237, -5.4081, -4.5537,  1.9625, -4.6938],
        [-5.4085, -5.2361, -1.4933,  2.0208, -7.8736]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([4., 0., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.0967)
evaluate
input tensor([[[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.4482, -7.2336, -2.9617, -2.0930, -3.2093],
        [-4.1507, -3.5193, -2.6329,  1.1961, -5.6205],
        [-4.4083, -8.9304, -5.0112,  2.1083, -3.2739],
        [-2.8044, -2.5101, -1.1661,  1.9387, -6.1241]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([0., 1., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.2749)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.5805, -5.7905, -6.4382,  1.8895, -6.1317],
        [-0.8666, -3.3963, -0.7896, -1.1493, -3.5176],
        [-4.9092, -8.6615, -3.0020,  3.6607, -8.4223],
        [ 0.2715, -4.9845, -1.6361, -0.7920, -6.8425]])
<class 'torch.Tensor'>
[3, 2, 3, 0]
target tensor([2., 0., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.1239)
evaluate
input tensor([[[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.6816, -4.9434, -4.3490,  4.1142, -6.2123],
        [-2.5935, -2.3014, -1.9063,  0.3450, -6.6433],
        [-1.9788, -3.2541, -5.3782, -0.4780, -5.6142],
        [-5.0449, -8.5687, -5.6226,  1.7845, -5.0682]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([3., 1., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.0064)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-0.2823, -2.4881, -2.3566, -1.3426, -5.3663],
        [-3.2995, -1.2117,  0.0530, -0.6467, -3.8205],
        [-4.1784, -1.5401, -1.7071, -0.3867, -6.3642],
        [-3.5756, -5.7373, -4.8045,  1.3871, -7.1484]])
<class 'torch.Tensor'>
[0, 2, 3, 3]
target tensor([0., 2., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.4998)
evaluate
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.3940, -5.8251, -5.8355,  2.0871, -6.1776],
        [-1.5386, -2.5958, -2.6208,  1.6591, -4.9488],
        [-3.2313, -2.8281,  0.7533,  1.0008, -6.0047],
        [-4.5673, -6.2510, -4.8295,  2.0057, -6.0065]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([2., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.9897)
Test: [10/13]	Time 0.501 (0.502)	Loss 4.9897 (4.0384)	Accuracy 0.000 (22.727)
evaluate
input tensor([[[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,  -2,  -2,  ...,   0,   0,  -3],
         [  1,  -2,  -1,  ...,   2,  -4,  -5],
         [  2,   0,  -2,  ...,  -3,   4,  -5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  2,   0,  -3,  ...,   0,   3,   4],
         [  2,   0,   0,  ...,   7,   0,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         [  1,  -1,  -1,  ...,   0,   2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-2.3994, -3.7491, -3.7790,  0.1375, -3.6235],
        [-2.0245, -6.6449, -6.0307, -0.3238, -6.8985],
        [-3.9078, -3.8256, -4.1183,  1.5163, -4.2996],
        [-3.0307, -3.3144, -1.8033, -0.1653, -5.9699]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([1., 0., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.2874)
evaluate
input tensor([[[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.5459, -2.6830, -1.9726,  1.1887, -8.3431],
        [-2.1823, -3.7876, -1.0880,  2.0751, -5.3446]])
<class 'torch.Tensor'>
[3, 3]
target tensor([2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.2331)
epoch: 10
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 7.4428, -5.9305, -8.8066, -8.8341, -9.8509],
        [-0.3253, -4.7959, -6.5236,  8.5143, -8.7368],
        [-6.8082,  2.0221,  6.5855,  0.3756, -5.5622],
        [-0.9141, -8.2308,  3.3625,  4.3329, -3.9707]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 2, 3]
target tensor([0, 3, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.3271, grad_fn=<NllLossBackward0>)
Epoch: [10][0/25]	Time 1.757 (1.757)	Data 0.009 (0.009)	Loss 0.3271 (0.3271)	Accuracy 75.000 (75.000)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.2624,  -5.3896,   2.3654,  -7.2684, -10.3590],
        [-12.6605, -16.3033,  14.2667,  -1.9194,  -6.1193],
        [  9.4913, -11.4703, -20.2839,  -8.1501,  -8.4536],
        [ -2.2272,  -2.2928,   6.9951,   2.6745,  -6.4927]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 0, 2]
target tensor([2, 2, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0100, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-17.3920,  -9.0966,  -2.5171,  26.6626,  -7.0732],
        [  6.7355,  -6.0551,  -7.9250,  -0.8199,  -8.3402],
        [ -5.0897,  -9.4449,   6.5611,  -3.3431, -10.6142],
        [ -1.5725,  -8.5552,  -1.9601,  -4.6276,   6.9994]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 2, 4]
target tensor([3, 0, 2, 4])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.4756, -11.2158,  -5.1482,  -3.8557, -11.7664],
        [ -7.4122,   1.5714,  -3.0253,   2.3386,  -7.5774],
        [ -8.1215,   2.4384,  -2.8520,  -1.5443, -15.0793],
        [-12.4736, -11.5405,  -1.9950,   9.0792, -11.0635]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 1, 3]
target tensor([0, 1, 1, 3])
<class 'torch.Tensor'>
loss
tensor(0.2940, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.2323,  -1.3974,  14.4380,  -3.8620, -12.0500],
        [ -4.3466,  -7.1335,   7.9375,  -6.6110,  -9.3749],
        [ -9.5262,  -5.3509,   0.8390,  11.2194, -11.4825],
        [ -0.8662,  -7.3643,   9.6531,  -5.3480, -10.3428]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 3, 2]
target tensor([2, 2, 3, 2])
<class 'torch.Tensor'>
loss
tensor(1.6004e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[  0,   0,  -2,  ...,  -4,   5,  -5],
         [  1,  -1,  -1,  ...,   0,   2,   0],
         [  1,   0,  -2,  ...,   1,   1,  -5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  7,  -2,   0,  ...,  -3,   7,   1],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -2,  ...,   0,  -3,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [ 13,  -6,   0,  ...,  -1,  -3,   9],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-9.4885, -7.9670, -6.9790, -5.9152,  3.5490],
        [ 2.3307, -0.7169,  1.2048, -2.6233, -9.3781],
        [-2.2295, -7.7121,  7.7804, -4.1891, -5.0006],
        [ 4.8507, -7.5150, -4.8469, -2.3311, -6.1336]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 0, 2, 0]
target tensor([4, 1, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.8425, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.4950,  -2.8382,   6.4440,  -7.3885,  -9.5186],
        [  7.9783,  -3.3615,  -4.2437,  -7.3918,  -9.8725],
        [  0.7115,  -4.5155,  -2.3493,  -2.9485,  -7.3881],
        [ -9.6430,  11.3500,   6.5318,   1.3414, -10.1688]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 0, 1]
target tensor([2, 0, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.0209, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-14.7927, -13.7941,  -2.8146,  12.1522, -13.1715],
        [ -5.0925,  -9.3036,   0.4543, -13.1961,   3.0729],
        [ -9.6252,   3.8270,  -3.7128,   4.7392, -11.8861],
        [ -7.5593,  -7.2291,  15.6057,  -0.9652, -10.8753]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 4, 3, 2]
target tensor([3, 4, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.1021, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  7.9170,  -2.0605,  -5.9810,  -9.8190,  -7.4173],
        [-12.4992,  16.3511,   1.4794,  -7.0784, -10.3916],
        [ -9.3356,  13.3990,   4.0720,  -4.6136, -11.6490],
        [ -8.3547,   6.6548,  -1.0423,  -6.0118,  -6.6420]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 1, 1]
target tensor([0, 1, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0001, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.7416,  12.4956,  -2.8811,  -7.2702,  -9.1934],
        [-12.9628,  12.5622,  -4.5730,  -6.8027, -12.8580],
        [-17.6088,  -4.2785,  20.6814,  -4.4687, -15.3004],
        [ -2.5496,  -1.0236,  -4.9921,  -5.4561,   5.4763]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 4]
target tensor([1, 1, 2, 4])
<class 'torch.Tensor'>
loss
tensor(0.0005, grad_fn=<NllLossBackward0>)
train
input tensor([[[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.6943,  -9.8743,   4.7528,  -6.7087,  -9.5329],
        [ -3.7792,  -5.8348,   3.6493,  -7.6970,  -7.2222],
        [ -9.5766,  15.0517,  -1.3462, -19.6443, -11.2150],
        [ -6.3016,  -6.3336,  -0.7036,   1.1383,  -9.5506]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 3]
target tensor([2, 2, 1, 3])
<class 'torch.Tensor'>
loss
tensor(0.0373, grad_fn=<NllLossBackward0>)
Epoch: [10][10/25]	Time 1.804 (1.733)	Data 0.028 (0.024)	Loss 0.0373 (0.1486)	Accuracy 100.000 (93.182)
train
input tensor([[[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.2167,  15.6980,  -6.6639,  -3.8791, -10.5926],
        [ -8.8800, -12.5406,  13.7331, -11.1043,  -8.0428],
        [ -9.4530,  12.1570,  -2.8144,  -3.8506,  -7.5743],
        [ -9.7692, -12.4976,  -9.6803,  18.7857, -14.2026]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 1, 3]
target tensor([1, 2, 1, 3])
<class 'torch.Tensor'>
loss
tensor(1.1921e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.6450,  15.4422,  -3.3616,  -7.5559, -11.6695],
        [ -8.9908,  10.7741,  -3.2014,   0.4352,  -6.3306],
        [  1.3821,  -8.1514,  -7.3100, -14.7845, -13.1316],
        [  2.8324,  -3.8746,   0.4747,  -7.4063, -14.0686]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 0, 0]
target tensor([1, 1, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.0230, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.6341,  21.4441,   1.0697, -15.5419,  -7.4099],
        [-10.7899,  -4.9241,  12.9394,  -3.3069,  -5.3041],
        [-10.9329,  -4.5469,  15.1826,  -7.4062, -16.2283],
        [ -4.9566,  -1.1258,  16.3346, -10.4995,  -8.0756]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 2]
target tensor([1, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(2.9802e-08, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.6693,   4.8989,   0.4689,  -6.1620,  12.0869],
        [ -8.1690,  -7.7114, -10.1303,  12.3474,  -8.3658],
        [ -5.3161,  -1.6441,  11.4991,  -5.8353,  -5.7588],
        [ -4.6191,  -4.5167,   6.7680,  -6.1530,  -6.8124]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 3, 2, 2]
target tensor([4, 3, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  4,   1,  -2,  ...,  -2,   5,  -4],
         [  6,  -2,   1,  ...,   0,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   1,   1,  ...,   6,   1,  -1],
         [  1,   2,   3,  ...,   0,  -3,   1],
         [  1,  -1,  -1,  ...,   2,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   0,   0,  ...,   1,  -3,   0],
         [  1,  -1,  -1,  ...,  -1,  -3,   3],
         [  0,   1,   0,  ...,  -1,   8,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-10.8908,   8.0284,  10.6827, -17.7892,  -9.5961],
        [ -2.5007,   9.8168,   0.2905,  -6.7365,  -8.2722],
        [ -5.3433,   2.0332,   4.1873,  -8.6530,   0.2498],
        [ -3.3413,  -2.5907,  12.1053, -18.4559, -10.9214]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 2, 2]
target tensor([2, 1, 4, 2])
<class 'torch.Tensor'>
loss
tensor(1.0332, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.7661,  -3.8933,  -0.5987,  -6.5516,  -3.6727],
        [  6.6675,  -4.0662,   1.6064,  -3.8042, -10.2306],
        [ -7.0698,  11.3637,   5.5413,  -3.1902, -10.3337],
        [-11.1168,  -7.4215,   0.6331,   7.3859, -16.0116]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 1, 3]
target tensor([0, 0, 1, 3])
<class 'torch.Tensor'>
loss
tensor(0.0061, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-8.3642e+00, -1.0479e+01, -5.9498e+00,  4.3030e+00, -9.1965e+00],
        [-1.2612e+01, -6.1818e+00,  7.1991e+00, -1.5692e+01, -1.4534e+01],
        [-1.4618e+01, -2.5360e+00,  3.8694e-03,  7.0317e+00, -1.6499e+01],
        [ 9.5003e+00, -4.4561e+00, -5.2252e+00, -7.4911e+00, -1.1123e+01]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 3, 0]
target tensor([3, 2, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.4719,  -5.0261,  -6.8630,   9.2603, -14.0346],
        [ -7.3607,  -1.3040,   7.0311,  -7.0840, -12.8271],
        [  5.9952,   1.5430,  -4.1935,  -9.7649,  -8.0263],
        [ -1.1775,  -4.5870,  -3.2549,  -2.0776, -15.3107]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 0, 0]
target tensor([3, 2, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.1149, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.1520e+01,  3.0721e+00,  3.4749e+00, -3.4913e+00, -1.0043e+01],
        [-1.0782e+01,  7.3448e-03,  9.4706e+00, -7.5460e+00, -1.1894e+01],
        [-7.0316e+00,  3.4228e+00, -2.6024e-01, -1.1647e+01,  1.6002e+01],
        [-1.0931e+01,  2.9656e+00,  1.2400e+01, -1.2298e+01, -5.8274e+00]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 4, 2]
target tensor([2, 2, 4, 2])
<class 'torch.Tensor'>
loss
tensor(0.1282, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   0,   3,  ...,   2,   2,   2],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  2,   3,   1,  ...,  -3,  -4,   0],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  2,   0,  -3,  ...,   0,   3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  5.0876,  -7.5388,  -0.9996, -11.1697,  -2.0398],
        [ -3.9498,  10.9693,  -0.3418,  -0.1680,  -3.9538],
        [ -9.0522,  -0.9165,   9.5651,  -0.4281,  -2.7471],
        [-16.9477,  -5.6376,  11.3659,  -1.0203, -11.0647]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 2, 2]
target tensor([0, 1, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0008, grad_fn=<NllLossBackward0>)
Epoch: [10][20/25]	Time 1.644 (1.727)	Data 0.026 (0.024)	Loss 0.0008 (0.1401)	Accuracy 100.000 (95.238)
train
input tensor([[[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  8.5827,  -0.2223, -12.1429,  -7.1930,  -2.0450],
        [ -4.2931,  -6.0375,  10.3204,  -4.5023,  -2.9662],
        [ -7.5008,  10.6400, -10.0926, -11.3022,  -5.1039],
        [ -2.6776,  -5.9113,   9.1349,  -3.6562,  -9.7714]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 1, 2]
target tensor([0, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(4.6845e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.9414, -10.1526,  -6.0520,  14.6555,  -8.5344],
        [ -4.9605,  -1.8918,  -6.9675,   1.4422,  -3.0612],
        [-10.3707,   2.0763,  12.5344,  -4.8101,  -2.3246],
        [ -4.3792,  -5.3282,  -0.3343,   2.7904,  -6.3493]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 2, 3]
target tensor([3, 3, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0229, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.4059,   0.8499,  -3.3531,  -5.5545,   5.5532],
        [ -7.3848,   8.9534,  -3.2943,  -0.9535,  -2.4011],
        [  6.3593,  -5.4971,  -6.7356, -13.0182,   2.5399],
        [  3.3208,  -7.0285,  -4.9833,  -8.5005,  -7.2084]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 0, 0]
target tensor([4, 1, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.0078, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.8574,  -7.3744,  -7.4126,  -2.3796, -11.1823],
        [  8.1315,  -1.3597, -13.3557,  -4.3511,  -2.5905],
        [ -1.9573,   4.3061,   0.2637,  -6.6813,  -2.0941],
        [ -3.5023,  15.6399,  -6.1871,  -7.8077,  -4.1571]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 1, 1]
target tensor([3, 0, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0114, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.4064,  0.5333, -0.0521, -6.5024, -1.8439],
        [-5.0052,  0.8118,  1.3092, -5.1154, -4.0599],
        [-0.9676, -1.0555,  0.1689, -4.8350, -2.6267],
        [-4.9683,  3.0949, -0.3882, -7.5200, -2.2963]])
<class 'torch.Tensor'>
[1, 2, 2, 1]
target tensor([1., 0., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.2479)
Test: [0/13]	Time 0.492 (0.492)	Loss 2.2479 (2.2479)	Accuracy 50.000 (50.000)
evaluate
input tensor([[[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.8480,  1.9086, -3.1833, -7.3258, -2.8104],
        [-3.9811,  1.0575,  0.8489, -6.3142, -4.1428],
        [-6.1548,  0.5106,  1.5390, -6.4112, -5.0906],
        [-3.5173,  1.5979,  2.2660, -4.6695, -2.3550]])
<class 'torch.Tensor'>
[1, 1, 2, 2]
target tensor([0., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.3336)
evaluate
input tensor([[[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.0557, -2.3018, -0.5318, -8.9337, -0.6854],
        [-4.5143,  1.8887, -1.8139, -8.3670, -4.2106],
        [-3.3378,  1.9265,  0.1599, -4.6728, -6.3094],
        [-4.8448,  0.1975,  1.8345, -6.0676, -5.3881]])
<class 'torch.Tensor'>
[2, 1, 1, 2]
target tensor([0., 1., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.5714)
evaluate
input tensor([[[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.9643, -0.5344,  0.9876, -5.6738, -2.2597],
        [-7.3638,  0.4248, -1.3216, -6.5932, -3.0061],
        [-5.2336, -1.9282,  1.2962, -4.7020, -5.7326],
        [-5.3097, -1.2651, -0.5973, -4.9294, -4.4107]])
<class 'torch.Tensor'>
[2, 1, 2, 2]
target tensor([3., 0., 2., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.8024)
evaluate
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.8220,  0.5149, -0.0674, -4.2349, -6.1032],
        [-6.9658,  1.3941, -1.0516, -7.1350, -1.1107],
        [-7.3967,  0.4439, -1.2877, -4.7841, -2.5754],
        [-3.5212, -0.4413, -0.4975, -5.9488, -4.9053]])
<class 'torch.Tensor'>
[1, 1, 1, 1]
target tensor([1., 0., 3., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.9057)
evaluate
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.8633,  1.5349, -5.0244, -4.6902, -3.3146],
        [-4.7875,  1.9782, -1.0291, -6.6297, -1.5983],
        [-3.0039,  1.3265,  2.8785, -4.4668, -4.2022],
        [-2.5961,  0.7583,  0.6845, -4.7465, -4.9300]])
<class 'torch.Tensor'>
[1, 1, 2, 1]
target tensor([0., 1., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.0900)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.0703,  1.4459, -0.0201, -6.5222, -3.2217],
        [-1.6152, -1.6122, -3.3480, -7.8066, -3.8111],
        [-3.3235, -0.5011, -3.4100, -6.5515, -2.6331],
        [-5.3525, -3.7048,  0.0501, -4.9722, -4.9160]])
<class 'torch.Tensor'>
[1, 1, 1, 2]
target tensor([0., 0., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.6963)
evaluate
input tensor([[[  0,   3,  -2,  ...,   1,   3,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,   0,  ...,   0,  -6,  -4],
         [  5,  -1,   0,  ...,   7,   3,   0],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   1,  -1,  ...,   2,  -3,  -2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,   0,   1,  ...,   2,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -3.9453,   0.3715,   2.5799,  -6.1917,  -2.8952],
        [ -2.1868,  -0.8140,  -2.7464,  -5.7524,  -3.1058],
        [ -5.4088,  -0.2185,   0.1799,  -6.2586,  -1.2757],
        [ -5.8632,   1.8543,  -2.4489, -10.2632,  -2.5903]])
<class 'torch.Tensor'>
[2, 1, 2, 1]
target tensor([2., 0., 4., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.0808)
evaluate
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.2310, -0.7152, -1.9400, -5.9043, -2.8211],
        [-3.1452,  0.1315, -0.4792, -5.3221, -1.1039],
        [-2.1132,  1.7478, -0.6906, -4.2384, -3.4156],
        [-6.6723, -1.5512,  1.1057, -6.3857, -3.5783]])
<class 'torch.Tensor'>
[1, 1, 1, 2]
target tensor([2., 0., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.6931)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.1604, -0.6447, -3.2170, -7.5566, -1.7571],
        [-3.0865,  0.8860,  1.6999, -3.9521, -3.9865],
        [-5.3107, -0.8130,  1.7884, -3.8087, -5.7540],
        [-2.8273,  1.0662,  0.9928, -4.3053, -4.1727]])
<class 'torch.Tensor'>
[1, 2, 2, 1]
target tensor([3., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.1494)
evaluate
input tensor([[[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-0.2197, -0.7380,  0.0750, -6.8243, -5.1549],
        [-4.8327,  0.5993,  3.3786, -4.3398, -3.0374],
        [-6.0821, -2.5036, -2.8562, -7.2025, -0.6020],
        [-5.0670,  0.3867, -1.4563, -7.5598, -0.3859]])
<class 'torch.Tensor'>
[2, 2, 4, 1]
target tensor([0., 3., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.4188)
Test: [10/13]	Time 0.519 (0.513)	Loss 3.4188 (2.8172)	Accuracy 0.000 (31.818)
evaluate
input tensor([[[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -2,  ...,  -4,   5,  -5],
         [  3,  -1,   0,  ...,  -1,   0,   4],
         [  0,   0,   0,  ...,   0,   0,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -1,  ...,   2,  -3,   4],
         [  2,  -1,   0,  ...,   0,  -3,   2],
         [  2,  -1,  -4,  ...,   0,  -4,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  2,   3,   1,  ...,  -3,  -4,   0],
         [  1,   1,   0,  ...,   0,   6,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-2.8152,  1.0180, -1.8889, -6.2670, -1.2737],
        [-6.9921,  0.5896,  1.0581, -2.8904, -1.4043],
        [-4.6130,  0.3613, -3.5301, -8.9366, -2.6050],
        [-4.7872,  0.8971, -3.4075, -7.0770, -3.0473]])
<class 'torch.Tensor'>
[1, 2, 1, 1]
target tensor([1., 2., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.6067)
evaluate
input tensor([[[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.9286,  3.1120,  1.2367, -5.9290, -3.6089],
        [-6.9569, -0.8036, -2.5777, -7.6098, -1.8250]])
<class 'torch.Tensor'>
[1, 1]
target tensor([2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.1106)
epoch: 11
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  6.2378,  -2.1391,  -4.6888, -10.7652,  -1.5588],
        [-10.8260,  -1.7350,  16.8618,  -6.2144, -11.5975],
        [ -3.8997,   0.3126,  10.1509, -13.5951,  -5.0177],
        [  4.3777,  -7.8153, -17.2517, -10.6292,   3.9880]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 0]
target tensor([0, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.1295, grad_fn=<NllLossBackward0>)
Epoch: [11][0/25]	Time 1.883 (1.883)	Data 0.024 (0.024)	Loss 0.1295 (0.1295)	Accuracy 100.000 (100.000)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  5.7452,  -9.3997,  -3.7554, -17.1212,  -5.5945],
        [ -7.7138,  -0.6133,  10.9406, -12.6902,  -3.1878],
        [ -1.2794,  -0.1554,  16.9697, -19.0032,  -1.2609],
        [ -4.2098,  -7.9126,  -6.2709,   8.3285, -16.5705]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 3]
target tensor([0, 2, 2, 3])
<class 'torch.Tensor'>
loss
tensor(2.5391e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   0,   0,  ...,  -4,   3,  -1],
         [  0,   1,   1,  ...,   6,   1,  -1],
         [  1,   2,   3,  ...,   0,  -3,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -2,  ...,   0,  -3,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [  2,   2,   3,  ...,  -4,   2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,  -1,  ...,  -1,  -1,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [ -1,   1,   0,  ...,   2,  -3,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -4.2383,  -3.4667,   7.4748, -12.8257,  -8.4337],
        [ -7.7696,  -5.0535,   8.0474,  -8.3641,  -4.1638],
        [ -1.3658, -10.0782, -13.2609, -12.3793,   9.8243],
        [ 11.8593,   1.3109, -10.6755, -12.0927,  -2.5977]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 4, 0]
target tensor([2, 2, 4, 0])
<class 'torch.Tensor'>
loss
tensor(1.8447e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.4504,  -0.4122,   0.0438, -16.1324,  20.2805],
        [ -2.0895,  -8.1214,   9.6948,  -2.3619,  -9.3802],
        [ -6.8248, -13.4869,  17.3850,  -9.3579,  -7.1103],
        [ -2.3157,  -1.9920, -11.5829,   3.1855, -16.0592]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 2, 3]
target tensor([4, 2, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0024, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.6516,  -9.1988,  -9.6249,   6.9600, -11.6418],
        [ -2.4077,  -6.5310,   8.2732, -12.2933,  -5.6580],
        [ -5.8231,  -5.3966,  -8.7708,   8.6452,  -4.1075],
        [-10.0216,   0.1842,  -4.7033,   8.7137,  -8.5622]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 3, 3]
target tensor([3, 2, 3, 3])
<class 'torch.Tensor'>
loss
tensor(5.6917e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.4992,   6.4677, -13.5018, -11.9207,   8.5215],
        [  3.3136,  -4.6364,  -2.9022,  -9.6636,  -7.2664],
        [  4.9397,   0.6413,  -3.6100,  -9.7022,  -6.7712],
        [ -6.3266,  12.3838,  -3.3438, -10.1805,  -0.8962]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 0, 0, 1]
target tensor([4, 0, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.0342, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-15.6926,  19.9932,  -3.8129, -11.8789,  -1.6846],
        [ -3.7075,  10.2188,   0.4857,  -7.2509,  -0.3523],
        [  0.2000,  -4.4413,  -1.0845, -11.6749,  -7.5486],
        [  5.9891,  -4.1714,  -5.4308,  -5.5769,  -5.6171]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 0, 0]
target tensor([1, 1, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.3842, grad_fn=<NllLossBackward0>)
train
input tensor([[[  5,  -3,   0,  ...,   1,   2,  -1],
         [  4,   0,   0,  ...,   0,  -3,  -1],
         [  1,  -1,   0,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   0,   2],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,  -1,   0,  ...,  -1,   0,   4],
         [  0,  -1,   0,  ...,   0,  -3,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-11.2216,   2.8965,   4.1261,   6.6396,  -7.6665],
        [ -8.0054,  -1.1293,  13.6233,  -3.5882,  -6.7454],
        [ -7.0398,  -2.2891,   8.2101,  -9.2224,  -4.5735],
        [ -1.5040,  -2.5623,   7.7079,  -5.6585,  -2.3207]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 2, 2]
target tensor([3, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0249, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.5575,  -8.2437,  -4.0287,  -0.2054,  -8.8261],
        [-10.9225,  -3.7441,  17.7277,  -4.2297,  -3.2988],
        [  3.1342,  -9.6452, -13.2272, -14.8561,  11.8471],
        [  4.5239,  -2.5806,  -4.2328,  -6.1993,   0.3882]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 4, 0]
target tensor([3, 2, 4, 0])
<class 'torch.Tensor'>
loss
tensor(0.9508, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.4661,   1.6043,   0.1438, -10.9255,  -4.2208],
        [ -2.2764,  -1.9756,   6.4782,  -9.2961,  -3.9269],
        [ -7.9467,  11.1848,  -1.0988,  -6.1428,  -7.3453],
        [ -9.5375,  10.6587,  -4.9058,  -8.6243,   0.1524]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 1, 1]
target tensor([0, 2, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0440, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-15.2189, -10.9804,  -6.3639,  10.8185,  -5.9825],
        [ -0.4544,   6.9728,  -0.5578,  -7.3094,   3.0733],
        [ -4.3959,  -3.1541,   2.7503,  -4.5152,   1.2072],
        [ -1.5500,  10.4628,   2.3393,  -6.9336,  -4.4430]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 2, 1]
target tensor([3, 1, 4, 1])
<class 'torch.Tensor'>
loss
tensor(0.4404, grad_fn=<NllLossBackward0>)
Epoch: [11][10/25]	Time 1.738 (1.760)	Data 0.027 (0.023)	Loss 0.4404 (0.1828)	Accuracy 75.000 (93.182)
train
input tensor([[[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  5.5226,  -1.5121,  -0.4734,  -7.3273,  -1.2884],
        [ -3.8488,  -3.8177,  12.1152, -25.7365,   3.4869],
        [ -2.8283,  -5.7032,   8.5183,  -6.1615,  -6.0964],
        [ -5.1471, -14.0991,  -7.6849,  19.4336,  -6.8437]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 3]
target tensor([0, 2, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0012, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.9320,  -1.9522,  -7.8767,  -9.5465,   1.8124],
        [ -7.6331,  -8.2743,  -2.9470,  11.3713,  -4.7455],
        [ 15.2434,  -7.9529, -17.6453, -11.8525,   1.7560],
        [-16.7509,  -7.2814,   9.1978,  -4.0502,  -4.0961]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 0, 2]
target tensor([0, 3, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0290, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  7.6157,  -0.4906,  -0.9224,  -6.5628,  -2.5989],
        [-15.2312,   1.7829,  13.1544,  -7.0449,  -4.8933],
        [ -2.1611,  11.4802,  -7.7737, -10.4729,  -8.5001],
        [  3.1001,   1.4540,  -4.3521, -10.3728,  -1.4215]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 1, 0]
target tensor([0, 2, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0466, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  6.2272,  -6.0444,  -4.8583, -12.2128,  -3.0023],
        [-12.9930,  -7.5709,  12.8136,  -4.3969, -12.4250],
        [ -6.3766,  -7.3097, -10.1363,   6.6878,  -5.1875],
        [ -5.6061,   7.0305,   4.9255,  -2.3827,  -4.6700]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 3, 1]
target tensor([0, 2, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.0288, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  6.1778, -11.2607, -10.5990,  -9.9092, -14.8024],
        [-11.4250,  -2.9248,  10.6620,  -1.3508, -10.3035],
        [ -9.9993,  -4.7581,  11.7245, -13.8034,  -1.0111],
        [ -9.2401,  -7.0360,  15.9332,  -2.1849,  -8.7744]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 2]
target tensor([0, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(2.6524e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.0802,  -1.7133,  -7.0499,  -9.1860,  16.8858],
        [ -3.0984,   4.4477,  -0.8511,  -4.0885,  -1.7513],
        [ -2.9184,  -0.2721, -15.0247,  -8.9020,  17.2530],
        [ -4.8800,  10.7603,  -9.8726,  -8.6532,  -4.0904]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 4, 1]
target tensor([4, 1, 4, 1])
<class 'torch.Tensor'>
loss
tensor(0.0019, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-7.9540e+00, -3.9387e+00, -1.3646e+00, -1.0461e+01, -6.9039e+00],
        [-2.2391e+00, -3.6711e+00, -8.0397e+00,  4.2059e+00, -4.1890e+00],
        [-9.3990e+00, -1.3568e-02,  8.3727e-01,  1.4209e+01, -6.6888e-01],
        [-8.9453e+00, -4.0233e+00, -2.2686e+00,  9.0210e+00, -4.7307e+00]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 3, 3]
target tensor([2, 3, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.0202, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  6,   0,   0,  ...,  -3,   4,   2],
         [  2,   0,  -1,  ...,  -1,   2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   4,   0,  ...,   2,   5,   1],
         [  3,   0,   0,  ...,   1,  -3,   0],
         [  1,  -1,   0,  ...,   0,  -6,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   0,   0,  ...,  -4,   3,  -1],
         [  0,   1,   1,  ...,   6,   1,  -1],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -6.6028,  12.8304,  -3.7255, -10.1266,  -1.9716],
        [-11.3457,  17.7572,  -5.8200, -10.9783,   8.2095],
        [-15.4712,  -2.9006,  10.7919,  -4.1564,  -7.4136],
        [-10.8554,  -2.8619,  -6.9834,  -1.0805,   7.9469]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 4]
target tensor([1, 1, 2, 4])
<class 'torch.Tensor'>
loss
tensor(5.3492e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 5.8402, -4.4485, -6.6709, -7.2418,  0.6520],
        [-9.2271,  3.9349, -6.8685, -5.5084,  0.1163],
        [ 3.7221, -9.0753, -0.6074, -5.9022, -4.2087],
        [ 3.7249, -8.5212, -7.4949, -6.3410, -0.0516]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 0, 0]
target tensor([0, 1, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.0159, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.5344,  15.3339,  -2.1689, -12.1648,  -4.8840],
        [-11.0854,  -7.3732,  -3.0329,   9.0611,  -6.0485],
        [ -6.6311,  -4.3705,  -4.5872,   8.7823,  -2.8221],
        [-15.1197,  18.8112,  -2.2852,  -3.1168,  -5.4789]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 3, 1]
target tensor([1, 3, 3, 1])
<class 'torch.Tensor'>
loss
tensor(4.7087e-06, grad_fn=<NllLossBackward0>)
Epoch: [11][20/25]	Time 1.838 (1.744)	Data 0.012 (0.023)	Loss 0.0000 (0.1026)	Accuracy 100.000 (96.429)
train
input tensor([[[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.0807,  -2.4791,   6.3460,  -4.1906,   1.2523],
        [ -3.1073,  -7.0289,   4.0841,  -3.7614,  -2.1607],
        [ -0.2432,  -5.9105,  -2.3583,  -2.0733,  -6.9936],
        [-10.4109,  11.7177,  -5.1381,  -5.8761,   2.7000]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 0, 1]
target tensor([2, 2, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.0652, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.6640,  16.0840,  -8.2105,  -8.5295,  -2.9198],
        [ -5.6494,  -0.3502,   5.2432,  -4.5890,  -4.4609],
        [ -6.9870,   5.9940,  -9.0499,  -7.5321,   0.3543],
        [-11.1497, -10.7790,  12.5017,   0.2659,  -1.9365]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 1, 2]
target tensor([1, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0019, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.6599,  10.9000,  -1.8991,  -6.2753,   3.5852],
        [-15.0671,  -3.3090,   5.8883,  -3.6793,  -3.9690],
        [ -7.3243, -13.4555,   7.8189,  -2.0885,  -9.2198],
        [ -6.0902,  -8.1988,   0.7767,   8.8685, -12.1443]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 3]
target tensor([1, 2, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.3164, -10.3555,   2.1370,  -2.4652,   4.9032],
        [ -9.8028, -17.0523,  12.1547,   0.5122,  -2.7471],
        [-14.8572,   4.8517,  -8.2840,  -6.4569,  -0.6945],
        [ -8.7360,   7.8288,  -0.9485,  -5.6221,  -2.4824]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 1, 1]
target tensor([2, 2, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.7080, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.5511, -0.3448,  0.9122, -0.9266, -2.3338],
        [-8.9247, -5.3253, -0.5876,  1.2663, -2.5987],
        [-9.1163, -3.7890,  1.5973,  0.2276, -3.8373],
        [-8.3491, -9.0289, -0.3942,  2.0298, -4.2170]])
<class 'torch.Tensor'>
[2, 3, 2, 3]
target tensor([2., 4., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.7920)
Test: [0/13]	Time 0.534 (0.534)	Loss 1.7920 (1.7920)	Accuracy 50.000 (50.000)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.1473, -1.3870, -0.4887, -1.6905, -2.7558],
        [-7.6200, -4.5654,  1.3099, -0.3749, -3.9093],
        [-8.8885, -2.6887, -0.8024,  0.1493, -0.1579],
        [-5.5197, -1.7720,  2.3138,  0.4316, -2.7080]])
<class 'torch.Tensor'>
[2, 2, 3, 2]
target tensor([0., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.0559)
evaluate
input tensor([[[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.4097,  -4.4299,  -1.1844,   0.8400,  -2.6518],
        [ -4.9492,  -0.9988,  -1.4114,   0.1613,  -2.3811],
        [ -7.6627,  -4.3861,   1.2757,   2.0018,  -4.5954],
        [ -7.0611,  -2.1732,   0.0754,  -0.0682,  -0.6514]])
<class 'torch.Tensor'>
[3, 3, 3, 2]
target tensor([0., 2., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.6802)
evaluate
input tensor([[[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.7407, -3.3878,  3.2615, -0.5899, -1.7053],
        [-9.5118, -2.1987,  0.9868,  2.6157,  0.0663],
        [-2.4127, -2.6394, -0.0318, -1.8912, -1.9651],
        [-3.9368, -2.0784, -0.2334, -0.5053, -5.6857]])
<class 'torch.Tensor'>
[2, 3, 2, 2]
target tensor([2., 2., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.7957)
evaluate
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.4798, -4.8805, -2.7835, -0.2980, -1.8840],
        [-5.2667, -0.9132,  1.1218, -0.9176, -0.9939],
        [-7.7984, -4.9142, -2.3832,  0.1425, -1.2062],
        [-7.5717, -3.7405, -3.3149, -1.8759, -1.4733]])
<class 'torch.Tensor'>
[3, 2, 3, 4]
target tensor([2., 2., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.7393)
evaluate
input tensor([[[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,  -1,   0,  ...,   7,   3,   0],
         [  2,  -1,  -1,  ...,   2,   6,  -2],
         [  0,   0,  -2,  ...,  -1,   0,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  5,  -1,   0,  ...,   7,   3,   0],
         [  5,   0,   0,  ...,   6,  -1,   7],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         [  1,  -1,  -1,  ...,   0,   2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-10.5490,  -2.9405,  -1.9238,  -2.9412,  -1.8109],
        [ -5.4706,  -2.2655,   1.2039,   0.8345,  -3.7222],
        [ -8.1765,  -4.3575,   1.2927,  -0.0311,  -4.2971],
        [ -6.1929,  -2.4379,   0.3517,  -1.2066,  -2.6363]])
<class 'torch.Tensor'>
[4, 2, 2, 2]
target tensor([2., 2., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.8599)
evaluate
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.8943, -2.0287,  0.6431,  0.6398, -2.8933],
        [-4.8064, -2.1053, -0.2207, -1.1818, -3.8860],
        [-6.0011, -1.0111,  0.1204,  0.3641, -4.1368],
        [-5.9812, -3.4265,  0.2412,  0.4917, -0.9011]])
<class 'torch.Tensor'>
[2, 2, 3, 3]
target tensor([2., 1., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.8068)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-7.9588, -3.3654, -0.8451, -1.7925,  1.1574],
        [-5.1200, -5.3071, -3.3357, -1.5278, -2.6655],
        [-9.5559, -6.5161, -3.1494, -0.2507,  0.0994],
        [-7.3705, -4.1981, -0.6761,  0.1449, -3.6705]])
<class 'torch.Tensor'>
[4, 3, 4, 3]
target tensor([2., 0., 2., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.5535)
evaluate
input tensor([[[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-7.6356, -1.8342,  1.2568,  0.0746, -3.1820],
        [-5.4567, -4.4764, -2.3927,  0.7968, -1.8418],
        [-8.3127, -1.7269, -2.0951, -1.2693, -2.8172],
        [-9.2366, -3.4538, -4.2561,  2.5406, -2.9671]])
<class 'torch.Tensor'>
[2, 3, 3, 3]
target tensor([0., 0., 1., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.1595)
evaluate
input tensor([[[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   3,   1,  -6],
         [  1,  -1,  -1,  ...,  -2,   0,   1],
         [  1,  -1,  -1,  ...,  -1,  -3,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -2,  -1,  ...,   2,  -4,  -5],
         [  2,   0,  -2,  ...,  -3,   4,  -5],
         [  1,   1,  -4,  ...,  -4,   2,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   1,  -1,  ...,   2,  -3,  -2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,   0,   1,  ...,   2,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-5.2922, -2.3407, -1.7463, -1.0193, -0.4004],
        [-4.1084, -1.7240, -3.2464, -1.0768, -1.3180],
        [-4.8524, -4.3282,  0.0772, -0.5019, -1.0642],
        [-8.1919, -2.9569,  0.0442, -0.5496,  0.0832]])
<class 'torch.Tensor'>
[4, 3, 2, 4]
target tensor([1., 0., 3., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.1744)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.9023,  -3.4025,  -3.2234,  -0.6736,  -1.5441],
        [ -6.9701,  -2.3013,   3.1479,   0.7598,  -1.1075],
        [ -2.7906,  -3.7123,  -0.3025,  -2.2902,  -4.1456],
        [-10.2490,  -4.6735,  -1.5926,   0.0756,  -1.4167]])
<class 'torch.Tensor'>
[3, 2, 2, 3]
target tensor([2., 3., 0., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.1430)
Test: [10/13]	Time 0.495 (0.526)	Loss 2.1430 (2.7964)	Accuracy 25.000 (25.000)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.0951,  -5.3412,  -2.5727,   0.2154,  -0.6174],
        [ -8.9043,  -4.9743,   1.0308,  -0.8935,  -2.0456],
        [ -7.3646,  -6.3498,  -1.6031,  -2.3980,  -0.5310],
        [-10.6121,  -4.8318,  -2.5097,  -0.8185,  -0.9805]])
<class 'torch.Tensor'>
[3, 2, 4, 3]
target tensor([3., 1., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.0600)
evaluate
input tensor([[[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.8960,  -0.8699,  -0.0299,  -0.8967,  -0.7551],
        [-10.5512,  -3.1219,  -0.5915,  -0.6580,  -0.7068]])
<class 'torch.Tensor'>
[2, 2]
target tensor([1., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.3577)
epoch: 12
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.8928,  -1.1492,  -3.0753,  -6.1368,   6.4583],
        [  2.8127,  -9.3329,  -4.8964,   0.7558,  -6.3264],
        [-11.7588,  -9.5082,  -2.3406,   1.3970,   0.0775],
        [-17.2823, -16.4069, -13.1042,  17.8626,   5.4505]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 0, 3, 3]
target tensor([4, 0, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.0942, grad_fn=<NllLossBackward0>)
Epoch: [12][0/25]	Time 1.780 (1.780)	Data 0.024 (0.024)	Loss 0.0942 (0.0942)	Accuracy 100.000 (100.000)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.8649,   7.1237,   0.3111,  -5.0234,  -5.5918],
        [-12.3224, -14.2986,  -6.7133,  17.4648,  -1.7760],
        [  7.0235,  -7.1484,  -3.4105,  -6.0880,  -3.9424],
        [  3.5133,  -6.7099,  -2.3021,  -1.8357,  -4.7292]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 0, 0]
target tensor([1, 3, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.0023, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.4270,   2.1136,  -0.4295,  -1.5127,  -4.3754],
        [ -3.1901,   7.4295,  -0.8704,  -2.0396,  -3.8771],
        [-11.2535,  -6.0273,  10.9551,   2.1512,  -7.1815],
        [ -9.4379, -12.2621,  -3.5954, -13.1354,  15.4766]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 4]
target tensor([1, 1, 2, 4])
<class 'torch.Tensor'>
loss
tensor(0.0255, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.6057,  -5.9845,  17.5957,   2.0004, -12.4783],
        [-14.2697,  -6.5822,  13.5186,  -7.0476,   5.5280],
        [ -9.6758,  -0.3553,  -2.8108,  -6.8368,  19.4990],
        [-11.9943, -10.4117,  15.3862,  -7.5689,  -7.3637]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 4, 2]
target tensor([2, 2, 4, 2])
<class 'torch.Tensor'>
loss
tensor(8.4684e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.8347,  21.0975,   0.9609,  -8.5158,  -0.6044],
        [ -8.2805,  -0.5735,  -6.7691,  -6.2243,  20.8542],
        [ -8.7810,  -5.9043,  16.9894,  -0.9518, -10.6220],
        [-18.0217,  -9.9089,  -3.7816,  12.1138,  -7.1603]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 4, 2, 3]
target tensor([1, 4, 2, 3])
<class 'torch.Tensor'>
loss
tensor(2.9802e-08, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.9351,  -1.7478,   8.4856,   0.8761,  -6.7957],
        [  1.8350, -12.0162,   1.4915,  -1.0063,  -7.4801],
        [ -3.8018,   4.6467,   4.6154,  -0.6336, -12.2131],
        [-15.8066, -10.1175,  11.3021,  -7.9778,  -5.8494]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 1, 2]
target tensor([2, 0, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.3126, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.6791,   4.2907,   0.4514,  -3.8720,  -9.1243],
        [  7.5196,  -7.8739,  -6.9166,  -0.0730,  -9.4798],
        [-11.3863,  -8.5687,  20.3958,   0.5768, -10.4825],
        [  6.1138,  -4.0523,  -5.3857,  -1.2114, -12.9773]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 2, 0]
target tensor([1, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0057, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  4.0866,  -2.5877,  -1.5192,   1.0566,  -2.4946],
        [ -9.6316, -12.1408,   0.0353,  22.3066, -10.9152],
        [ -8.2270,   8.0743,  -5.9185,  -2.7973,  -5.5903],
        [  8.2461,  -9.9075,  -7.8317,  -2.8325,  -5.8341]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 1, 0]
target tensor([0, 3, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0133, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.6361, -10.6507,  16.3625,  -2.3055,  -5.5654],
        [-12.5180,  19.5223,  -9.8145,  -1.0319,   0.0689],
        [ -7.5706,  -1.6116,  -2.3190,  -5.8814,   7.1307],
        [-13.0328,  -7.9645,   7.4149,  -3.6065,  -8.2573]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 4, 2]
target tensor([2, 1, 4, 2])
<class 'torch.Tensor'>
loss
tensor(6.4425e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.5503,  -5.3111,  13.3345,  -2.6657,  -9.7061],
        [ -5.8298,   9.6502, -10.9306,   3.4317, -14.1140],
        [  5.6263, -14.8696,  -2.7581,   2.2437, -12.8128],
        [-11.8147,  -8.4159,   5.6655,  -5.1596,  -5.6582]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 0, 2]
target tensor([2, 1, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0089, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.9663,  -5.2074,   8.8616,  -2.6847, -11.5749],
        [  8.0718,  -7.2622,  -8.0317,  -0.5249, -22.8925],
        [-12.6813,   8.1339,  -2.1977, -11.5480,   1.5731],
        [  3.6224,  -3.4077,  -4.8917,  -3.5631,  -7.9306]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 1, 0]
target tensor([2, 0, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0009, grad_fn=<NllLossBackward0>)
Epoch: [12][10/25]	Time 1.639 (1.824)	Data 0.012 (0.022)	Loss 0.0009 (0.0421)	Accuracy 100.000 (100.000)
train
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-17.6759,  -7.2038,  -3.9303,  11.2123, -12.7684],
        [  0.3878,  -6.6374,  -3.8913,  -7.8037, -14.9777],
        [-15.0320,   1.1924,  13.7358,   0.7264, -21.7898],
        [  3.4320,  -7.2246,   1.3043,   3.1047, -14.3098]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 2, 0]
target tensor([3, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.1562, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.3178,  -0.6168,  -9.6087,  -7.9007,  -8.1858],
        [ -2.2772,  -3.6189,   2.4040,   0.9674,  -8.2026],
        [ -1.8681,  -6.3825,  -6.9138,   9.5252, -14.4517],
        [ -0.3764, -12.0618,  -9.9576, -11.4971,  12.4762]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 3, 4]
target tensor([1, 2, 3, 4])
<class 'torch.Tensor'>
loss
tensor(0.0568, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.8517e+01,  1.9656e+01, -7.9625e+00, -2.0223e-01, -1.4289e+01],
        [-8.0900e+00,  2.2954e+01, -4.1387e+00, -1.1237e+01, -5.5465e+00],
        [-1.4206e+01,  1.1803e+01,  1.5189e-01,  9.2463e-01, -7.2499e+00],
        [-6.7047e+00,  9.6048e+00,  4.4494e-03, -2.5293e+00, -7.7279e+00]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 1, 1]
target tensor([1, 1, 1, 1])
<class 'torch.Tensor'>
loss
tensor(2.5182e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,   0,  -2,  ...,   2,  -4,   0],
         [  0,   1,  -1,  ...,  -5,   4,   0],
         [  1,   2,  -2,  ...,  -6,  -5,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -3,  -1,  ...,  -4,   5,   8],
         [  2,   0,  -2,  ...,   2,  -2,  -4],
         [  3,  -1,  -2,  ...,   0,   3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  6,  -2,   1,  ...,   0,  -1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [ 11,  -3,   0,  ...,   3,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-19.3330,   1.7708,  12.4107,  -5.9298, -15.0214],
        [ -8.2124,  -0.6927,   4.6725,  -3.3396,  -7.8601],
        [ -9.2857,   6.2420,  -0.1119,   1.6242,  -7.2061],
        [ -6.2388,  -6.3494,  -9.5683,   8.6977, -10.5515]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 3]
target tensor([2, 2, 1, 3])
<class 'torch.Tensor'>
loss
tensor(0.0041, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.3888,  -6.7613,   9.7954,  -2.5963,  -4.7703],
        [ -3.5917,  -2.9123,  -1.1496,   8.3486,  -9.3396],
        [ -7.3230,  15.9899,  -6.5636,  -8.1438,  -2.0290],
        [ 10.0045,  -2.8453,  -3.1144,  -7.9008, -11.9889]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 1, 0]
target tensor([2, 3, 1, 0])
<class 'torch.Tensor'>
loss
tensor(2.5957e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.2080,  -5.3107,   0.5533,  13.0828, -16.4472],
        [ -9.3232,  10.7891,   2.4378,  -5.2915,  -9.4273],
        [ -7.8800,  -4.0148,   7.9268,  -4.9798, -12.2099],
        [  7.8293,  -6.7605,  -1.9347,  -6.6405, -10.8235]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 2, 0]
target tensor([3, 1, 2, 0])
<class 'torch.Tensor'>
loss
tensor(7.6853e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[  3,  -2,   4,  ...,   1,  -4,   1],
         [  1,   0,   0,  ...,   3,   0,  -6],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,   0,  ...,   0,   6,  -2],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         [  0,   0,   2,  ...,   4,   1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   0,   0,  ...,   2,   0,  -8],
         [  0,   2,  -2,  ...,  -3,   4,  -2],
         [  2,  -2,  -1,  ...,   2,  -3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  2.6435,  -6.5894,   0.7485,  -3.2261, -11.3327],
        [ -5.9716,  -3.1470,  15.5720,  -7.5809, -11.4163],
        [ -4.2331,  -4.9763,   8.3842,  -0.4291, -10.1719],
        [ -7.5331,   1.3780,  -4.7698,  -1.0373,   1.8724]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 4]
target tensor([0, 2, 2, 4])
<class 'torch.Tensor'>
loss
tensor(0.1633, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.8854,  -0.4838,   5.8164,  -4.3207,  -9.7824],
        [-11.2270,  -7.2670,  10.1966,  -5.4870, -12.9985],
        [ -4.2881, -10.3125,  10.6955,  -1.3762, -11.6412],
        [ -1.4067,  -6.8779,  16.6301,  -7.1243, -11.9480]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0005, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.2413,  -3.2694,   1.4795,  13.1506, -15.7186],
        [  3.9572,  -6.3987,  -2.0841,  -5.4995,  -9.3897],
        [ -0.2120,  -1.5139,  -3.1864,   4.1315, -10.3698],
        [ -6.5833,  -0.3534,  12.8909,  -2.4809,  -5.5005]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 3, 2]
target tensor([3, 0, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0049, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.9920,  -5.5987, -11.0045,  12.4764, -19.3585],
        [  1.3639,  -7.8274,  -2.0466,  -5.7788, -11.0782],
        [ -4.0518,   7.2048,  -0.8351,   0.0398,  -8.7014],
        [ -3.9112,  -8.1270,  -5.7982,   7.6602, -21.6620]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 1, 3]
target tensor([3, 2, 1, 3])
<class 'torch.Tensor'>
loss
tensor(0.8612, grad_fn=<NllLossBackward0>)
Epoch: [12][20/25]	Time 1.680 (1.842)	Data 0.024 (0.023)	Loss 0.8612 (0.0815)	Accuracy 75.000 (98.810)
train
input tensor([[[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.9868e+00,  3.5362e+00, -3.1231e+00,  2.0222e+00, -1.3153e+01],
        [ 2.7805e+00, -7.1981e+00, -4.9000e+00,  7.1863e+00, -1.1035e+01],
        [-3.9489e-01, -1.1193e+01, -7.8124e-02,  8.9958e-03, -7.7940e+00],
        [-8.0809e+00, -6.0622e+00, -3.7112e+00,  1.0337e+01, -1.1285e+01]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 3, 3]
target tensor([1, 3, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.3123, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.4944,   3.4505,   2.2906,  -3.8301, -10.9764],
        [ -7.8692,  -7.0675,  -7.7829,  -4.0673,  13.5101],
        [ -5.0671,  -2.5878,   8.2556,  -3.9074,  -5.0482],
        [-13.2356,  -8.2449,  10.6016,  -1.6846, -14.4319]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 4, 2, 2]
target tensor([1, 4, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0684, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.5953, -15.8847,   5.9328,  12.0813, -18.7116],
        [  4.3136,  -3.5914,  -1.1610,  -3.6360,  -8.4869],
        [  0.2924,  -4.6990,  -3.0187,  -4.5028,  -1.7217],
        [ -9.6946,  -4.7347,  17.2160, -15.3497,  -9.3155]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 0, 2]
target tensor([3, 0, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0442, grad_fn=<NllLossBackward0>)
train
input tensor([[[  0,   1,   1,  ...,   9,   3,  -2],
         [  4,  -1,   0,  ...,  -1,   2,   2],
         [ -1,   0,  -1,  ...,  -3,   8,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   3,   4,  ...,   3,  -4,  -2],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-20.7407,   0.8264,  23.0094,  -1.0498,  -7.9520],
        [  7.1529,  -5.8997,  -7.2549,  -4.1581, -11.7014],
        [ -2.9095,  -5.3217,   7.3062,  -3.4656,  -6.7587],
        [ -7.4850,   8.3611,   6.5920,  -4.2274,  -4.0343]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 1]
target tensor([2, 0, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0394, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-8.1190, -4.5278,  2.0152, -4.0183, -6.9418],
        [-7.1315, -0.1983,  5.3652, -2.4955, -6.9903],
        [-6.4167, -0.9084,  4.7117, -3.3444, -5.9877],
        [-4.5924, -2.9555,  2.2242, -3.8834, -8.8127]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 1., 4., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.0710)
Test: [0/13]	Time 0.473 (0.473)	Loss 4.0710 (4.0710)	Accuracy 50.000 (50.000)
evaluate
input tensor([[[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,  -2,  -2,  ...,   0,   0,  -3],
         [  1,  -2,  -1,  ...,   2,  -4,  -5],
         [  2,   0,  -2,  ...,  -3,   4,  -5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  6,  -2,   0,  ...,   1,   0,   2],
         [  1,  -1,   0,  ...,   0,  -6,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         [  1,  -1,  -1,  ...,   0,   2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -9.1976,  -0.1186,   4.9846,  -6.0755,  -9.8600],
        [ -3.1462,  -3.2599,   3.1374,  -4.9861, -10.3689],
        [ -6.5573,   0.3445,   3.6909,  -4.6160,  -9.8722],
        [ -4.5149,  -0.7277,   3.8636,  -3.1553,  -8.0326]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 0., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.4215)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.5867,  -3.0527,   2.9985,  -2.5811,  -6.8423],
        [ -5.2684,   1.0098,   4.5610,  -3.2940,  -7.6699],
        [ -5.5849,  -4.3132,   2.2781,  -4.6536,  -6.4736],
        [ -9.2853,  -2.0853,   4.7169,  -2.3627, -10.2552]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([3., 2., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.8713)
evaluate
input tensor([[[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.5040,   1.3198,   5.7448,  -4.5110,  -7.9700],
        [ -4.3999,  -0.2058,   3.6958,  -2.5505,  -8.6665],
        [ -6.2291,  -2.0686,   5.2774,  -0.9431, -10.3316],
        [ -4.8322,  -0.7576,   6.2501,  -2.3347,  -6.5930]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 2., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.2619)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.3830, -0.9510,  4.6632, -2.2541, -7.2413],
        [-2.2988,  0.4228,  1.8673, -3.7061, -7.4610],
        [-6.2751, -1.8749,  4.5947, -2.9048, -9.4372],
        [-8.7735, -2.9342,  3.8682, -4.4929, -9.4860]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 0., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.2368)
evaluate
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.4511, -0.6275,  2.3075, -2.8899, -9.0677],
        [-7.1414, -2.6168,  4.4252, -2.4492, -8.8764],
        [-5.3045, -1.2649,  4.2403, -4.8638, -5.4458],
        [-2.2390,  0.3762,  2.3244, -4.1262, -7.3354]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 4., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.2538)
evaluate
input tensor([[[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.9158,  -2.4725,   3.5904,  -3.0734,  -5.7880],
        [ -5.2100,  -1.0614,   2.9468,  -4.4324,  -9.1512],
        [ -7.2876,  -0.7591,   2.3521,  -0.9877, -11.3470],
        [ -1.1258,  -1.2249,   1.1553,  -3.5765,  -5.2794]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([3., 2., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.7181)
evaluate
input tensor([[[  3,   0,   0,  ...,  -3,   0,  -2],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         [  1,   2,   2,  ...,  -3,   0,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,   0,  ...,   0,  -6,  -4],
         [  5,  -1,   0,  ...,   7,   3,   0],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -2,  ...,  -4,   5,  -5],
         [  3,  -1,   0,  ...,  -1,   0,   4],
         [  0,   0,   0,  ...,   0,   0,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-5.0321, -0.4950,  3.5141, -3.0285, -5.6823],
        [-3.2643, -0.4606,  2.6842, -4.1803, -6.0987],
        [-3.5146, -2.5734,  2.9747, -2.0845, -8.4734],
        [-8.2220, -0.2925,  5.3980,  0.3578, -5.9983]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 1., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.4325)
evaluate
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-8.3550, -0.6086,  5.5012, -4.6509, -8.9393],
        [-5.7183, -2.8817,  4.6308, -2.7824, -8.4459],
        [-4.6501,  0.4719,  3.4781, -2.4111, -9.1963],
        [-5.2477, -0.7868,  2.7586, -4.7243, -9.3237]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 2., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.3558)
evaluate
input tensor([[[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.6819,  -2.6290,   5.3279,  -3.7355,  -8.8383],
        [ -8.4009,  -2.2981,   3.8210,  -3.6623,  -9.0646],
        [ -7.4150,  -1.5534,   6.2221,  -2.8036, -10.5308],
        [ -5.9018,  -2.0031,   4.0920,  -2.8094,  -9.6627]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 3., 2., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.3005)
evaluate
input tensor([[[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.6554e+00, -2.5971e-01,  3.4480e+00, -1.9546e+00, -8.2778e+00],
        [-6.1005e+00, -1.3959e-03,  4.5158e+00, -2.4940e+00, -8.0923e+00],
        [-3.3993e+00, -3.2590e-01,  2.7287e+00, -3.1262e+00, -7.7520e+00],
        [-6.7339e+00, -6.7838e+00,  4.8130e+00, -1.5982e+00, -1.1681e+01]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 0., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.4412)
Test: [10/13]	Time 0.500 (0.518)	Loss 3.4412 (4.6695)	Accuracy 50.000 (36.364)
evaluate
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.1584,  0.4394,  3.2694, -2.7414, -4.7716],
        [-5.7854, -1.1984,  7.6558, -2.8576, -7.5229],
        [-5.9412, -2.2157,  2.9693, -3.1182, -7.8779],
        [-3.4904,  0.5674,  1.9791, -2.1980, -7.9036]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.0756)
evaluate
input tensor([[[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.0498, -0.3109,  4.6435, -2.4629, -6.6006],
        [-1.1868, -1.8383,  2.9000, -4.8123, -8.7109]])
<class 'torch.Tensor'>
[2, 2]
target tensor([2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.0602)
epoch: 13
train
input tensor([[[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.5584, -13.5754,  -3.4805,  16.3939, -13.5929],
        [ -5.0101,  -8.3998,  17.8444, -10.2872, -15.1512],
        [ -2.5944,  10.5925,  -4.6188,  -8.9969,  -9.4738],
        [  7.2223,  -6.2234,  -3.0053,  -4.5429,  -8.0748]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 1, 0]
target tensor([3, 2, 1, 0])
<class 'torch.Tensor'>
loss
tensor(1.1921e-05, grad_fn=<NllLossBackward0>)
Epoch: [13][0/25]	Time 1.836 (1.836)	Data 0.024 (0.024)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
train
input tensor([[[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.6195,  -3.2264,  -2.6404,   2.4433,  -7.9296],
        [ -1.7569,   4.8436,   2.7537,  -7.3284,  -9.8824],
        [-10.8843,  15.1182,   4.0949, -10.6304,  -5.8229],
        [  1.9458,  -1.4592,   2.7873,  -3.9152,  -7.3402]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 1, 2]
target tensor([3, 1, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.3388, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   3,  -1,  ...,   0,  -3,   5],
         [  1,  -1,  -1,  ...,  -1,  -3,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  0,  -1,  -4,  ...,  -6,   0,  -1],
         [  2,  -1,   0,  ...,   0,   5,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   0,   0,  ...,   1,  -3,   0],
         [  2,   0,   0,  ...,  -2,   5,   4],
         [  2,   0,  -2,  ...,   0,   2,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-13.8496,   8.7636,   2.3079,  -9.7946,  -9.1410],
        [-12.6490,  14.1549,   4.2602,  -4.9875, -11.1833],
        [ -1.5926,  -3.9068,   7.2904,  -2.6316,  -6.7355],
        [-11.2465,  -5.5114,  19.3024,   2.3847, -15.1774]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 2]
target tensor([1, 1, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0005, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-16.1489, -12.8803,  15.2969, -11.5376,  -7.9759],
        [ -7.7175, -10.0614,  -0.1030,  -8.9289,  17.8846],
        [-20.5394,  -3.5466,   0.5734,  23.7721, -20.1476],
        [ -1.4361,   0.0345,   8.8341,  -3.0642, -14.0497]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 4, 3, 2]
target tensor([2, 4, 3, 2])
<class 'torch.Tensor'>
loss
tensor(4.8067e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.5584,  -4.0061,  17.2861,  -9.8874,  -9.6817],
        [  7.2638,  -1.8180,   1.7279,  -7.2649, -14.3979],
        [-11.6101, -17.8633,   1.8774,   7.4632, -19.0929],
        [-11.0232,  -5.4690,  21.8506, -10.6422,  -6.9436]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 3, 2]
target tensor([2, 0, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0019, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  7.7802,  -2.5672,   2.2564, -10.8881,  -8.9026],
        [ -7.1340,  -2.8809,   3.5649,  -6.3735,  -4.7575],
        [-12.3105,  -1.4572,   9.0359,  -7.5538,  -8.2557],
        [ -9.5929,  -5.0058,   3.7918,   4.1099, -21.7783]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 3]
target tensor([0, 2, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.1382, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-14.9417,  24.3781,   5.7829, -14.4024,  -4.7895],
        [-12.2737,   6.4635,   4.4528,  -9.2132,  -6.9584],
        [  5.3203,  -5.2557,   1.8472, -11.4975,  -4.4725],
        [ -7.8517,  -2.8772,  13.6925, -11.0681, -14.9302]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 0, 2]
target tensor([1, 1, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0391, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.7621,  -0.5368,  -8.3379,  -3.1817,  17.4760],
        [ -8.7964,  -4.4697,  -2.6474,  -4.7242,  -1.7132],
        [  1.7774, -12.1661,  -3.2573,  -8.2995, -17.2239],
        [ -8.4429,  -5.5061,   0.9842,   7.7068, -15.3951]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 4, 0, 3]
target tensor([4, 4, 0, 3])
<class 'torch.Tensor'>
loss
tensor(0.1044, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.3599,  -5.3846,  21.3921,  -4.8886,  -9.5816],
        [ -9.2593,  -1.7660,  17.1592, -13.2580,  -4.7626],
        [-10.5190,  -5.7846,  -5.6355,   5.4544,  -6.4117],
        [-10.2725,  19.9212,   3.7218, -12.4719, -13.4431]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 3, 1]
target tensor([2, 2, 3, 1])
<class 'torch.Tensor'>
loss
tensor(8.9107e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.4034,  21.6843,  -1.1799, -11.0003, -12.6746],
        [-22.3414,   3.8783,  23.4724,  -3.6948, -10.5409],
        [ 12.5220, -12.5857,  -7.1772,  -7.9214,  -5.1151],
        [ -7.1147,  19.8285,   4.4126, -12.9881,  -6.3308]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 0, 1]
target tensor([1, 2, 0, 1])
<class 'torch.Tensor'>
loss
tensor(5.9605e-08, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.1377,  -8.7449,   7.3369,  -8.6922,  -8.5051],
        [-20.2166,  -3.4109,  18.9577,  -7.7182,  -9.8043],
        [ -8.6156,  -3.8242,  -2.1353,  -4.0098,   5.9458],
        [ -0.8206,   7.9911,  -0.0823,  -5.9079,  -4.0256]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 4, 1]
target tensor([2, 2, 4, 1])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
Epoch: [13][10/25]	Time 1.736 (1.726)	Data 0.023 (0.019)	Loss 0.0002 (0.0566)	Accuracy 100.000 (97.727)
train
input tensor([[[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.6780,  33.3012,   0.1596, -15.0826,  -7.1015],
        [ -2.9190,   3.5593, -14.7330,  -5.6157,  20.9566],
        [ -7.2498,  -0.0882,   6.7119,  -7.1951,  -6.6766],
        [-11.0253,  -7.9929,  -9.5759,  11.9544, -10.7957]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 4, 2, 3]
target tensor([1, 4, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.3845,  -1.1543,  -2.3331,  16.9803,  -6.6809],
        [  5.3702,  -6.2219, -10.6402,  -6.1491, -12.0022],
        [ -2.3638,  12.7444,  -6.1008,  -5.4179,   1.4231],
        [ -3.7701,   6.1171,  -1.2457,  -4.9033,  -5.1492]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 1, 1]
target tensor([3, 0, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.6238,  -0.0430,   7.7885, -14.3068,  -6.8101],
        [  7.9448,  -2.3224,  -5.2892,  -4.7699,  -6.7269],
        [-13.0986,  -2.0974,  10.2982,  -1.9841,  -8.9606],
        [  5.4425,  -2.4594,  -3.1680,  -3.9960,  -3.5314]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 0]
target tensor([2, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [ -1,   3,   3,  ...,   0,   3,   3],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -1,  ...,   2,  -3,   4],
         [  2,   0,  -2,  ...,   0,   2,  -4],
         [  1,   0,  -1,  ...,  -5,   0,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -3,  ...,  -2,  -2,  -4],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  5.9880,  -1.0034,  -6.9181,  -3.1911,  -9.5765],
        [ -9.5780,  16.1564,  -8.6919,  -4.0769,  -9.2845],
        [-11.3228,  -4.3956,   6.7004,  -8.3412, -10.0050],
        [ -5.4525,  -2.9261,   7.5915,  -6.9251,  -3.7247]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 2, 2]
target tensor([0, 1, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.7670,  14.1450,  -7.0789,  -5.0017,  -9.3940],
        [ -8.7816,  -1.3119,  -4.8690,   2.4926, -14.0773],
        [ -4.0767,  -1.4796,  -1.8662,   7.6729,  -6.5465],
        [ -9.5548,  -2.9301, -10.4872,  13.6263, -13.9654]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 3, 3]
target tensor([1, 3, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.0057, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.7349,  12.6786,  -5.3422,  -3.6460,   1.8289],
        [ -1.3779,  11.7951,  -2.9277,  -9.1257,  -1.0012],
        [  3.8119,  -0.4258,  -0.7975,  -6.9499,  -4.1850],
        [-12.9526,  -0.1058,   6.2975,  -1.3979,  -6.4288]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 0, 2]
target tensor([1, 1, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0066, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.2481,  -4.0999,   1.5046, -16.4855,  14.5924],
        [ -7.0918, -13.6753,  12.0444,   0.4307,  -7.6683],
        [  2.4634,  -5.7808,  -4.0266,  -4.6529, -11.3100],
        [ -8.5110,  -1.8744,  -2.2708,   7.9424,  -3.6117]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 0, 3]
target tensor([4, 2, 0, 3])
<class 'torch.Tensor'>
loss
tensor(0.0007, grad_fn=<NllLossBackward0>)
train
input tensor([[[  2,  -2,  -1,  ...,   0,   0,   0],
         [  0,   1,   1,  ...,   6,   1,  -1],
         [  2,   0,   0,  ...,   7,   0,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -2,  ...,   0,  -3,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [  4,  -3,   5,  ...,   7,  -2,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -0.4157,  -2.4094,  -3.4593,  -7.2378,  -7.7828],
        [ -0.7714,   0.2167,  -4.1656,   6.5416,  -8.6094],
        [-11.3354,  19.0882,  -3.2808,  -7.9539,  -3.7509],
        [-11.5347,   5.9529,   9.9466,  -5.4318,  -2.8506]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 1, 2]
target tensor([0, 3, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0477, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.1428,  -2.0441,  -4.9450, -12.7549,   0.8997],
        [ -1.8082,  -6.3235,   6.1034, -10.2222,  -3.8439],
        [ -9.1404,  11.6705,  -4.4980,   0.4492,  -6.8293],
        [  3.6121,  -5.6814,  -9.5239,  -8.9240,  -7.3049]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 1, 0]
target tensor([4, 2, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0137, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.7021,  -4.6105,  15.0305,  -2.6699, -10.6113],
        [ 19.4973,   0.2380,  -3.0813, -13.1568,  -3.4569],
        [ -6.3642,  -5.4567,  -0.5420,  13.4312,  -6.9533],
        [  8.0575, -10.3763,  -3.8175,  -0.1612,  -8.5372]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 3, 0]
target tensor([2, 0, 3, 0])
<class 'torch.Tensor'>
loss
tensor(6.9340e-05, grad_fn=<NllLossBackward0>)
Epoch: [13][20/25]	Time 1.664 (1.725)	Data 0.012 (0.021)	Loss 0.0001 (0.0333)	Accuracy 100.000 (98.810)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.0692,  -0.8939,  10.2973,  -3.6620,  -3.7286],
        [ 10.1717,   0.9695,  -4.4251,  -4.8100,   3.3509],
        [ -5.9763,   4.0924,  -5.2637,  -9.3692,  10.2885],
        [-10.8952,  -8.7469,  10.9630,  -2.1378,  -9.3762]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 4, 2]
target tensor([2, 0, 4, 2])
<class 'torch.Tensor'>
loss
tensor(0.0008, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.4896, -1.1814,  6.1787, -3.2296, -3.6972],
        [ 8.7867, -1.2051, -7.0174, -4.9764, -5.5871],
        [-6.2167,  0.4370, -0.9012, -7.1063, -6.3674],
        [-4.7778, -3.7381, -5.6139,  5.1557, -4.0143]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 1, 3]
target tensor([2, 0, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.3937, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.8329,  -6.3979,   8.7103,  -3.9812,  -3.6971],
        [ -4.3167,  16.2256, -14.0066,  -7.1572,  -6.3323],
        [  7.4735,  -4.1863, -15.1721, -12.7506,  -8.9296],
        [-12.1056,  -9.6013,  17.6777,  -1.2778, -22.2688]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 0, 2]
target tensor([2, 1, 0, 2])
<class 'torch.Tensor'>
loss
tensor(4.0829e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.3095,  -6.8558,   8.1822,  -1.8874,  -3.8467],
        [ -7.4361,   0.3075,   3.8657,  -2.5553,  -4.4489],
        [ -6.4278,  -7.1206,   0.6507,   7.9544, -10.7279],
        [-12.2462,  25.1761,  -4.5592,  -2.2362,  -3.3797]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 3, 1]
target tensor([2, 2, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.0077, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.7272, -0.7805,  0.4621, -2.6419, -2.8167],
        [-2.4843,  0.0079, -1.5668, -1.9682, -4.9214],
        [-0.5338, -1.1271, -1.4197, -3.3831, -3.1410],
        [-4.2489, -2.4572,  0.9743, -2.5719, -5.6384]])
<class 'torch.Tensor'>
[2, 1, 0, 2]
target tensor([0., 2., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.8146)
Test: [0/13]	Time 0.472 (0.472)	Loss 1.8146 (1.8146)	Accuracy 50.000 (50.000)
evaluate
input tensor([[[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-8.4925, -2.8067, -0.8081, -1.6950, -3.9071],
        [-8.5644, -4.0929, -1.2578, -3.3114, -3.4634],
        [-4.2291,  0.7432,  0.9286, -2.3656, -4.0500],
        [-7.5523, -5.2949, -2.8792, -3.2045, -1.0904]])
<class 'torch.Tensor'>
[2, 2, 2, 4]
target tensor([0., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.7742)
evaluate
input tensor([[[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.4728, -3.6517, -1.1692, -4.7665, -5.6536],
        [-4.4885, -4.3345, -2.0422, -3.8833, -1.7585],
        [-4.9571, -0.2362,  0.8820, -2.5534, -4.6835],
        [-3.5320,  0.6064,  0.5282, -2.1376, -2.4560]])
<class 'torch.Tensor'>
[2, 4, 2, 1]
target tensor([0., 0., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.0033)
evaluate
input tensor([[[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.4719,  0.4787, -0.4543, -1.7327, -5.2430],
        [-4.9088, -1.8222,  4.0951, -1.9555, -3.6265],
        [-5.9027, -7.3356,  0.4409, -1.5568, -6.1805],
        [-1.5548, -2.3062, -1.0206, -2.3910, -1.3243]])
<class 'torch.Tensor'>
[1, 2, 2, 2]
target tensor([2., 2., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.9776)
evaluate
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.6234, -0.0891, -0.4516, -2.7655, -5.2848],
        [-1.4647, -0.0277, -2.0458, -3.0185, -3.9301],
        [-2.1008, -0.7022, -0.3151, -2.3924, -6.0273],
        [-3.6185, -0.9597,  2.2053, -1.9147, -2.8826]])
<class 'torch.Tensor'>
[1, 1, 2, 2]
target tensor([1., 0., 1., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.9176)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.3598, -3.2728, -1.9343, -2.0875, -2.1569],
        [-3.6180, -0.4148, -0.2277, -2.6402, -5.0073],
        [-6.5141, -0.9835, -2.4332, -0.9296, -5.4847],
        [-5.4654, -2.4504, -1.7556, -2.9530, -2.9173]])
<class 'torch.Tensor'>
[2, 2, 3, 2]
target tensor([3., 2., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.2759)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.9396, -0.6155,  0.4752, -2.9035, -4.2411],
        [-6.9128, -2.5599, -0.9302, -3.2766, -4.3019],
        [-2.6751, -0.1962,  1.1888, -1.9878, -3.9643],
        [-6.0301, -0.3741,  1.2988, -2.1595, -2.0048]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 3., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.2846)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.4724, -2.3082,  0.6548, -2.0129, -4.8333],
        [-5.4610, -2.1834,  1.4177, -0.2807, -5.6573],
        [-6.0760, -2.9541,  0.8471, -3.1157, -4.5795],
        [-6.2257, -1.6467,  1.0871, -2.0338, -5.3980]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([3., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.7331)
evaluate
input tensor([[[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-0.5753, -1.9392, -0.2989, -4.6688, -5.3251],
        [-5.3745, -1.3581,  0.7460, -2.6705, -1.6262],
        [-4.0654, -1.0582,  0.2040, -2.7113, -1.2318],
        [-3.9292, -3.6783, -2.6551, -3.6246, -3.2687]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 4., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.5541)
evaluate
input tensor([[[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  7,  -1,  -1,  ...,   0,   5,   1],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   4,   0,  ...,   0,   0,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -1,  ...,   2,  -3,   4],
         [  2,  -1,   0,  ...,   0,  -3,   2],
         [  2,  -1,  -4,  ...,   0,  -4,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-1.3916,  0.5032, -1.1338, -3.7587, -3.4677],
        [-3.1826, -1.9043, -0.3274, -4.2412, -0.2289],
        [-4.2909, -1.1086, -1.8385, -3.9589, -4.2282],
        [-2.1422, -0.2228, -0.7872, -3.8366, -2.4449]])
<class 'torch.Tensor'>
[1, 4, 1, 1]
target tensor([0., 2., 3., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.7593)
evaluate
input tensor([[[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  1,   1,  -4,  ...,  -4,   2,   1],
         [  1,   0,  -2,  ...,  -1,  -1,  -9],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  7,  -4,   0,  ...,  -1,   1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  4,  -3,   0,  ...,  -1,   1,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,  -1,  ...,   1,   1,   3],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,   0,   0,  ...,   0,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-8.3450e+00, -3.9184e-01, -2.8548e-03, -5.2300e+00, -4.1301e+00],
        [-7.0087e+00, -1.5099e+00,  5.0885e-01, -4.5913e+00, -2.9865e+00],
        [-4.8991e+00, -2.2571e+00,  2.2070e-01, -2.3688e+00, -5.3784e+00],
        [-4.5949e+00,  1.0632e+00,  1.7842e+00, -4.2367e+00, -2.8048e+00]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 0., 4., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.7716)
Test: [10/13]	Time 0.508 (0.514)	Loss 3.7716 (2.0787)	Accuracy 25.000 (36.364)
evaluate
input tensor([[[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.0675, -3.0226, -0.3053, -1.3383, -3.7340],
        [-4.0190, -1.8880, -2.2211, -3.6628, -2.6621],
        [-2.6385, -0.4004, -0.7907, -2.0659, -4.7676],
        [-2.2502, -2.4161, -1.2947, -1.8561, -3.5369]])
<class 'torch.Tensor'>
[2, 1, 1, 2]
target tensor([4., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.9857)
evaluate
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-7.8662, -0.8247,  2.1526,  1.0497, -3.0080],
        [-5.8310, -0.7929, -1.0796, -4.1676, -3.9895]])
<class 'torch.Tensor'>
[2, 1]
target tensor([2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.4670)
epoch: 14
train
input tensor([[[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.4713,  -5.6759,   9.3327,  -6.8779,  -9.6182],
        [-17.5908,  -0.2407,  16.1177,  -4.4943,  -1.9140],
        [ -3.7903, -10.5131,  -9.0921,  -5.2325,  -1.9413],
        [ -4.5188,   6.6464,  -3.6240,  -7.0629,  -6.7617]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 4, 1]
target tensor([2, 2, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.5069, grad_fn=<NllLossBackward0>)
Epoch: [14][0/25]	Time 1.892 (1.892)	Data 0.024 (0.024)	Loss 0.5069 (0.5069)	Accuracy 75.000 (75.000)
train
input tensor([[[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -2,  ...,   0,  -3,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [ 13,  -6,   0,  ...,  -1,  -3,   9],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  6,  -3,   0,  ...,   0,   1,   3],
         [  5,   0,   2,  ...,  -1,  -1,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   4,   0,  ...,   0,   0,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-10.6992,  -2.5214,   4.1583,  -6.7030,   1.6446],
        [  9.0270,  -1.8407,  -3.1651,  -6.1050,  -6.0302],
        [ -5.3247,  -5.1233,  16.5658,  -7.0774,   0.0485],
        [  9.1385,  -5.0751,  -4.5798,  -8.3296,  -5.4453]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 0]
target tensor([2, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0198, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.8548,  -7.2880,  -3.4375,   5.9734,  -7.0121],
        [ -8.3984,  -8.1347,  11.7656, -10.0939,  -3.5247],
        [ -1.1279,  15.4256,  -6.9957,  -4.5164,  -4.1315],
        [  6.5713,  -5.7038,  -5.8909,  -6.1272, -10.4758]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 1, 0]
target tensor([3, 2, 1, 0])
<class 'torch.Tensor'>
loss
tensor(3.7906e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 15.5088, -12.7045,  -5.6866,  -4.9444,  -4.5110],
        [ -8.9143,  -5.5556,  -0.6648,  10.5734, -10.8632],
        [  0.1702,   8.6056,  -3.5558,  -5.9537,  -6.1970],
        [ -6.9126,  -7.1423,  11.8357,  -0.9399, -11.7006]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 1, 2]
target tensor([0, 3, 1, 2])
<class 'torch.Tensor'>
loss
tensor(5.9807e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 7.5677, -6.1871, -7.9455, -5.9491, -3.1867],
        [-1.4437, -8.3754,  8.6549, -3.8862, -9.9956],
        [10.4106, -9.6634, -5.5588, -8.3869, -8.0087],
        [-0.2438,  4.9695, -3.0314, -5.6323, -2.2442]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 0, 1]
target tensor([0, 2, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.0016, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 18.8871,  -5.0106, -13.5776,  -8.5295, -10.9929],
        [ -4.1609,  -6.0980,  -5.7605,   7.3087,  -7.1319],
        [ -3.6716,  -5.3808,   8.3563,  -5.2784,  -6.2966],
        [ -7.0492, -16.9262,  -7.2925,  -2.2221,  14.1781]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 2, 4]
target tensor([0, 3, 2, 4])
<class 'torch.Tensor'>
loss
tensor(5.8412e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.0468, -10.8345,   6.6555,  -6.4507, -14.5130],
        [  7.6902, -11.9576,  -6.1145,  -3.4689,  -8.9659],
        [ -1.3682,  -8.8900,  14.7051,  -5.7787,  -1.6513],
        [ -2.1364,  -9.6935,   5.0093,  -1.7540, -12.6971]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 2]
target tensor([2, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0014, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 2.3836e+00, -1.6168e+01,  1.9208e+01, -1.4553e-01, -1.5344e+01],
        [-2.3266e+00,  1.2921e+01, -7.2621e+00, -6.7884e+00, -1.8309e+01],
        [-5.7712e+00,  8.5952e+00,  6.4758e-01, -6.0531e+00, -1.2011e+01],
        [-2.0163e+00,  1.2851e+01, -5.6378e+00, -1.5325e+01,  1.3246e-02]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 1, 1]
target tensor([2, 1, 1, 1])
<class 'torch.Tensor'>
loss
tensor(8.9421e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-9.0626e-01, -1.5864e+01, -5.9472e+00, -1.1766e+01,  1.1532e+01],
        [-2.0019e+00,  5.9578e+00,  3.2116e-03, -1.8798e+00, -5.0414e+00],
        [-3.3490e+00,  2.0350e+00,  1.1540e+01, -3.9245e+00, -1.0576e+01],
        [ 2.3865e-01,  1.3200e+01, -3.2005e+00,  4.3246e-01, -9.9455e+00]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 2, 1]
target tensor([4, 1, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0009, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.4486,   3.1572,  -2.6770,  -1.6871, -10.9468],
        [ -5.2491, -10.1626,  -9.6519,  -6.0526,   9.4826],
        [ 12.6371, -11.4910,  -5.2356,  -7.8823,  -7.0700],
        [ 12.4737,  -6.9470,  -3.3579, -17.3162, -15.0353]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 4, 0, 0]
target tensor([1, 4, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.0093, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 12.9868,  -7.0270,  -4.2203,  -6.6273, -13.7446],
        [  1.6073,  -5.5467,   3.5630,  -7.6543, -10.2416],
        [ -3.6326, -14.7175,  -8.4464,   6.2968, -14.5878],
        [  0.5832,  17.2895,   0.9620, -13.4937,  -9.9502]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 3, 1]
target tensor([0, 2, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.0331, grad_fn=<NllLossBackward0>)
Epoch: [14][10/25]	Time 1.728 (1.787)	Data 0.027 (0.025)	Loss 0.0331 (0.0521)	Accuracy 100.000 (97.727)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 15.4689, -18.9679, -10.6536,  -6.2362,  -9.3145],
        [ 16.4539, -11.3952,  -0.3726, -11.9165, -16.1863],
        [  5.2819,  -0.5718,  12.7016,  -7.3541,  -5.9505],
        [ 14.0504,  -5.2122,  -8.6505,  -4.9774, -11.5894]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 2, 0]
target tensor([0, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[  3,   0,   0,  ...,   1,  -3,   0],
         [  1,   2,  -2,  ...,  -6,  -5,   0],
         [  0,   4,  -3,  ...,  -4,   6,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  6,  -3,   0,  ...,   0,   1,   0],
         [  7,  -2,   0,  ...,  -3,   7,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -2,  ...,   0,  -3,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [  4,  -3,   5,  ...,   7,  -2,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -6.0484,   5.1504,  10.7558,  -3.2583, -13.8891],
        [ -7.2105, -11.4462,  -6.1616,  10.1246, -11.6917],
        [  0.8317, -15.1615,   3.8771,  -1.9105, -11.5458],
        [  1.6142,  -7.3259,  -3.4048,   7.0963, -11.4127]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 2, 3]
target tensor([1, 3, 2, 3])
<class 'torch.Tensor'>
loss
tensor(1.4157, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.0558,  11.6429,  -4.0629, -12.6218, -10.9959],
        [ -7.0408,   9.3290,  -1.2013,  -8.9424,  -5.8530],
        [ -3.6806,  -2.8890,  14.5750,  -1.9845, -16.4068],
        [ -7.0672, -13.1169,  -1.6052,   6.9792, -11.8895]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 3]
target tensor([1, 1, 2, 3])
<class 'torch.Tensor'>
loss
tensor(5.5845e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 2.7181e+00,  6.0278e+00, -4.4347e+00, -5.6063e+00, -1.2739e+01],
        [-2.2189e+00,  7.3011e-03,  9.2685e+00, -6.8175e+00, -5.0529e+00],
        [-1.0948e+00, -1.6493e+00,  1.2318e+01, -4.6197e+00, -1.7273e+01],
        [-3.4401e+00, -7.4736e+00,  9.7406e+00, -6.1686e+00, -7.1120e+00]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 2]
target tensor([1, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0090, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.7029,   2.1902,  -3.6968,  -5.5477,   6.9879],
        [ -1.3911,  -3.7247,   4.7637,  -6.9999, -16.2146],
        [ -2.3490,  -4.1082,  -0.2288,   7.1197, -12.7942],
        [ -9.4397,  13.7540,  -5.7808, -11.8492, -10.8358]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 3, 1]
target tensor([4, 2, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.0029, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.7423,  -4.0427,   8.1340,  -9.5834, -17.6879],
        [ -3.1869,  -0.7189,   8.0312,  -1.4158, -10.6941],
        [  5.3289,  -4.0389,   7.8713,  -9.5457,  -4.1546],
        [  2.4978,  -5.0459,  -2.2658,  -1.8187,  -3.4373]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 0]
target tensor([2, 2, 2, 4])
<class 'torch.Tensor'>
loss
tensor(1.5090, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.4528, -15.1742,  -0.4264,  11.0195, -20.0232],
        [  0.6437,  -9.9098,   8.4244,  -8.0393, -12.8123],
        [ -4.4662, -12.9026,  -9.3671,  16.0070, -20.9942],
        [  2.6622,  -4.2829, -13.8197,   7.0282, -17.7048]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 3, 3]
target tensor([3, 2, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.0033, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.0258, -11.6222,   1.0848,  10.5612, -13.7839],
        [ -7.3696,  -4.0772,  12.9001,  -2.9226, -12.7848],
        [ -6.0325,   9.6563,  -7.3519, -15.0160, -17.0001],
        [-11.1410,  -7.2740, -11.7044,  18.0159, -15.5217]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 1, 3]
target tensor([3, 2, 1, 3])
<class 'torch.Tensor'>
loss
tensor(1.9222e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.1476,  -3.9452,  -3.8518, -11.8829,   5.6542],
        [ -7.0946,  -8.4537,  16.3533,  -9.1288, -15.1739],
        [ -1.3937, -13.5034,  -4.8404, -17.6152,  12.6519],
        [-11.0402,  -3.9774,  12.0334,  -2.9444,  -8.5004]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 4, 2]
target tensor([4, 2, 4, 2])
<class 'torch.Tensor'>
loss
tensor(7.3482e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.7664,  -6.7429,   2.9112,  14.4369, -12.2069],
        [ -6.2082,   2.0686,  14.3345,  -0.2321, -23.6534],
        [  0.7674,  -8.5135,  -5.4641,   9.2084, -13.5194],
        [ -6.6278,  -5.0717,  -2.3479,   4.7409, -10.1522]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 3, 3]
target tensor([3, 2, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
Epoch: [14][20/25]	Time 1.873 (1.761)	Data 0.036 (0.026)	Loss 0.0003 (0.1673)	Accuracy 100.000 (96.429)
train
input tensor([[[ 13,  -6,   0,  ...,  -1,  -3,   9],
         [  5,  -1,   0,  ...,   7,   3,   0],
         [  2,   0,  -2,  ...,   2,   4,  -8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [  5,  -1,  -1,  ...,  -1,   2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [ -1,   3,   3,  ...,   0,   3,   3],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  7.9305,  -1.7492,  -6.1648,  -5.6874,  -5.9426],
        [ -5.7761,  -0.2060,  -8.1660,  15.3393,  -7.5498],
        [ 20.9394,   2.9613, -10.8296,  -7.7651,  -1.8351],
        [ -1.7473,  -5.5105,   2.7115,  -1.3226,  -4.5163]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 0, 2]
target tensor([0, 3, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0075, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.0521e+01,  1.4841e+01, -5.4217e+00, -7.9171e+00, -3.3503e+00],
        [-1.1364e+00,  4.9484e+00, -2.1282e+00, -1.4460e+00, -1.9692e+00],
        [-2.8512e-01, -4.3427e+00, -1.0744e+01, -4.8351e+00,  1.1097e+01],
        [-1.0884e+01,  1.1296e+01,  4.4734e-03,  3.8434e+00, -1.3314e+01]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 4, 1]
target tensor([1, 1, 4, 1])
<class 'torch.Tensor'>
loss
tensor(0.0016, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.9834,  -4.9856,  12.3232,  -6.0541, -11.5425],
        [-11.9685,  -9.3485,   6.5130,  -3.6522, -14.2998],
        [ -0.4906,   9.9718,  -2.4303,  -1.8008,  -3.6938],
        [ -0.8685,  -5.3052,  -6.6168,  -2.9491, -10.0452]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 0]
target tensor([2, 2, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0328, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.6958,  -2.9101,   7.6999, -17.0452,  -5.8867],
        [ 11.8989,  -1.7710,  -5.5977,  -8.4973,  -1.7476],
        [ -5.4300,  18.3383, -10.0625, -10.4625,   2.6530],
        [ 18.0621,  -3.5759, -12.1234,  -9.6621, -14.3859]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 1, 0]
target tensor([2, 0, 1, 0])
<class 'torch.Tensor'>
loss
tensor(8.1657e-06, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.4117,  1.2560,  0.6055, -3.5071, -6.1684],
        [-2.3233,  0.6759, -0.7385, -3.6236, -6.6381],
        [-2.9329, -0.4431, -3.0084, -3.9243, -5.2992],
        [-2.4794,  2.4123, -0.1489, -2.5898, -3.4633]])
<class 'torch.Tensor'>
[1, 1, 1, 1]
target tensor([0., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.0448)
Test: [0/13]	Time 0.479 (0.479)	Loss 3.0448 (3.0448)	Accuracy 0.000 (0.000)
evaluate
input tensor([[[  2,   0,   0,  ...,  -1,  -3,  -1],
         [  5,   0,   0,  ...,   6,  -1,   7],
         [  0,   1,  -4,  ...,   0,  -1,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -3,  ...,  -2,   0,  -6],
         [  7,  -4,   0,  ...,   0,   1,   1],
         [ 11,  -5,   2,  ...,  -3,   6,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -2,  ...,  -6,  -5,   0],
         [  0,   2,   2,  ...,   0,   0,   2],
         [  4,   0,   0,  ...,   7,   3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-3.8936, -0.7309,  0.0378, -3.3150, -7.5524],
        [ 0.4746, -0.9354, -0.5465, -4.8671, -7.0615],
        [-0.5948,  1.4578, -0.8837, -4.3104, -4.4428],
        [-3.1389, -1.5150,  0.2106, -3.0371, -6.7053]])
<class 'torch.Tensor'>
[2, 0, 1, 2]
target tensor([2., 0., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.3317)
evaluate
input tensor([[[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.7381, -1.3544, -2.7818, -3.5031, -7.8908],
        [-0.7285, -2.1631, -1.8668, -2.9833, -5.4349],
        [ 0.4307,  0.9165, -2.0585, -4.4702, -6.5037],
        [-1.3049, -1.2026, -3.4678, -4.1208, -5.6646]])
<class 'torch.Tensor'>
[1, 0, 1, 1]
target tensor([0., 3., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.8653)
evaluate
input tensor([[[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.8951,  0.4984,  1.5914, -2.6036, -4.2725],
        [-0.0852, -1.5236, -0.9238, -4.7702, -7.9741],
        [-1.3320,  0.6483, -0.8259, -3.5836, -6.2877],
        [-3.0407, -0.0471,  2.4962, -3.0572, -5.3386]])
<class 'torch.Tensor'>
[2, 0, 1, 2]
target tensor([3., 0., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.3613)
evaluate
input tensor([[[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.7044, -1.4179, -0.8282, -2.3575, -5.6896],
        [-1.9455,  1.9585,  1.1424, -4.3883, -4.8521],
        [-2.6779, -0.4207, -0.0517, -2.5477, -7.6596],
        [-0.8607, -0.8637, -2.3002, -3.1159, -2.8697]])
<class 'torch.Tensor'>
[2, 1, 2, 0]
target tensor([4., 1., 4., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.3081)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.5230,  0.1565,  0.0323, -3.5172, -5.8320],
        [-2.5628, -0.6804, -2.1507, -4.5658, -7.3081],
        [-4.9258, -3.7618, -4.3304, -3.5529, -4.0787],
        [-0.0652, -1.3864, -1.6310, -2.6171, -6.3746]])
<class 'torch.Tensor'>
[1, 1, 3, 0]
target tensor([0., 1., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.2788)
evaluate
input tensor([[[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.4384,  0.8152,  0.5577, -2.9381, -5.6775],
        [-2.3545,  0.2240, -0.1435, -3.2210, -3.3143],
        [-4.3682, -0.3792,  0.8326, -1.2759, -6.8964],
        [-2.8874,  1.0085,  0.9458, -2.5494, -4.4064]])
<class 'torch.Tensor'>
[1, 1, 2, 1]
target tensor([2., 1., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.6371)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.9559,  0.9425, -0.0327, -3.5905, -5.1883],
        [-2.7108, -3.5953, -2.7672, -4.7053, -5.0198],
        [-1.6456, -2.6666, -3.2655, -4.3805, -6.5371],
        [ 0.3335,  1.3982, -1.7944, -3.9791, -5.5736]])
<class 'torch.Tensor'>
[1, 0, 0, 1]
target tensor([2., 0., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.4440)
evaluate
input tensor([[[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 0.0553, -0.3235, -1.7368, -3.7570, -4.1669],
        [-3.6166, -1.2046,  0.1610, -3.1762, -7.6726],
        [-0.2574, -1.0075, -0.8961, -4.1145, -3.8263],
        [-2.8492, -5.9893, -0.1178, -1.9311, -9.4173]])
<class 'torch.Tensor'>
[0, 2, 0, 2]
target tensor([0., 3., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.4525)
evaluate
input tensor([[[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.4188, -0.1844, -2.6488, -4.1632, -7.9339],
        [-0.8559,  0.8240, -1.9976, -2.6863, -6.9340],
        [-4.5643, -1.4411,  0.1084, -3.2577, -7.1296],
        [-2.6957,  1.8473,  0.6041, -2.8300, -5.5362]])
<class 'torch.Tensor'>
[1, 1, 2, 1]
target tensor([3., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.6670)
evaluate
input tensor([[[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.2462,  1.0004, -1.0707, -2.9066, -5.2811],
        [-3.9856, -1.3365, -1.9130, -4.0144, -5.8696],
        [-5.6275, -2.0428, -2.0151, -3.5979, -6.6635],
        [-1.0118,  0.1820, -0.3079, -2.8002, -6.7363]])
<class 'torch.Tensor'>
[1, 1, 2, 1]
target tensor([2., 3., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.7462)
Test: [10/13]	Time 0.535 (0.522)	Loss 1.7462 (1.9215)	Accuracy 50.000 (40.909)
evaluate
input tensor([[[  0,   1,  -1,  ...,   2,  -3,  -2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,   0,   1,  ...,   2,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  2,  -1,  -1,  ...,   0,   1,  -2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  1,   1,  -4,  ...,  -4,   2,   1],
         [  1,   0,  -2,  ...,  -1,  -1,  -9],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -3.6967,  -0.3195,   0.1876,  -3.2400,  -3.4639],
        [ -3.0689,   0.2644,  -3.8621,  -0.9947, -10.0445],
        [ -3.6184,  -1.0025,  -0.6895,  -4.7693,  -6.4882],
        [ -4.4754,   0.2279,  -1.1963,  -5.3369,  -7.5617]])
<class 'torch.Tensor'>
[2, 1, 2, 1]
target tensor([4., 0., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.2409)
evaluate
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.0290,  0.6112,  1.2665,  0.7311, -3.4934],
        [-1.6887,  0.7252, -1.0933, -2.6542, -7.5306]])
<class 'torch.Tensor'>
[2, 1]
target tensor([2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.4093)
epoch: 15
train
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.5198,  -1.0497,  -3.1737, -10.9981,  10.0810],
        [ -9.5341,  18.0808,  -9.7757,  -3.1700,  -4.2922],
        [ -7.2195, -11.8256,  -6.5137,  14.5965, -10.6607],
        [ -0.7457,  13.4694,  -7.5853,  -5.8586,  -9.8474]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 3, 1]
target tensor([4, 1, 3, 1])
<class 'torch.Tensor'>
loss
tensor(6.5564e-06, grad_fn=<NllLossBackward0>)
Epoch: [15][0/25]	Time 1.793 (1.793)	Data 0.024 (0.024)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.3181,  -6.5878,  13.7448,  -9.8582,  -6.8222],
        [ -1.5266,  -2.5534,   4.6842,  -5.8311,  -1.6818],
        [ -2.6141,   3.2913,  -4.0033, -12.8330,   8.7759],
        [ -1.5326,   8.1664,  -5.6488,  -3.4299,  -5.6836]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 4, 1]
target tensor([2, 2, 4, 1])
<class 'torch.Tensor'>
loss
tensor(0.0022, grad_fn=<NllLossBackward0>)
train
input tensor([[[  0,   0,  -2,  ...,  -4,   5,  -5],
         [  3,  -2,   0,  ...,  -3,  -1,   8],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  0,  -1,  -4,  ...,  -6,   0,  -1],
         [  2,  -1,   0,  ...,   0,   5,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   4,   0,  ...,   0,   0,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  0.4960,  -5.4132,   5.5170,  -8.2127,  -4.9511],
        [ -8.7749,  11.2810,  -4.1026,  -7.4652,  -8.8604],
        [ -6.4391,  -1.7067,  12.0695,  -9.0449,  -8.9151],
        [ 12.1903,   1.2659,  -4.2239, -10.2091,  -6.0892]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 2, 0]
target tensor([2, 1, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0017, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.1520,  21.7010,  -4.6398,  -2.0669,  -6.5718],
        [ -7.4003,  19.0520,  -4.8362,  -5.0201,  -3.4429],
        [ -8.0876,   0.5674,   6.2349,  -4.3687,  -8.7879],
        [ -1.1098,  12.0814,  -2.8694,  -9.8627,  -5.0639]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 1]
target tensor([1, 1, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0009, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.4340, -11.0933,  14.4530,  -8.6317,  -4.4316],
        [ -1.8995,  -3.5624,   6.1005,  -1.8868,  -0.4818],
        [ 14.9263,  -1.0253, -10.4877,  -1.7160,  -9.2965],
        [ -6.1059,   4.6935,  11.6842,  -9.5257,  -0.5225]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 0, 2]
target tensor([2, 2, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0008, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.9418,  -5.7160,  -9.8626,  -7.7341,  17.1535],
        [ -4.1285,  14.5420,  -1.9613, -16.3555,  -2.7150],
        [ -7.5834,  -8.5737,  12.6129,  -0.3323, -11.2313],
        [  4.1051,  -6.2506, -18.2530, -10.0629,  -5.1781]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 2, 0]
target tensor([4, 1, 2, 0])
<class 'torch.Tensor'>
loss
tensor(3.2006e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.7153,  -4.5179,  -7.8460,  10.0786, -16.5732],
        [ -9.5183,  -2.9438,   9.4916,  -3.1000,  -6.9943],
        [ -3.2789,   3.6530,   7.0403,  -5.6005,  -2.3484],
        [  8.2125,  -4.6098,  -5.7932, -10.6544,  -4.2325]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 2, 0]
target tensor([3, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0083, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.9929,  -0.0710,   0.1186,  10.5051, -10.8177],
        [  1.0157,  12.6211,  -3.7717,  -1.9572,  -5.6402],
        [  9.0534,   0.7846, -10.2126,  -9.3648,  -0.9794],
        [-15.8391,   3.7333, -12.5176,  14.9095, -18.7109]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 0, 3]
target tensor([3, 1, 0, 3])
<class 'torch.Tensor'>
loss
tensor(9.5087e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.5796,  -3.2185,   6.6458, -15.0349,  -4.6823],
        [ -1.2912,  -0.8904,  -8.9884,   9.3577,  -6.4966],
        [-11.5821,   1.7209,   6.5324,  -7.6847,  -6.9437],
        [ -5.7437,   3.2253,  18.8575,  -4.8837,  -8.1291]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 2, 2]
target tensor([2, 3, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0021, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.9947,   0.0836,  12.2713,  -5.8153, -12.1408],
        [ -1.8887,   6.7543,  -2.7476,  -7.8296,  -1.4022],
        [ 10.8780,  -6.7512, -22.5442,  -9.1739,  -2.3987],
        [ -7.4626,  12.2457,  -8.2514,  -6.4105,  -3.9389]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 0, 1]
target tensor([2, 1, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.0001, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.6770e+01, -3.9778e-03,  9.8868e+00, -7.7241e+00, -8.4527e+00],
        [-1.3280e+01, -5.7709e+00, -1.0206e+01,  8.5759e+00, -4.4200e+00],
        [-1.0740e+01, -1.2275e+01,  9.7123e+00, -9.9728e+00, -8.0668e+00],
        [-2.1189e+01,  5.0697e-01, -5.9641e+00,  1.9399e+01, -8.7655e+00]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 2, 3]
target tensor([2, 3, 2, 3])
<class 'torch.Tensor'>
loss
tensor(1.3381e-05, grad_fn=<NllLossBackward0>)
Epoch: [15][10/25]	Time 1.812 (1.747)	Data 0.009 (0.021)	Loss 0.0000 (0.0015)	Accuracy 100.000 (100.000)
train
input tensor([[[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  6.4727,   6.6745,  -8.7416,  -8.5346, -11.5700],
        [-12.3665,  -5.1602,  14.6072,  -7.3390,  -5.8368],
        [ -6.3136,  13.3402,  -1.2938,  -7.3595,   1.9338],
        [ -8.6961,  12.4149,  -3.1481,  -9.1305,  -5.0345]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 1, 1]
target tensor([0, 2, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.1998, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.9822,  -3.9314,   5.2524,  -6.3427,  -5.0141],
        [ -3.7942,  -0.2817,  -6.4318,   0.6125,  -3.3652],
        [ -3.8125,  -6.0777,   2.5252, -12.9692,  -1.9845],
        [ -5.1472,  -8.1449,  -7.0969,   6.3176,  -5.6096]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 2, 3]
target tensor([2, 3, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0946, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.5502,  -4.7854, -15.2967,  -6.0489,   9.5178],
        [-10.3631, -10.7636,   3.6868,   8.2650, -18.5646],
        [-13.1787,  -3.2137,  -8.1177,  13.7251,  -1.9072],
        [  5.7285,  -2.0424,  -6.4836,  -3.0639,  -5.1808]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 3, 3, 0]
target tensor([4, 3, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0027, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  9.3888,  -8.4630,  -1.3764, -11.6652,  -5.7848],
        [  7.4034,  -9.0244,  -6.8803,  -7.6813,  -0.7613],
        [ -1.2638,  -3.1994,  -3.6792,   3.4629,  -5.3939],
        [ 10.7703,  -1.4989,  -9.5753, -11.7331,  -6.8045]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 3, 0]
target tensor([0, 0, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0028, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-14.1455,  14.3961,  -3.0736,  -6.6658,  -5.2452],
        [ -9.8341,  31.1058, -15.2344,  -7.6439,  -0.9783],
        [ 15.7799, -10.7395, -10.2307,  -5.7056,  -4.3688],
        [-14.5740,  -5.2443,  -4.6579,   5.0716,  25.5895]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 0, 4]
target tensor([1, 1, 0, 4])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.9000,  -2.7430,   6.6615,  -2.2596,  -3.0184],
        [ -8.9701,   0.3657,  10.8848,  -5.2757,  -3.7233],
        [-18.7391,   2.3027,   9.7288, -11.9026,   1.4635],
        [ -2.6840,  -7.8499,   7.8451,  -5.4962,  -5.7388]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.9249,  -8.5457,  -5.7236,   9.5106,  -2.3818],
        [ -1.6011,   0.9320,  -1.9510,  -8.4369,  19.1652],
        [ -8.7198,  -8.1576,   1.7054,  -4.6883,  -6.8347],
        [-13.1462,  -9.2593,  -1.2982,  17.6169,  -1.7247]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 4, 2, 3]
target tensor([3, 4, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0005, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.5639,   8.1342,  -4.9312,  -8.5435,  -6.6380],
        [ -3.2548,   1.7689,  12.1803, -14.6066,  -3.3128],
        [ -2.5155,  -0.9886,  11.1505,  -2.6358, -11.7880],
        [ -3.2825,  -4.7092,   9.4433,  -2.9948,  -1.2051]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 2]
target tensor([1, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(1.8090e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.2309,  -6.8515, -16.2749,  -6.5966,  16.3607],
        [ -5.8522,   4.5474,  -3.1467,  -8.5880,  -0.0789],
        [ -2.1925,  13.6081,  -3.6750, -17.9660,   1.8544],
        [ -9.9246, -10.6555,  12.1644,  -2.5044,  -5.1500]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 1, 2]
target tensor([4, 1, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0026, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.2173,   7.0689,  -1.8968,  -7.3371,   0.6364],
        [ -1.2198,  20.3508,  -2.6018, -14.9238,  -1.4734],
        [  9.2977,  -5.3574,  -7.2775,  -8.3252,  -7.1189],
        [ -1.9305,  -1.5968,   5.3828,  -5.9070,  -9.5247]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 0, 2]
target tensor([1, 1, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0009, grad_fn=<NllLossBackward0>)
Epoch: [15][20/25]	Time 1.667 (1.746)	Data 0.028 (0.022)	Loss 0.0009 (0.0153)	Accuracy 100.000 (98.810)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.9925,  10.4215,  -7.2788,   1.0433,  -2.7872],
        [  8.9705, -12.3043,  -4.6495,  -8.3319,  15.9915],
        [  1.0904, -10.7415,  -1.4747,   4.7778,  -1.9144],
        [  7.2327,  -7.5222,  -8.4196,  -7.5072,  -4.6084]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 4, 3, 0]
target tensor([1, 4, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0072, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.2135,  -6.1485,  -8.3265,   5.7894,  -9.5540],
        [-10.8271,  -6.9223,   5.9082,  -5.6484,  -8.0526],
        [ 14.8748,  -8.2234,  -8.0121,  -2.4427,   2.2074],
        [ -5.5226,   3.8102,  -7.1460,  -2.0196,  -2.0681]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 0, 1]
target tensor([3, 2, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.0084, grad_fn=<NllLossBackward0>)
train
input tensor([[[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,  -1,   0,  ...,  -1,   0,   4],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -2,  ...,   0,  -3,   0],
         [ 11,  -5,   2,  ...,  -3,   6,   3],
         [  6,  -4,  -1,  ...,   0,   0,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -8.0103, -13.7387,   1.9217,  -6.9709,  -8.5728],
        [ -0.3342,  -4.4224,   5.0925,  -3.2680,  -2.7998],
        [ 10.9164, -10.6904,  -7.3453,   1.0636,  -4.6037],
        [  9.0715,  -3.9310,  -6.7560, -11.2786,  -9.6447]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 0, 0]
target tensor([2, 2, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.0013, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 12.6632, -14.1877, -10.8006,  -8.3051,  -3.0831],
        [  1.1947,  -8.2954,  -4.5951,   8.6474,  -6.1683],
        [  8.6042,  -6.7111,  -4.8067,  -5.7647,  -2.4971],
        [  8.4392,  -8.1814,  -3.9974,  -3.9167,  -6.9929]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 0, 0]
target tensor([0, 3, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 2.4163, -5.6125, -1.2135, -3.8109, -5.0249],
        [ 2.3878, -7.3698, -1.8488, -2.3556, -0.7112],
        [ 0.0473, -9.6546, -3.6755, -3.9663, -2.3841],
        [-0.1583, -2.8964, -1.6434, -2.6996, -4.3129]])
<class 'torch.Tensor'>
[0, 0, 0, 0]
target tensor([0., 2., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.8796)
Test: [0/13]	Time 0.499 (0.499)	Loss 1.8796 (1.8796)	Accuracy 50.000 (50.000)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-0.1923, -5.5077, -0.4917, -1.1796, -0.8447],
        [-2.1601, -9.6092, -3.4012, -1.8032, -2.6602],
        [ 0.4131, -8.0539, -3.4937, -3.0007, -3.8113],
        [ 1.4042, -7.2578, -4.0816, -2.7213, -4.6013]])
<class 'torch.Tensor'>
[0, 3, 0, 0]
target tensor([1., 2., 1., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.3524)
evaluate
input tensor([[[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.5580, -2.9097, -0.2270, -2.8059, -3.8958],
        [ 2.1300, -8.4507, -2.7139, -1.4108, -2.0923],
        [ 1.0537, -2.8558, -2.2025, -2.8967, -2.8552],
        [-1.2573, -0.7975, -0.9071, -1.8217, -1.6791]])
<class 'torch.Tensor'>
[2, 0, 0, 1]
target tensor([0., 3., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.6699)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.1826, -7.0925, -1.0396, -2.2726, -4.8811],
        [-1.1819, -6.4391, -0.6173, -2.1531, -4.9465],
        [-1.7560, -5.2429, -0.6554, -1.9989, -4.9663],
        [-1.8143, -8.6207, -4.2146, -2.6963, -4.3061]])
<class 'torch.Tensor'>
[2, 2, 2, 0]
target tensor([2., 3., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.9618)
evaluate
input tensor([[[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   4,   0,  ...,   2,   5,   1],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,  -2,   2,  ...,   0,   5,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,  -2,  -2,  ...,   0,   0,  -3],
         [  1,  -2,  -1,  ...,   2,  -4,  -5],
         [  2,   0,  -2,  ...,  -3,   4,  -5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,   0,  ...,   0,  -6,  -4],
         [  5,  -1,   0,  ...,   7,   3,   0],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ 1.2253, -3.3924, -1.7592, -3.0182, -1.9252],
        [-1.8523, -6.9798, -0.9968, -1.8815, -4.1561],
        [ 2.2001, -7.6510, -2.2430, -2.8417, -4.4822],
        [ 2.4719, -7.4684, -2.7235, -1.6600, -3.4288]])
<class 'torch.Tensor'>
[0, 2, 0, 0]
target tensor([1., 1., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.8470)
evaluate
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-0.4653, -8.0816, -2.2509, -3.0503, -2.6464],
        [ 1.4877, -9.5076, -4.3363, -2.8413, -3.0120],
        [ 0.6418, -3.4917, -1.9015, -1.8975, -2.4050],
        [ 2.6293, -4.9876, -3.3235, -2.9881, -4.2088]])
<class 'torch.Tensor'>
[0, 0, 0, 0]
target tensor([0., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.2267)
evaluate
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-0.9500, -5.7121, -1.4253, -0.9384, -4.9183],
        [-2.3451, -5.1480, -0.0118, -0.2769, -3.7328],
        [-0.1098, -6.6362, -4.0791, -2.5864, -2.3653],
        [ 2.4629, -3.2021, -2.3235, -2.9286, -3.4564]])
<class 'torch.Tensor'>
[3, 2, 0, 0]
target tensor([4., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.4410)
evaluate
input tensor([[[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.8925,  -7.2391,  -2.1005,  -1.0313,  -2.3655],
        [ -0.9618,  -4.8663,   0.8546,  -1.9536,  -2.2806],
        [  0.2861, -12.3529,  -1.4896,  -0.4320,  -6.0359],
        [ -0.1406,  -3.6744,   0.5339,  -1.6091,  -2.1927]])
<class 'torch.Tensor'>
[0, 2, 0, 2]
target tensor([4., 2., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.8867)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 1.0567, -5.4527, -1.1117, -1.8384, -3.2111],
        [-0.5639, -4.0261, -1.5842, -2.7817, -4.2977],
        [-1.3381, -6.1285, -1.0345, -2.1599, -0.6875],
        [-1.5629, -8.2208, -3.2357, -2.2343, -2.4025]])
<class 'torch.Tensor'>
[0, 0, 4, 0]
target tensor([0., 2., 4., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.9853)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.7290, -10.5538,  -5.4880,  -1.8070,  -0.4572],
        [  1.1406,  -5.8491,  -3.3559,  -1.5794,  -0.4537],
        [ -0.1341,  -4.5630,  -0.7137,  -1.7505,  -0.8007],
        [ -4.3224,  -4.1719,  -0.1346,   1.9799,  -0.6203]])
<class 'torch.Tensor'>
[4, 0, 0, 3]
target tensor([2., 3., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.9963)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 1.9186, -8.8920, -5.1599, -2.3877, -1.6815],
        [-0.0613, -3.4358, -1.7769, -1.6548, -5.0894],
        [ 0.7680, -5.0412, -0.4570, -2.5702, -1.3808],
        [-0.9010, -2.4387, -0.3234, -1.8527, -3.3314]])
<class 'torch.Tensor'>
[0, 0, 0, 2]
target tensor([2., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.0087)
Test: [10/13]	Time 0.990 (0.572)	Loss 4.0087 (2.5687)	Accuracy 25.000 (36.364)
evaluate
input tensor([[[  1,   2,  -1,  ...,   3,   1,  -6],
         [  2,  -1,  -1,  ...,   0,   1,  -2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   2,  -2,  ...,   0,   1,  -6],
         [  0,   0,   0,  ...,  -9,  -2,   3],
         [  2,   0,  -2,  ...,   2,  -2,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,   0,  ...,   0,  -6,  -4],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   1,   3,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ 0.2397, -7.5306, -5.1805,  0.6849, -6.3169],
        [-1.4082, -7.2817, -2.8637, -3.7531, -4.1138],
        [ 0.7743, -3.4093, -2.7310, -1.5668, -5.0251],
        [ 0.6063, -3.0385, -0.5124, -1.8036, -5.1069]])
<class 'torch.Tensor'>
[3, 0, 0, 0]
target tensor([0., 2., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.5969)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.3873, -3.4342, -1.1997, -2.8344, -2.6039],
        [ 0.5030, -3.2853, -0.1810, -2.2158, -3.7690]])
<class 'torch.Tensor'>
[2, 0]
target tensor([2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.0120)
epoch: 16
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 11.9910, -13.3698,  -6.4212,  -6.1034,  -2.7822],
        [ -0.6409,  13.4450, -10.4615,  -5.3307,  -6.5238],
        [ -0.4337,   4.0536,  -0.6917,  -7.2717,  -1.5218],
        [ -4.2296,  12.6498,  -4.4550,  -0.6421,  -1.5129]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 1, 1]
target tensor([0, 1, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0059, grad_fn=<NllLossBackward0>)
Epoch: [16][0/25]	Time 1.955 (1.955)	Data 0.024 (0.024)	Loss 0.0059 (0.0059)	Accuracy 100.000 (100.000)
train
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  9.2372,  -9.9174,  -6.2648,  -8.6919, -11.6521],
        [  3.5649,  -5.8073,  -8.4297,   7.8585,  -7.8641],
        [-23.0405, -16.3668,  13.6779,  -2.3535,  -4.8182],
        [ 10.2640, -12.0311,  -9.1952,  -7.0376,  -9.7910]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 2, 0]
target tensor([0, 3, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0034, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.1558,   8.3889,  -9.9759,  -1.5162,  -3.7286],
        [  0.2895,  14.3209, -20.3812,  -8.6652,  -4.4366],
        [ 18.6326, -15.0416, -15.6542,  -1.7801,  -5.4200],
        [ 12.1973,  -2.6757,  -7.6071,  -7.1695,  -1.4882]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 0, 0]
target tensor([1, 1, 0, 0])
<class 'torch.Tensor'>
loss
tensor(3.2334e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[  0,   0,   0,  ...,   0,   0,   0],
         [  6,   2,   4,  ...,   3,   0,  -4],
         [  0,   0,   0,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   0,   0,  ...,   2,   0,  -8],
         [  0,   2,  -2,  ...,  -3,   4,  -2],
         [  2,  -2,  -1,  ...,   2,  -3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   5,   1,  ...,   1,   2,   0],
         [  2,   3,   0,  ...,   2,  -1,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ 19.6434, -11.0751, -14.4566,  -3.9207, -10.5224],
        [ -5.3550, -15.8003,   5.7933,  -1.1470,  -6.4286],
        [  3.5700, -16.1842, -15.9804,  -6.8723,  12.5138],
        [  6.1578,  -7.8673, -12.5663,  -5.1970, -10.1771]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 4, 0]
target tensor([0, 2, 4, 0])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.5305,  -9.9484,   5.9316,  -6.9908,  -6.9762],
        [ -6.3419,  -4.9807,  11.0802,  -5.1037,  -4.1775],
        [ -1.5242, -21.5202,  -7.4867,  17.7119,  -5.4863],
        [ -4.4648, -14.3600,  -3.8590,  12.1360,  -7.1804]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 3, 3]
target tensor([2, 2, 3, 3])
<class 'torch.Tensor'>
loss
tensor(5.4234e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.8124, -21.5038,  12.4815,  -7.3089,  -4.8238],
        [ -3.1483,  -5.2758,   8.7070,  -2.0644,  -3.9378],
        [ 13.2118, -17.9633, -12.8961,  -5.7583, -12.8311],
        [ 15.5871, -17.4112,  -4.1107, -15.2290,   0.8509]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 0, 0]
target tensor([2, 2, 0, 0])
<class 'torch.Tensor'>
loss
tensor(8.1955e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.7241,  -3.5722, -11.4351,  -5.2169,  17.9437],
        [  9.7357, -11.2940,  -5.2470,  -6.9893,  -6.8162],
        [ -2.5229, -11.0657, -12.2838,  10.3711,  -2.8105],
        [  3.0048,  -8.2935,   4.9210,  -2.4670,  -5.2946]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 0, 3, 2]
target tensor([4, 0, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0345, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.1544,  -7.2152,   6.2606,  -8.9300,   4.9842],
        [ 13.4514,  -7.0540,  -4.8379, -12.0811,  -6.5424],
        [ -2.8654, -19.0469, -10.6482,  15.4209,  -6.1491],
        [ -2.6053,  -9.3413,  14.4390,  -6.0981,  -4.9059]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 3, 2]
target tensor([2, 0, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0615, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.9254, -12.1715,  -2.6764,  -3.4696,  19.5664],
        [ -6.9817,  -0.4455,  -4.5840,  -1.2958,  -9.1019],
        [  3.5791,   0.4820,  -0.4740, -12.5405,   1.0899],
        [  0.3696, -13.5916,  -5.1694,  11.6817, -17.9035]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 0, 3]
target tensor([4, 1, 1, 3])
<class 'torch.Tensor'>
loss
tensor(0.9003, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,  -1,  ...,  -1,  -3,   3],
         [  0,   0,   0,  ...,   0,  10,  -2],
         [  2,   0,  -2,  ...,   2,   4,  -8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,  -1,   0,  ...,  -1,   0,   4],
         [  0,   4,  -2,  ...,   0,   3,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,   0,  ...,   0,  -6,  -4],
         [  0,   2,   0,  ...,   3,   0,  -7],
         [  3,  -1,   2,  ...,   1,  -2,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -1.4895,  -3.2452,   6.1971,  -4.1637,  -4.5436],
        [ -3.0787,  -7.1923,  -0.4037,   6.2001,  -9.8462],
        [  0.5226,  -4.5767,   8.3912,  -6.4979,   0.5188],
        [ -1.4278, -10.0813,  -6.8821,  11.5897,  -6.3999]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 2, 3]
target tensor([2, 3, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0007, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-13.0782,  -0.7547,  14.7548,  -2.7710,  -9.4142],
        [ -7.7773,  11.7195,  -7.3911, -10.4368,  -1.6069],
        [  0.1020,   5.1612,  -4.8185,  -7.3390,  -2.8187],
        [ -3.5271, -13.6808,   5.9286,  -5.4866,  -7.9004]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 1, 2]
target tensor([2, 1, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0017, grad_fn=<NllLossBackward0>)
Epoch: [16][10/25]	Time 1.910 (1.756)	Data 0.015 (0.021)	Loss 0.0017 (0.0917)	Accuracy 100.000 (97.727)
train
input tensor([[[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.4417,  -8.5779,  -3.8808,  12.2830, -13.9430],
        [ -5.5712,  -5.8841,   2.8178,  -5.2356,  -4.8004],
        [  1.2502,  -9.4867,   2.1171,  -1.4750,  -1.5333],
        [ -8.5070,   7.2818,  -3.0135,  -3.5286,   0.8051]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 2, 1]
target tensor([3, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0977, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.8420e+00,  1.4678e+01, -1.9657e-02, -6.1651e+00, -6.4871e+00],
        [-7.3099e+00,  2.7531e+00,  3.4741e+00, -2.4411e+00, -1.6330e+00],
        [-9.3901e+00,  6.8216e+00, -5.8737e+00, -1.0011e+01, -6.6744e+00],
        [-1.0172e+01,  2.1105e+01, -5.9521e+00, -1.0036e+01, -5.3934e+00]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 1, 1]
target tensor([1, 2, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.1005, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.6942,  -3.1096,   1.4485,   2.4054, -10.1391],
        [  0.3907,   4.7182,   0.1237,  -4.2533,  -3.7299],
        [ -8.9145,   6.0762,   2.1654,  -6.1696,  -4.5704],
        [-12.2311,  15.0605,  -1.0264,  -4.3254,  -2.4670]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 1, 1]
target tensor([3, 1, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0928, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.4122,   0.2533,  -1.6978,  -7.1006,  10.6743],
        [ -8.7416,  -4.1704,  10.1943,  -1.5547,  -7.6130],
        [-20.2881,   1.2971,  11.5726,  -1.2346, -12.0400],
        [ -1.7329,   0.5300,   5.4625,  -9.2906,  -6.3286]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 2, 2]
target tensor([4, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0020, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-20.5408,  17.8348,   2.1131,  -3.4832,  -6.1973],
        [  4.1421,  -7.7010,  -7.4469, -14.9602,  -2.4056],
        [ -8.9602,  -0.3066,  -3.6291, -10.5972,  13.6860],
        [ -6.8351,  -4.9844,  13.5628,  -8.3686, -12.7111]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 4, 2]
target tensor([1, 0, 4, 2])
<class 'torch.Tensor'>
loss
tensor(0.0004, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.7280,  -7.6993, -14.9615,   6.7228, -12.3678],
        [ -5.7150,  -0.9610,   7.4621,  -3.1219,  -7.9020],
        [ -6.7879,   4.6662,   0.1348,  -9.9016,   8.9244],
        [ -5.0903,  -1.7031,  -6.8789,   7.8241,  -7.5384]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 4, 3]
target tensor([3, 2, 4, 3])
<class 'torch.Tensor'>
loss
tensor(0.0036, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  6,   1,   2,  ...,  -1,   0,   1],
         [  2,  -1,  -1,  ...,   2,   6,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   0,   0,  ...,   0,   4,   0],
         [  4,   1,  -2,  ...,  -2,   5,  -4],
         [  3,   1,   0,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   0,   0,  ...,   1,  -3,   0],
         [  2,   0,   0,  ...,  -2,   5,   4],
         [  2,   0,  -2,  ...,   0,   2,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-7.2412, -2.9993,  8.4057, -8.6733, -6.1794],
        [-1.0497, -1.3226, 11.2559, -5.8776, -3.7511],
        [-7.6997, 11.9330, -4.8050, -2.2222, -9.3253],
        [-4.7693, -2.6802, 15.9673, -5.6421, -9.5801]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 2]
target tensor([2, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(5.2154e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.4019,  10.3971,   2.7028,  -3.4738,  -2.7410],
        [-12.9075,   3.1137,  14.2364,   2.3551, -11.8089],
        [-23.7083,  -1.1362,  -4.0924,  11.9946,  -9.8533],
        [ -8.5819,  -2.3075,  19.7002,  -6.3119, -11.7908]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 3, 2]
target tensor([1, 2, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0001, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.7112,  18.4892,   4.1628,  -4.4881,  -5.9248],
        [  1.3118,  -7.5372,  -4.8299,  -3.3678, -10.7141],
        [-10.2125,   2.4210,  19.4033,  -4.4391, -12.0049],
        [  6.1318,  -5.3182,  -2.0913,  -4.5513,  -9.8492]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 2, 0]
target tensor([1, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0030, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.5811,  -3.5562,   1.9017,   6.3342,  -5.5699],
        [ -9.5449,  17.7335,   1.5915, -14.6107,  -6.6620],
        [ -8.2231,  18.5212,  -4.3973, -11.0091,   5.2636],
        [ -7.6741,   0.7512,   9.7903,  -3.5647,  -4.2730]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 1, 2]
target tensor([3, 1, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0030, grad_fn=<NllLossBackward0>)
Epoch: [16][20/25]	Time 1.696 (1.743)	Data 0.013 (0.021)	Loss 0.0030 (0.0624)	Accuracy 100.000 (98.810)
train
input tensor([[[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.4965, -10.6762,  23.3953,  -9.1193,  -7.2198],
        [  2.7769,  -2.8548,  -4.4980,  -6.7417,  -7.1089],
        [ -9.8615,  -0.3661,  -6.8330,  -1.2456,  15.9289],
        [-15.0954,   0.4854,  13.2883,  -1.4390,  -7.1130]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 4, 2]
target tensor([2, 0, 4, 2])
<class 'torch.Tensor'>
loss
tensor(0.0011, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.3128,  -0.2953,  -6.1712,  -8.0249,  -4.5983],
        [  9.3151,  -6.4713,  -5.6489,  -6.4327, -18.5343],
        [  1.3810,  -2.7823,  -5.2080,  -2.2148,  -6.2811],
        [-12.7384,  -2.8388,  18.4845,  -2.4281, -18.2378]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 0, 2]
target tensor([0, 0, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0290, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-21.2136,   2.5161,   5.8225,   7.6273,  -7.7825],
        [-14.0042, -10.9850,  -5.7293,  17.1679, -21.0696],
        [ -8.0151,  -5.4348,  -5.1205,  -6.2309,   3.8905],
        [-11.1544,   3.9374,  16.8763, -11.2297,  -2.0632]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 4, 2]
target tensor([3, 3, 4, 2])
<class 'torch.Tensor'>
loss
tensor(0.0394, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  5.4537,   0.8373,   1.2012, -13.2047,  -7.6421],
        [-10.7809,  -2.5542,   4.4705,  14.5051,  -4.7201],
        [-13.2214,   1.8581,  14.9360,  -0.5654,  -8.0433],
        [  0.8098,   1.1143,  -2.3914,  -4.8043,  -7.3101]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 2, 1]
target tensor([0, 3, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.2249, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-8.2611,  1.5069,  2.4024, -0.0490, -5.7686],
        [-7.4665,  2.1816,  0.9866, -0.1882, -3.0760],
        [-9.9784,  2.7218,  1.5718, -0.9539, -8.3912],
        [-8.1110,  2.9334,  2.3562, -1.7899, -6.4663]])
<class 'torch.Tensor'>
[2, 1, 1, 1]
target tensor([3., 3., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.6398)
Test: [0/13]	Time 0.514 (0.514)	Loss 2.6398 (2.6398)	Accuracy 0.000 (0.000)
evaluate
input tensor([[[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-14.3795,   3.2995,   0.9457,  -2.0641,  -8.2651],
        [-10.8185,   2.5016,   4.1649,   1.1517,  -6.8377],
        [-10.1543,   0.7433,   1.6321,  -3.0844,  -5.3608],
        [ -9.0392,   4.0999,   3.4255,  -0.4937,  -5.9710]])
<class 'torch.Tensor'>
[1, 2, 2, 1]
target tensor([0., 2., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.8047)
evaluate
input tensor([[[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.7002,   2.6892,   2.0539,  -0.3093,  -7.9975],
        [ -4.7141,   1.4853,   2.3930,  -0.7201,  -7.2125],
        [-10.3232,   1.9426,   3.6288,  -1.6619,  -7.1399],
        [ -9.7728,   1.4819,   3.3963,   0.3901,  -8.0041]])
<class 'torch.Tensor'>
[1, 2, 2, 2]
target tensor([2., 1., 3., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.8540)
evaluate
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.7118,   3.4945,   0.5618,   2.6322,  -9.8821],
        [ -6.5680,   3.6872,   0.9296,  -0.4410,  -7.0255],
        [ -8.0638,   3.1514,   4.3623,  -0.0809,  -4.7922],
        [ -8.5889,   3.2655,   3.6839,   0.0140,  -6.2584]])
<class 'torch.Tensor'>
[1, 1, 2, 2]
target tensor([0., 2., 3., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(8.9841)
evaluate
input tensor([[[  0,   0,   0,  ...,   3,   1,  -6],
         [  1,  -1,  -1,  ...,  -2,   0,   1],
         [  1,  -1,  -1,  ...,  -1,  -3,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         [  1,  -1,  -1,  ...,   0,   2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[ 10,  -6,   2,  ...,   2,   0,  -1],
         [  2,   3,   3,  ...,   0,   1,  -1],
         [  0,   0,   0,  ...,   0,   0,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -5.8488,   2.5960,   1.2181,  -1.9124,  -7.4081],
        [ -7.2206,   3.8891,   2.6624,  -1.6899,  -4.5046],
        [ -8.8084,   2.9476,   2.4048,  -1.6275,  -5.3514],
        [-12.2393,   1.4504,   1.9206,  -1.2360,  -4.9187]])
<class 'torch.Tensor'>
[1, 1, 1, 2]
target tensor([0., 1., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.4038)
evaluate
input tensor([[[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.1026,   1.7033,   3.2123,  -0.9352,  -8.4292],
        [ -8.6236,   3.3492,   3.3445,  -0.2448,  -4.0190],
        [ -5.1679,   1.1145,   2.2539,  -3.0015,  -7.3404],
        [ -3.1086,   0.9573,  -0.2525,  -1.7081,  -4.1113]])
<class 'torch.Tensor'>
[2, 1, 2, 1]
target tensor([1., 1., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.6316)
evaluate
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  2,   0,  -3,  ...,   0,   3,   4],
         [  2,   0,   0,  ...,   7,   0,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   1,  -1,  ...,   2,  -3,  -2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,   0,   1,  ...,   2,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,  -1,  ...,   1,   1,   3],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,   0,   0,  ...,   0,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-10.5457,   3.5626,   4.2019,   0.0671,  -4.3175],
        [-12.7666,   2.7239,   2.9268,  -2.4780,  -7.7092],
        [-10.8058,   2.2667,   3.8023,  -1.3150,  -4.2383],
        [ -9.8865,   3.8657,   5.0186,  -0.9304,  -5.1090]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 2., 4., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.8358)
evaluate
input tensor([[[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.8925,   3.1316,   3.0231,  -0.2774,  -6.4343],
        [-10.5680,   1.7940,  -0.0754,  -0.8495,  -6.9284],
        [ -6.6292,   2.6682,   1.4657,  -1.7632,  -6.5813],
        [ -9.9135,   2.9778,   5.5999,  -0.8549,  -5.6546]])
<class 'torch.Tensor'>
[1, 1, 1, 2]
target tensor([4., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.1600)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.2842,   2.8399,   2.2517,  -1.9028,  -7.8531],
        [ -7.8139,   1.5978,   2.0540,  -1.2062,  -7.1336],
        [-10.4425,   1.7818,   1.1525,  -0.8156,  -6.2887],
        [ -7.5184,   1.6236,   2.3059,  -0.5093,  -7.1003]])
<class 'torch.Tensor'>
[1, 2, 1, 2]
target tensor([1., 0., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.5515)
evaluate
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.9649,   2.9423,   3.0756,  -1.8220,  -6.6627],
        [-14.2415,   1.3561,   1.6860,  -0.4441,  -7.2299],
        [ -9.7897,   0.6722,   0.6383,  -1.9982,  -6.7648],
        [ -8.3485,   0.1763,   2.9499,  -0.8697,  -7.2498]])
<class 'torch.Tensor'>
[2, 2, 1, 2]
target tensor([0., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.2770)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-13.9709,   0.6522,  -0.1776,  -0.6475,  -4.3898],
        [ -6.2193,   2.4091,   1.6350,  -0.7735,  -4.7578],
        [-10.9328,  -1.3901,   3.3746,   1.0114,  -9.3845],
        [ -9.2561,   3.8121,   3.5420,  -1.6608,  -6.1819]])
<class 'torch.Tensor'>
[1, 1, 2, 1]
target tensor([2., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.0717)
Test: [10/13]	Time 0.504 (0.510)	Loss 4.0717 (4.6558)	Accuracy 25.000 (22.727)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.0720,   1.7261,   2.9806,  -1.6562,  -4.2764],
        [ -6.0410,   2.0111,   3.4520,  -0.8275,  -5.3850],
        [-12.3144,   2.5145,   4.0494,  -0.9160,  -8.3559],
        [ -6.6216,   3.5660,   1.8509,  -0.9185,  -3.5152]])
<class 'torch.Tensor'>
[2, 2, 2, 1]
target tensor([2., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.6436)
evaluate
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.2476,   2.5068,   3.4044,   3.2878,  -3.5015],
        [ -4.7130,   3.4293,   1.8592,  -2.2471,  -5.7310]])
<class 'torch.Tensor'>
[2, 1]
target tensor([2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.5834)
epoch: 17
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-18.2474,  -0.3652,   8.7866,  -5.4704,  -6.5127],
        [ -5.4155,  14.6111,   3.8516,  -1.5417,  -6.4242],
        [ -7.4762,   2.1313,   7.9763,  -7.2316,  -3.0782],
        [ -5.0096,  -1.2140,  -5.3213,   6.5940,  -7.0088]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 2, 3]
target tensor([2, 1, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0009, grad_fn=<NllLossBackward0>)
Epoch: [17][0/25]	Time 1.933 (1.933)	Data 0.024 (0.024)	Loss 0.0009 (0.0009)	Accuracy 100.000 (100.000)
train
input tensor([[[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.9803,  -6.9998,  15.1191,   5.9919, -17.8512],
        [-11.5496,  -4.0460,  15.5303,   0.2886,  -0.1774],
        [ 10.1711,  -2.1638,  -9.4958,  -0.5715,  -9.3204],
        [-12.6602,  14.5826,  -2.6646,   1.5962,  -6.7651]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 0, 1]
target tensor([2, 2, 0, 1])
<class 'torch.Tensor'>
loss
tensor(3.4331e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-13.9220,   9.7263,  -1.5395,  -5.1993,  -9.5732],
        [-10.6507,  -2.7520,  -4.1009,   9.7579,  -8.5098],
        [-12.8086,  14.0561,  -6.2470,   0.0285,  -3.3671],
        [-13.2093, -14.8956,  -1.1807,  23.5418, -18.8853]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 1, 3]
target tensor([1, 3, 1, 3])
<class 'torch.Tensor'>
loss
tensor(4.6491e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.2094,  -2.3147,  -9.1220,  -4.1907,  15.2714],
        [-15.6855,   2.9680,   1.5493,   5.7025,  -6.0430],
        [  2.2161,  -3.3057,  -5.8348, -11.4386, -12.4972],
        [ -5.1442,  -1.9961,   8.7236,   2.5826,  -6.9675]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 3, 0, 2]
target tensor([4, 3, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0210, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  4.4370,  -3.6916,  -2.9034,  -9.5894, -10.1209],
        [ -9.6560,  12.6868,  -3.5166,   0.6851,  -1.3770],
        [-16.5487,  -4.5137,   5.7345,  -1.9382,  -5.0909],
        [  6.7374, -10.0394,  -7.7224,  -9.5456,  -4.1569]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 2, 0]
target tensor([0, 1, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0004, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.1930,  -5.3019,   4.2630,  -5.0514,  -9.1972],
        [ -4.9737,  -3.2993,   8.8691,  -5.2538,  -5.1554],
        [ -5.2191,   1.3998,  13.2551, -11.4091,  -3.4579],
        [ -9.0348,  -6.5680,   2.5749,   6.3635, -11.6822]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 3]
target tensor([2, 2, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0056, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-17.2265,  25.6783, -15.3647,  -3.8424,  -6.8123],
        [-11.4209,  -2.2959,  -8.3425,  -3.7367,  11.5822],
        [  6.6560,  -1.4122,  -2.3871,  -6.6281, -11.5315],
        [-16.8152,  -3.1061,  -1.6492,  13.9111,  -4.5585]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 4, 0, 3]
target tensor([1, 4, 0, 3])
<class 'torch.Tensor'>
loss
tensor(0.0001, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.3152, -11.0871,  15.2907,  -0.3174,   0.8433],
        [  8.8858,  -1.8862,  -0.9879, -13.3383, -14.5755],
        [  8.9857,  -9.8151,  -5.4568,  -7.2487, -18.0494],
        [-17.0058,   0.1885,  10.8600,  -5.1852,  -7.4184]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 0, 2]
target tensor([2, 0, 0, 2])
<class 'torch.Tensor'>
loss
tensor(2.4258e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.7450,  -2.5668, -12.2055,  -0.7866,  16.5253],
        [-12.3923,  -0.7897,   7.7017,   0.1350,  -8.5441],
        [-11.0217,  -1.7651,  17.7667,  -0.4808, -12.0707],
        [-20.6415, -11.8653,   2.1052,  24.2652,  -9.5564]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 2, 3]
target tensor([4, 2, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.1063,   1.0635,  12.1641,  -3.7950,  -7.8616],
        [  2.5865,  -2.1286,  -3.7393,  -5.6775,  -5.8610],
        [ -6.1134,  -1.8133,  -9.8508,  15.7061,  -6.1628],
        [-10.4437,   3.2119,  14.8306,   0.6435, -10.4403]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 3, 2]
target tensor([2, 0, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0028, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 10.5003, -10.6709,  -4.8353,   3.0980, -17.6786],
        [-11.7831,  16.3804,   1.2494,  -7.5628,  -1.2464],
        [ -4.6056,  12.2907,  -0.1507,  -0.9364,  -9.8559],
        [-13.6284,  -4.7536,   6.2149,  -2.1200, -11.0176]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 1, 2]
target tensor([0, 1, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
Epoch: [17][10/25]	Time 1.694 (1.771)	Data 0.012 (0.021)	Loss 0.0002 (0.0028)	Accuracy 100.000 (100.000)
train
input tensor([[[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.1349,  -1.7692,  16.1409,  -4.7475, -13.7148],
        [-13.2560,   2.4630,  19.1331,  -3.6659, -11.0716],
        [ -1.5279,   4.0214,  12.1091,  -1.3932,  -0.9258],
        [  1.7748, -11.5889, -10.2135,  -3.6025,  -4.8987]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 0]
target tensor([2, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0015, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.9402,  -6.0758,  -1.7033,  -5.6944,  -6.1474],
        [ -3.0152,  -4.3287,   5.6360,  -0.5417,  -5.1579],
        [-18.8808, -14.4305,  17.1662,   1.6672, -14.4105],
        [-20.3264,  -7.2556,  -0.3432,  26.0906, -14.2426]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 3]
target tensor([0, 2, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0073, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  7.1723,  -5.9165,   4.0942,  -3.3837,  -6.0663],
        [ -9.1226,  11.5785,  -1.5897,  -0.1262,  -2.2818],
        [ -9.8042,   0.5913,   4.8454,  -3.7102,   6.5030],
        [-21.1094, -11.7666,   0.3909,   4.0365,  10.2474]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 4, 4]
target tensor([0, 1, 4, 4])
<class 'torch.Tensor'>
loss
tensor(0.0560, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.2181,  -9.4471,  -5.8629,   8.0612,  -7.0398],
        [-11.3757,  12.0900,  -0.9629,  -1.8678,  -6.3785],
        [ -8.7317,  11.5518,  -4.5216,   1.4980,  -5.9809],
        [ -4.7437,  -0.5493,  -0.9452,   9.2002,  -9.5252]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 1, 3]
target tensor([3, 1, 1, 3])
<class 'torch.Tensor'>
loss
tensor(3.6506e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  5.7945,  -4.5237,  -3.0861,   0.2991,  -5.5730],
        [-10.6202,  -2.5339,  14.5624,  -7.1543,  -8.7254],
        [ -8.2634,   5.5774,  -5.3239,  -5.6541,  -6.0759],
        [  1.4497,  -6.2998,  -3.4010,   2.0949,  -4.8962]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 1, 3]
target tensor([0, 2, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.2687, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.6099,  -2.1687,  -2.0270,  -3.4751,  -1.4747],
        [-27.6281,  -2.1132,  21.2258,  -7.7641, -11.3141],
        [ -5.8565,  -4.9175,  -1.9205,  10.9216,  -6.0722],
        [-17.2183,  -4.1897,   0.2560,  -5.5965,   6.8080]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 3, 4]
target tensor([4, 2, 3, 4])
<class 'torch.Tensor'>
loss
tensor(0.1988, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  6,   0,   0,  ...,  -3,   4,   2],
         [  2,   0,  -1,  ...,  -1,   2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -1,  ...,   0,   0,   0],
         [  2,  -1,  -2,  ...,   2,   4,  -2],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -2,  ...,  -6,  -5,   0],
         [  0,   3,  -4,  ...,  -1,   0,   0],
         [  3,  -2,  -2,  ...,   0,   2,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -3.4241,  -2.5553,   5.8498,  -1.4614,  -3.8114],
        [ -3.7278,  18.5261,  -2.3921,  -7.3734,  -7.7111],
        [ -9.4584,  29.3784,   1.3829, -12.1138,  -7.7163],
        [ -1.8837,  19.7703,  -5.6449,  -2.2358,  -5.0298]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 1, 1]
target tensor([2, 1, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.1448,  -5.9867, -13.2352,  -0.4083,  11.0915],
        [ -8.8590,  10.6708,  -7.1976,  -8.0374,  -0.6977],
        [  0.5033,   3.4553,  -2.6609,   0.5760,  -6.0920],
        [-17.2355,  -9.4922,  14.9725,  -3.3970, -11.8590]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 1, 2]
target tensor([4, 1, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.7642, grad_fn=<NllLossBackward0>)
train
input tensor([[[  7,  -4,   0,  ...,  -1,   1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,  -2,   0,  ...,  -3,  -1,   8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -4,  ...,  -4,  -9,   5],
         [  6,  -6,   1,  ...,   0,   0,   3],
         [  0,   2,  -2,  ...,  -7,  -4,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -2,  ...,  -6,  -5,   0],
         [  1,   5,  -1,  ...,  -4,  -2,   0],
         [  3,  -2,  -2,  ...,   0,   2,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -4.9991,  13.2276,  -8.3601,  -3.7156,  -6.1910],
        [ -8.5933,  -5.7521,  12.0670,  -3.9758,  -2.4546],
        [-16.3217, -11.0254,  -8.9575,  23.5972, -10.1723],
        [ -5.7971,  10.7416,  -1.4805,  -4.4731,  -1.3819]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 3, 1]
target tensor([1, 2, 3, 1])
<class 'torch.Tensor'>
loss
tensor(2.8312e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-14.8002,   1.2062,  21.4592, -12.1887,   2.8661],
        [ -2.9831,  -4.6455,   9.0464,  -7.8787,  -4.8996],
        [ -4.1548, -10.9174,  -5.7405,   5.8985,  -7.8363],
        [ -1.5458,   6.1442,  -3.3098,  -5.3583,  -1.0138]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 3, 1]
target tensor([2, 2, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
Epoch: [17][20/25]	Time 1.783 (1.753)	Data 0.030 (0.022)	Loss 0.0003 (0.0633)	Accuracy 100.000 (97.619)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.2906,  14.2611,  -7.0160, -10.0406,  -4.8335],
        [ -6.6674, -15.4646,  14.8472, -14.6031,   0.8242],
        [ 17.0237, -17.3071,  -6.7054,  -4.5553,  -2.8014],
        [  8.7729,  -6.8488,  -5.4067,  -6.4251,  -4.7265]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 0, 0]
target tensor([1, 2, 0, 0])
<class 'torch.Tensor'>
loss
tensor(8.3446e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.5312, -13.1710, -10.1547,  12.3166,  -8.4821],
        [ -4.8372, -14.0750, -14.7202,  15.1283,  -6.8505],
        [  6.6520,  -4.3587,  -4.5750,  -4.1599,  -4.9593],
        [ -4.0880, -13.4118,  -6.0522,   7.1389,  -1.9482]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 0, 3]
target tensor([3, 3, 0, 3])
<class 'torch.Tensor'>
loss
tensor(4.6877e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,   2,  -1,  ...,   3,   1,  -6],
         [  0,  -1,  -4,  ...,  -6,   0,  -1],
         [  2,  -1,   0,  ...,   0,   5,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,  -1,   0,  ...,   7,   3,   0],
         [  2,   0,   0,  ...,   7,   0,  -1],
         [  3,   0,   0,  ...,   1,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   5,   1,  ...,   1,   2,   0],
         [  2,   3,   0,  ...,   2,  -1,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  2.8379,   1.7416, -10.9583, -12.5427,   1.4851],
        [ -3.7029,  -8.8158,   6.3754,  -8.8786,  -4.6157],
        [  8.7398, -11.2098, -10.7866,  -2.8506,  -4.2669],
        [ -0.4530, -17.7749,   5.0582,  -9.7377,   1.8952]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 0, 2]
target tensor([1, 2, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.4018, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 11.8343,  -5.3443,  -7.3841,  -5.0902,  -2.3445],
        [ -5.2890,   8.3272, -10.5029,  -0.6752,  -3.3041],
        [ -1.1322,  -2.5088,   7.1741,  -9.4048,  -0.3712],
        [  4.0821,  -9.7606,   6.6979,  -4.1684,  -5.6112]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 2, 2]
target tensor([0, 1, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0179, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 1.8898, -4.7942, -1.3296, -3.5047, -1.0287],
        [ 0.2441, -3.4927, -1.1467, -3.4772, -0.9799],
        [ 4.1480, -3.9084, -1.6738, -5.0958, -1.3868],
        [-0.3198, -7.9066, -3.7257, -4.5024,  0.8186]])
<class 'torch.Tensor'>
[0, 0, 0, 4]
target tensor([2., 2., 0., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.6969)
Test: [0/13]	Time 0.491 (0.491)	Loss 2.6969 (2.6969)	Accuracy 25.000 (25.000)
evaluate
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 0.6909, -3.5912, -1.2440, -4.0696, -3.4421],
        [ 1.0539, -7.6902, -4.2258, -6.2842, -0.7284],
        [ 1.2692, -8.7060, -2.9418, -7.1725, -0.2792],
        [ 0.1184, -6.7315, -2.1356, -3.8161, -0.2842]])
<class 'torch.Tensor'>
[0, 0, 0, 0]
target tensor([1., 1., 0., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.6368)
evaluate
input tensor([[[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -2,  ...,  -4,   5,  -5],
         [  3,  -1,   0,  ...,  -1,   0,   4],
         [  0,   0,   0,  ...,   0,   0,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   2,  -2,  ...,  -3,  -1,   0],
         [  2,  -2,  -1,  ...,   2,  -3,   4],
         [  0,  -2,  -5,  ...,   0,   4,   7],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -2,  -1,  ...,   2,  -4,  -5],
         [  2,   0,  -2,  ...,  -3,   4,  -5],
         [  1,   1,  -4,  ...,  -4,   2,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ 2.8052, -4.3660, -2.4697, -5.1315,  0.9644],
        [-3.2478, -4.7860, -1.2793,  0.5460,  1.2426],
        [ 1.7428, -5.7782, -2.2373, -3.1855, -3.9396],
        [ 2.3979, -5.3792, -2.8514, -3.8030,  1.5918]])
<class 'torch.Tensor'>
[0, 4, 0, 0]
target tensor([1., 2., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.2239)
evaluate
input tensor([[[  5,  -2,  -2,  ...,   0,   0,  -3],
         [  1,  -2,  -1,  ...,   2,  -4,  -5],
         [  2,   0,  -2,  ...,  -3,   4,  -5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         [  3,  -2,   0,  ...,  -3,  -1,   8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  5,  -1,   0,  ...,   7,   3,   0],
         [  5,   0,   0,  ...,   6,  -1,   7],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ 4.6840, -8.2902, -4.0996, -5.9219, -0.9269],
        [-0.6686, -9.3020, -5.1577, -4.8614, -0.0451],
        [ 0.4062, -7.6298, -3.3713, -7.2183, -0.6413],
        [ 0.4385, -6.0602, -0.4902, -5.3164, -1.7326]])
<class 'torch.Tensor'>
[0, 4, 0, 0]
target tensor([0., 2., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.9550)
evaluate
input tensor([[[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-0.1888, -5.0126,  1.2549, -4.4040, -0.7008],
        [-0.3313, -5.9708, -0.3590, -2.7756, -1.8873],
        [ 0.1071, -4.3393, -1.8293, -4.6391, -1.2713],
        [ 0.5445, -6.9756, -5.8587, -1.9508, -2.8550]])
<class 'torch.Tensor'>
[2, 0, 0, 0]
target tensor([2., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.8924)
evaluate
input tensor([[[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 2.3488, -7.4133, -4.5559, -5.6037, -1.7858],
        [ 1.8814, -3.3556, -2.8045, -3.9089, -2.5198],
        [-0.0213, -6.6975, -2.8856, -6.0005,  1.1181],
        [-0.2435, -7.4715, -1.0917, -4.8319,  0.8560]])
<class 'torch.Tensor'>
[0, 0, 4, 4]
target tensor([3., 2., 0., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.6271)
evaluate
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 2.1560, -4.7319, -0.6901, -2.7011, -4.3862],
        [ 0.4735, -6.3275, -0.5403, -2.7654, -3.6289],
        [-0.7819, -7.0379, -2.2351, -4.9469, -2.8236],
        [ 1.3863, -2.8964, -2.0439, -4.0640, -1.7713]])
<class 'torch.Tensor'>
[0, 0, 0, 0]
target tensor([1., 2., 1., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.7465)
evaluate
input tensor([[[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 0.5441, -4.4948,  0.1552, -3.2841, -0.3238],
        [ 3.3526, -8.1327, -3.4904, -4.2828,  0.6474],
        [ 2.0418, -5.8834, -1.5899, -3.4971, -1.0904],
        [ 3.4026, -7.1592, -3.0208, -4.6702, -1.6482]])
<class 'torch.Tensor'>
[0, 0, 0, 0]
target tensor([3., 3., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.0910)
evaluate
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 0.9943, -7.2871, -1.3912, -3.2195, -2.0472],
        [-0.7044, -9.8735, -6.4535, -4.7733,  2.1770],
        [ 1.8480, -7.1019, -2.2423, -6.1615,  1.4686],
        [-0.8558, -6.3464, -0.7960, -4.8239, -2.4796]])
<class 'torch.Tensor'>
[0, 4, 0, 2]
target tensor([4., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.3146)
evaluate
input tensor([[[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 4.3553, -6.5525, -1.7905, -5.9445, -2.8655],
        [ 1.9207, -5.2130, -1.3199, -5.0296, -1.7563],
        [ 1.5612, -8.9649, -4.3157, -6.2418, -0.8957],
        [ 4.1018, -6.5531, -3.9984, -5.8067, -2.2445]])
<class 'torch.Tensor'>
[0, 0, 0, 0]
target tensor([0., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.3180)
evaluate
input tensor([[[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 0.9120, -4.6618, -1.2923, -3.2777,  0.9162],
        [ 2.0362, -5.0542,  0.3976, -4.3541, -1.4566],
        [ 0.2585, -2.4893, -1.1375, -2.8222, -0.1154],
        [ 1.0355, -7.9377, -4.5232, -4.5891, -0.1719]])
<class 'torch.Tensor'>
[4, 0, 0, 0]
target tensor([1., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.0281)
Test: [10/13]	Time 0.505 (0.513)	Loss 4.0281 (3.4119)	Accuracy 0.000 (27.273)
evaluate
input tensor([[[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.6781,  -7.8830,  -5.2531,  -6.4041,  -0.6697],
        [  1.5035, -10.6070,  -1.7156,  -3.4310,  -2.4481],
        [  1.0531,  -5.9951,  -1.2853,  -3.9215,   2.3711],
        [ -0.6370,  -3.0735,   0.3454,  -4.2911,  -1.8901]])
<class 'torch.Tensor'>
[4, 0, 4, 2]
target tensor([0., 2., 1., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.5041)
evaluate
input tensor([[[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 1.8499, -6.4273, -1.5717, -5.1452,  0.6780],
        [ 2.0711, -8.7466, -6.2650, -5.1152,  0.6612]])
<class 'torch.Tensor'>
[0, 0]
target tensor([1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(8.5639)
epoch: 18
train
input tensor([[[  1,   2,  -1,  ...,   3,   1,  -6],
         [  0,  -1,  -4,  ...,  -6,   0,  -1],
         [  2,  -1,   0,  ...,   0,   5,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -3,  ...,  -2,  -2,  -4],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -1,  ...,   0,   0,   0],
         [  0,   1,   1,  ...,   6,   1,  -1],
         [  2,   0,   0,  ...,   7,   0,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  0.6600,   6.3384, -12.1871, -12.6206,   2.7375],
        [ -1.6080,  -6.2885,   5.0959,  -5.2883,  -1.7201],
        [ -1.6605,  -5.8754,   7.6022,  -6.1371,   2.3768],
        [ 27.8875, -18.3467,  -8.7490, -16.5384, -13.5953]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 0]
target tensor([1, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0095, grad_fn=<NllLossBackward0>)
Epoch: [18][0/25]	Time 1.784 (1.784)	Data 0.024 (0.024)	Loss 0.0095 (0.0095)	Accuracy 100.000 (100.000)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-14.3695,  -3.7448,  17.4816,  -9.2605,  -3.1911],
        [ -1.8029,  -6.4358,  -2.3189,  -3.9289,   0.7860],
        [ -1.1887,  -8.6737,   9.5140,  -9.8961,   2.4902],
        [  2.4780,  -5.5110,  10.0167,   1.7189,  -6.4763]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 4, 2, 2]
target tensor([2, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.8071, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.3642, -17.9977,   9.4787, -16.2265,   2.2918],
        [ -7.5440,  19.5305, -10.2085,  -6.9906,  -3.8484],
        [  2.4421,  -6.2160,  -6.5064,   0.7464,  -3.8808],
        [  2.1584,  14.9887,  -5.7438,  -3.7942,  -0.6040]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 0, 1]
target tensor([2, 1, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.4672, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.6193, -22.8123,   0.9092,  19.1706, -14.2351],
        [ -1.3229, -19.1812,  12.2303,  -3.5379,  -9.2043],
        [  0.6130, -14.1203, -11.1060, -14.4735,  11.8539],
        [  1.0070,  -3.7729,  14.4729, -14.3641,  -1.3004]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 4, 2]
target tensor([3, 2, 4, 2])
<class 'torch.Tensor'>
loss
tensor(4.0233e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.5002,  -3.7880,   8.7677,  -8.9908,  -3.0368],
        [  1.2269,   3.2969,  -1.7505, -18.1716,  -1.5674],
        [ 13.2362, -13.6008,  -8.2421,  -8.0852,   1.4967],
        [ -6.7172,  -8.3268,  15.1731,  -5.3370,  -1.2531]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 0, 2]
target tensor([2, 1, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0329, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  5.9270,  -9.5103,  -6.9472,  -5.2729,  -7.5507],
        [-15.2849,  -8.8691,  19.9817,  -3.5677, -13.8124],
        [ -6.7177,  -5.8064,   0.2837,   4.3236,  -8.7180],
        [  1.2226,   2.3096,  -3.6877,  -5.4764,  -0.8561]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 3, 1]
target tensor([0, 2, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.0853, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.0652,  -7.2597,   9.9578,  -6.9808,  -9.3532],
        [-23.0079,  29.1853,   2.5053, -10.0006, -11.7630],
        [ -6.3711,   6.0272,  -4.3991,  -7.2730,  -9.4377],
        [ -5.8857,  -7.6575,  -6.0928,  16.6525, -12.2382]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 1, 3]
target tensor([2, 1, 1, 3])
<class 'torch.Tensor'>
loss
tensor(9.1492e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.7006,  14.4276,  -2.5762, -14.7340,  -5.0802],
        [ 14.4956,  -7.8311,  -4.5650, -13.1575, -11.6457],
        [ -2.6089,   8.0901,  -1.9790,  -0.5041,   3.8638],
        [  1.9344,  -8.9432,  -5.8144,  -7.5991, -10.3316]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 1, 0]
target tensor([1, 0, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0038, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.2163,  -6.6251,  13.3192,   1.7748,  -6.6008],
        [-13.3945,  -8.4831,  -8.3827,   9.5788,  -4.1467],
        [-10.7745,  -6.2898,  -3.3118,   4.2327,  -2.2660],
        [  7.7624,  -7.5294,  -1.3033,  -7.5765,  -8.9843]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 3, 0]
target tensor([2, 3, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0005, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.4437,  -3.9950,   3.7019,   6.4426, -10.2924],
        [ -5.9853, -10.2917,  14.2649,  -4.9465,  -9.8869],
        [  1.7323,  -3.6321,  -0.5830,   2.7224,  -8.8247],
        [ -3.7026,  -6.8455,  11.3098,  -4.7865,  -1.1747]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 3, 2]
target tensor([3, 2, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.1016, grad_fn=<NllLossBackward0>)
train
input tensor([[[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  4,  -2,   0,  ...,  -4,   2,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -2,  -1,  ...,   2,  -4,  -5],
         [  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   0,   0,  ...,   2,   2,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[ 13,  -6,   0,  ...,  -1,  -3,   9],
         [  5,  -1,   0,  ...,   7,   3,   0],
         [  2,   0,  -2,  ...,   2,   4,  -8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-2.4552e+00, -5.1446e+00,  7.5632e+00, -5.0158e+00, -3.8718e+00],
        [-1.2992e+01,  1.4948e+00,  1.2570e+01, -3.9826e+00, -4.9756e+00],
        [-6.6317e+00,  5.6673e+00, -1.2002e+00, -1.0621e+01,  1.1049e-02],
        [ 7.6256e+00, -3.4110e+00, -3.5345e+00, -3.4241e+00, -5.5518e+00]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 0]
target tensor([2, 2, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0012, grad_fn=<NllLossBackward0>)
Epoch: [18][10/25]	Time 1.676 (1.716)	Data 0.009 (0.019)	Loss 0.0012 (0.1372)	Accuracy 100.000 (95.455)
train
input tensor([[[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.4631,  10.2667,  -5.5059,  -6.3772,  -4.5351],
        [-10.4982,   3.7481,   2.4401,  -7.8691,  -5.1446],
        [ -4.6584,   4.9845,  -0.4739, -16.7132,  -1.9519],
        [-11.8639,   7.0849,  -0.9970,  -8.9334,  -9.6572]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 1, 1]
target tensor([1, 1, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0613, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  4.8333,  -2.7202,  -5.7552,  -2.4259,  -5.7627],
        [ -2.8711,   5.7924,  -1.0100,  -3.9845,  -3.5127],
        [-11.0800,  -6.6121,  -2.7346,  -3.7205,  13.2276],
        [-15.0935,  -7.6976,  -5.6594,   9.8932, -17.7478]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 4, 3]
target tensor([0, 1, 4, 3])
<class 'torch.Tensor'>
loss
tensor(0.0007, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.7848,  -2.9196,   9.0498,  -0.5156,  -7.4395],
        [ -4.2416, -14.1825, -10.0745,  11.6810, -19.7469],
        [ -0.7393, -11.9037,  -5.4280,  -7.3917, -13.8602],
        [ -5.0670,   4.6302,  -2.6893,  -4.7904,  -8.0552]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 0, 1]
target tensor([2, 3, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.0028, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  2,   3,   1,  ...,  -3,  -4,   0],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -4,  ...,  -4,  -9,   5],
         [  6,  -6,   1,  ...,   0,   0,   3],
         [  0,   2,  -2,  ...,  -7,  -4,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,  -1,  -2,  ...,   0,   3,   4],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  7,  -3,  -1,  ...,   4,   1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -8.4294,   1.5170,   8.3035,  -4.6347,  -6.5253],
        [ -9.5057,  -5.1708,  11.7420,  -0.0463,  -7.5301],
        [-16.3463,  -9.2895,   0.5293,  17.2237,  -6.8620],
        [  7.3759,  -1.3381,   7.7482,  -9.0383,  -0.6437]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 3, 2]
target tensor([2, 2, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.2245, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  7.0784, -18.5147, -10.1439,  -7.2233,  -6.9083],
        [-11.6730,  -8.6329,  20.1557,  -1.5621, -20.9640],
        [-10.4212,  -3.4365,   9.9869,  -0.1423,  -9.0480],
        [ 14.9120,  -3.5408,  -7.4767,  -7.3046,  -2.6863]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 0]
target tensor([0, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(1.0699e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.6240,  -6.8528,   9.8138,   0.8089,  -8.2296],
        [-14.7244,  -6.5821,  -8.4769,  -4.0202,  16.1576],
        [ -7.8626,   5.5636, -10.0973,   1.1132,  -9.1260],
        [-17.8675,  -1.6259,   0.2361,  13.9747, -14.7764]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 4, 1, 3]
target tensor([2, 4, 1, 3])
<class 'torch.Tensor'>
loss
tensor(0.0029, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 10.6355,  -6.7985,  -2.3794,  -6.0418, -10.3827],
        [ -8.2852,  -1.1445,  11.3427,  -1.1576,  -7.5663],
        [ -8.0646,  13.4339,  -3.3292,  -5.8612,  -4.4451],
        [ -8.5014,  -4.1332,  11.7549,  -6.5095, -11.0769]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 1, 2]
target tensor([0, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(2.4736e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-13.5816, -12.9509, -10.6813,  13.7084, -11.1586],
        [ -4.2526,  -3.0300,   0.4285,  11.2727,  -7.7001],
        [-10.3711,  -7.5940,  10.7766,  -6.1907,  -8.9714],
        [ 16.1180,  -0.5033, -12.7195,  -3.1273, -10.2465]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 2, 0]
target tensor([3, 3, 2, 0])
<class 'torch.Tensor'>
loss
tensor(5.0961e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.1831,   5.5333,  -9.7417,  -1.2973,  -8.9409],
        [ -6.8472,  -9.9821,  -6.3316,  17.4914,  -8.1435],
        [  4.9735,  -0.6495,  -5.5600,   0.1265,  -7.7043],
        [-12.3120,  -3.5438,   7.2729,   0.3710, -11.7824]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 0, 2]
target tensor([1, 3, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0035, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  6.6008, -11.1248,  -3.6565,  -1.6588,  -8.6210],
        [  3.3307,  -3.2225,  -8.4912,  -2.4753,  -9.5156],
        [ -8.4353, -15.3637,  -9.5641,  15.4190,  -9.6077],
        [ -8.7284, -11.6540,   2.7900,   4.0520,  -7.9699]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 3, 3]
target tensor([0, 0, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.0635, grad_fn=<NllLossBackward0>)
Epoch: [18][20/25]	Time 1.691 (1.728)	Data 0.023 (0.019)	Loss 0.0635 (0.0890)	Accuracy 100.000 (96.429)
train
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.3237,  -6.1485,  -0.9644, -11.1746,   6.9392],
        [  6.1458,  -4.9273,  -9.8389,  -3.5769, -10.3382],
        [-10.0943,  -0.4757, -10.0672,  -0.4957,   9.5713],
        [ -5.6860,   1.3362,  -9.2405,  -1.0022,  11.8163]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 0, 4, 4]
target tensor([4, 0, 4, 4])
<class 'torch.Tensor'>
loss
tensor(0.0001, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.7974,  -4.3544,   0.6209,   4.5281,  12.5438],
        [ 13.0336, -17.2592,  -3.9865,  -4.1825, -15.2144],
        [-10.9438, -11.4218,   9.6661,  -6.6122,  -7.5074],
        [ -7.9840,   0.1860,   8.8345,   3.7231,  -8.5836]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 0, 2, 2]
target tensor([4, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0016, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.3909,   7.8935,  -0.4962,  -0.6578,  -7.9780],
        [  5.6054,  -5.3339,  -4.2714,  -1.7929,  -1.3713],
        [ -5.2354, -13.5159,   9.5049,   1.6661, -11.4986],
        [ -3.8248, -11.3744,  -7.5285,  -0.0633,  11.6812]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 2, 4]
target tensor([1, 0, 2, 4])
<class 'torch.Tensor'>
loss
tensor(0.0006, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.7376,  21.5165,  -7.8989,  -0.1974, -13.4551],
        [ -8.7792,  -1.9191,  18.2496,   1.9157, -18.0679],
        [ -4.1020,  13.7243,  -7.3452,  -3.1898,  -9.6179],
        [-22.5276,   0.6215,  12.6435,   3.6642, -13.1121]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 1, 2]
target tensor([1, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(3.3019e-05, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  2,   0,  -3,  ...,   0,   3,   4],
         [  2,   0,   0,  ...,   7,   0,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         [  1,  -1,  -1,  ...,   0,   2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -4.8429,  -2.8296,  -1.6308,   3.6085, -11.0220],
        [ -5.8490,   0.6830,  -1.5856,   3.1340,  -6.7185],
        [ -4.9691,   2.0057,  -1.8787,   1.4976,  -7.2835],
        [ -6.5749,   0.7466,  -3.3308,  -0.1583,  -9.8979]])
<class 'torch.Tensor'>
[3, 3, 1, 1]
target tensor([2., 1., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.1467)
Test: [0/13]	Time 0.470 (0.470)	Loss 4.1467 (4.1467)	Accuracy 0.000 (0.000)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.4218e+00, -1.5496e-01, -2.9625e-01,  3.6675e+00, -9.4713e+00],
        [-2.9021e+00, -1.9818e-01, -9.4791e-03,  9.5448e-01, -7.6128e+00],
        [-2.3655e+00, -5.9918e-01, -5.3640e-01,  1.8813e+00, -9.8317e+00],
        [-7.4623e+00,  1.3327e+00, -1.2690e+00,  5.2005e+00, -5.6308e+00]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([2., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.6633)
evaluate
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.7517, -1.4900,  0.1386,  3.1624, -9.9266],
        [-6.2827,  0.2415, -3.3864,  2.6372, -8.2583],
        [-4.7204,  0.9753, -1.5243,  1.8377, -8.1462],
        [-4.6531,  1.3846,  0.2017,  2.3553, -6.4976]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([2., 3., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.8280)
evaluate
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.7873,  -1.0686,  -2.6930,   1.6185,  -9.6355],
        [ -7.0024,  -0.0995,  -2.1827,   1.7524, -10.9274],
        [ -2.3452,  -0.3812,  -0.6127,   1.6386,  -9.3053],
        [ -7.1456,   1.3565,  -0.4959,   1.8329, -11.3423]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([0., 1., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.9650)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.2098,  1.7669, -1.9686,  0.5127, -7.8940],
        [-3.5048, -0.2328, -1.7141,  2.9754, -9.7175],
        [-5.0520, -0.7438, -0.0930,  2.6099, -9.3616],
        [-6.5310,  0.5979, -4.0616,  1.1340, -9.7686]])
<class 'torch.Tensor'>
[1, 3, 3, 3]
target tensor([0., 2., 4., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.2733)
evaluate
input tensor([[[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.8513,  0.6722,  1.5263,  2.2691, -8.1082],
        [-3.6772,  0.3084, -1.1950,  2.5552, -7.8542],
        [-3.9082,  0.3074, -2.2487,  0.1709, -6.7532],
        [-1.9993, -0.5514, -1.5220, -0.3259, -5.2744]])
<class 'torch.Tensor'>
[3, 3, 1, 3]
target tensor([2., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.7176)
evaluate
input tensor([[[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.0127,  0.7039, -1.0774,  2.2830, -6.4737],
        [-2.7099,  0.8575, -0.9104,  1.1975, -9.3368],
        [-7.4381,  1.1320, -2.7985,  1.9854, -8.1110],
        [-4.7927,  1.6165, -1.5697,  1.7107, -8.2888]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([1., 1., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.3246)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.9912,  -1.2952,  -3.4991,   1.9758,  -8.4951],
        [ -3.1993,   1.4615,  -1.5775,   1.2918,  -4.5368],
        [ -7.0395,   0.4376,  -0.8913,   3.9723, -11.0186],
        [ -4.6220,  -0.6812,  -1.4177,   2.5478,  -9.3509]])
<class 'torch.Tensor'>
[3, 1, 3, 3]
target tensor([3., 2., 4., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.4964)
evaluate
input tensor([[[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.4189,  -0.1225,  -4.1619,   0.5922, -12.1272],
        [ -5.0080,   0.9649,   0.6654,   1.5114,  -7.6967],
        [ -8.1275,  -1.0113,  -4.7339,   1.8948,  -9.6905],
        [ -6.0123,  -0.5659,  -3.4432,   3.0571,  -9.3904]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([0., 0., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.2111)
evaluate
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.8068,  -1.6811,  -3.6439,   0.2671,  -9.9524],
        [ -5.8437,  -1.5631,  -0.2854,   2.2742,  -7.0961],
        [ -6.2282,   1.3572,  -5.2260,   5.9073, -13.6346],
        [ -3.0132,   1.4953,  -2.7285,   1.1939,  -9.0930]])
<class 'torch.Tensor'>
[3, 3, 3, 1]
target tensor([2., 4., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.6167)
evaluate
input tensor([[[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.2806,  -1.9286,  -1.9548,   0.0857,  -8.5657],
        [ -2.2212,  -0.1338,  -3.6729,   0.5937,  -9.7654],
        [ -3.2549,  -0.1460,  -1.9784,   1.0957,  -6.7243],
        [ -6.2705,  -0.1202,  -1.0485,   1.2835, -10.1412]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([0., 0., 3., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.3639)
Test: [10/13]	Time 0.508 (0.520)	Loss 2.3639 (4.3279)	Accuracy 50.000 (11.364)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.7446,   0.7096,  -5.6371,   2.5836,  -9.6887],
        [ -5.2809,   0.9157,  -3.4324,   1.2350, -11.9864],
        [ -7.7696,  -1.7983,  -6.4145,   2.1635,  -8.3302],
        [ -0.7176,  -1.2698,  -1.4657,   0.5033,  -9.4115]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([2., 3., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.8018)
evaluate
input tensor([[[  5,  -2,  -2,  ...,   0,   0,  -3],
         [  1,  -2,  -1,  ...,   2,  -4,  -5],
         [  2,   0,  -2,  ...,  -3,   4,  -5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-2.3315, -0.6542, -4.3032,  0.8814, -9.9938],
        [-3.0594,  1.0214, -2.9732,  0.4188, -5.9522]])
<class 'torch.Tensor'>
[3, 1]
target tensor([0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.9523)
epoch: 19
train
input tensor([[[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.8189,   3.4268,   7.6267,  -0.6661, -11.4590],
        [-10.0420,   2.3555,   3.1878,   1.0075,  -6.7486],
        [ -6.6242,  29.0551, -15.1569,  -4.8061,  -0.1707],
        [-12.3090,   6.0820,  -8.2082,  -0.8680,  14.6012]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 4]
target tensor([2, 2, 1, 4])
<class 'torch.Tensor'>
loss
tensor(0.1131, grad_fn=<NllLossBackward0>)
Epoch: [19][0/25]	Time 1.866 (1.866)	Data 0.024 (0.024)	Loss 0.1131 (0.1131)	Accuracy 100.000 (100.000)
train
input tensor([[[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.3866,  18.5529,  -6.7410,  -9.7034,  -4.3987],
        [ -6.1105,  -3.9282,   7.5433,  -0.5305,  -9.3784],
        [-13.0045,  -5.7631, -11.9930,  12.7107, -14.7779],
        [ -7.0150,  -2.9994,  -2.3980,  -1.6988,  15.1360]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 3, 4]
target tensor([1, 2, 3, 4])
<class 'torch.Tensor'>
loss
tensor(8.0811e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[  3,   0,   0,  ...,   1,  -3,   0],
         [  2,   0,   0,  ...,  -2,   5,   4],
         [  2,   0,  -2,  ...,   0,   2,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   0,  -2,  ...,   0,  -7,   1],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  1,   2,   3,  ...,   0,  -3,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  6,   2,   4,  ...,   3,   0,  -4],
         [  0,   0,   0,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -8.2420,   0.1234,   5.4806,  -0.3131, -11.0962],
        [ -3.4684, -11.8722, -14.0428,  16.6452, -11.3536],
        [ -8.4091,   3.6858,   7.6420,  -2.7229,  -7.0091],
        [ 11.8089,  -3.2118, -15.1206,  -0.5996,  -6.8316]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 2, 0]
target tensor([2, 3, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0067, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.4957,  -4.0049,  -6.6033,   2.2246,   1.2213],
        [-14.1780,  -2.9740,   6.7758,  -0.0238, -11.6696],
        [ 13.7670, -14.0886,  -4.1036,  -0.1968,  -9.9373],
        [ -4.4058,  -5.9762,   1.7682,   8.7760,  -9.5115]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 0, 3]
target tensor([4, 2, 0, 3])
<class 'torch.Tensor'>
loss
tensor(0.3298, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-13.9146,  -7.6449, -11.9029,  15.0325,  -4.6602],
        [ -4.2073,  -2.5634,   9.6523, -10.2441, -10.0138],
        [ -7.9819,  13.3430,  -3.3063,  -1.5953, -10.6774],
        [  8.5344, -25.8753, -13.8063,  -3.7840, -15.1531]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 1, 0]
target tensor([3, 2, 1, 0])
<class 'torch.Tensor'>
loss
tensor(2.6822e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.5999,   8.8133,  -2.4647,  -2.8712,  -7.8825],
        [  1.2178,  -3.2205,  -9.8499,  -1.6246,  -8.6871],
        [ 16.9942,   1.7446, -16.1106,  -8.3462,  -4.2913],
        [ 15.0890,  -5.5992, -11.8363,  -4.9465,  -6.9273]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 0, 0]
target tensor([1, 0, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.0170, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 18.3677, -13.0135, -14.8052,  -8.3597, -16.6278],
        [ -8.1185,  -0.2458,  -6.6549,  14.1200, -14.3036],
        [ -7.3510,  10.1242,  -8.1820,  -7.6050, -11.1280],
        [ -5.7231,  -6.6690,   9.9179,  -3.7922,  -5.4058]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 1, 2]
target tensor([0, 3, 1, 2])
<class 'torch.Tensor'>
loss
tensor(5.3644e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  2,  -2,  -2,  ...,   1,   0,  10],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   2,  -2,  ...,   0,   1,  -6],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [ 13,  -6,   0,  ...,  -1,  -3,   9],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   4,   0,  ...,   0,   0,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-10.6568,   2.7805,  14.9068,  -5.1196,  -8.3658],
        [-11.4382,  16.0703,  -5.6879,   1.7113,  -7.0589],
        [ -6.3586,  -5.7234,   0.2163,   6.6728,  -9.1417],
        [  4.5591,  -1.3735,  -4.7784,  -4.0379,  -8.3126]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 3, 0]
target tensor([2, 1, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0011, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.1754,  -8.2087,   9.2927,  -2.1766,   1.2814],
        [ -7.5445,   9.5718, -11.6529,  -6.5555,  -5.5512],
        [ -1.1058,  -1.2249,   9.0255,  -4.8286,  -1.8418],
        [ -4.3356,   1.3810,   2.6258,  -2.1209,  -9.6733]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 2, 2]
target tensor([2, 1, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0652, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.6592,  -4.2273,  -6.1935,   8.7110,  -7.1722],
        [-19.1296,  -7.0178, -12.6707,  21.4160,  -9.6638],
        [ -7.0189, -10.9758,  15.1470,  -1.2914,  -4.2276],
        [  5.2029,  -6.3838, -11.3874,  -6.0585,  -2.6093]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 2, 0]
target tensor([3, 3, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0001, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 11.9770, -13.5190,  -6.5102,  -8.0685,  -5.5980],
        [  0.1398,  -2.4031,   5.8780,  -4.9270,  -6.2154],
        [-26.4978,  29.6896,  -5.4531, -16.6211,   5.2021],
        [ -7.2656,  -0.6758,   3.6967,  -5.6130,  -4.1578]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 1, 2]
target tensor([0, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0041, grad_fn=<NllLossBackward0>)
Epoch: [19][10/25]	Time 2.369 (1.795)	Data 0.030 (0.025)	Loss 0.0041 (0.0488)	Accuracy 100.000 (97.727)
train
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.0248,   2.2055,   9.1259,  -5.8285,  -6.9922],
        [ -7.0909,   6.1432, -10.8792,   8.9097,  -2.1568],
        [ -4.7991,  17.7078,  -1.5975,  -7.1090,   0.4534],
        [-20.0901,  -4.2206,  -7.6102,  -2.8272,  21.4100]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 1, 4]
target tensor([2, 3, 1, 4])
<class 'torch.Tensor'>
loss
tensor(0.0155, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.8939,  -2.6294,  16.8230,  -4.5382, -20.9056],
        [ -6.8522,  -4.4156,  -5.2563,  -0.7741,  -4.8922],
        [ -7.4035,   9.3728,  -1.6199,  -1.5270,  -4.2053],
        [-17.3727,  19.3724, -11.0636,  -5.5013,  -1.0306]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 1, 1]
target tensor([2, 3, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0137, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  9.3409,  -4.5603, -13.6812,   0.8270,  -5.5447],
        [  0.0334,   7.1383,  -2.2198,  -1.9333,  -1.4068],
        [ -6.4035,   1.3010,  13.5906,  -9.2713,  -6.0274],
        [-13.8163,  -6.5346,  -4.2411,  12.3975,  -9.9708]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 2, 3]
target tensor([0, 1, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0004, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.7165, -15.2292,   0.2345,  22.5219,  -9.0801],
        [ -5.2685,  -9.1085, -11.8942,   9.7712,  -9.8239],
        [ -4.3167,  21.6325,  -3.3590, -12.5629,  -3.7179],
        [ -1.7131, -11.2440,  -6.6091,  12.3686,  -3.6139]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 1, 3]
target tensor([3, 3, 1, 3])
<class 'torch.Tensor'>
loss
tensor(2.9802e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-8.1450,  8.4211, -2.1786,  0.7430, -1.1776],
        [-3.5500, -7.6592, -8.3792, -2.1805,  9.4546],
        [-5.9214, -3.3498,  6.8376, -5.5001, -1.4588],
        [ 6.9894, -4.9324, -3.3242, -3.6900, -4.1549]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 4, 2, 0]
target tensor([1, 4, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  7.6899,  -4.0300,  -3.7873,  -7.7854,  -5.2791],
        [  4.2247,  -3.4503,  -5.7696,  -4.6070,  -5.4360],
        [-13.1042,  -7.2305,  17.1956,  -4.3435,  -9.7234],
        [ -8.2508,  -5.6482,   9.4419,  -5.2414,  -5.3435]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 2, 2]
target tensor([0, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.7991, -12.4738,  14.7176,  -4.1250,  -5.7572],
        [-10.1040,  -2.7403,   8.4098,  -4.8536,  -4.7118],
        [-19.1884,  -1.4157,  10.7576, -16.7212,  -5.2403],
        [  7.1228,   2.2431,  -1.8341,  -8.3525,  -1.7960]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 0]
target tensor([2, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0020, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.4596,  -6.0821,   6.3968,  -4.6031,  -2.4913],
        [ -6.1364,   0.3674,   4.9845,  -6.3488, -13.1260],
        [  5.1840,  -2.8114,  -8.7029,  -4.9327,  -6.7611],
        [ -2.4182,   1.9097, -10.4072,   8.9793,  -0.1081]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 0, 3]
target tensor([2, 2, 0, 3])
<class 'torch.Tensor'>
loss
tensor(0.0028, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.8068,   8.1290,  -9.2904,  -5.8465,  -4.8321],
        [-18.1725,  -8.1122,  -2.9855,  19.7649,  -5.4260],
        [-11.5478,  17.1607,  -8.9917,  -8.7448,  -8.0163],
        [ -3.1924,   1.9837,  -2.5495,  -0.9337,  -6.0097]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 1, 1]
target tensor([1, 3, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0171, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.2503,  -0.8978,  -7.9985,  -3.4628,   6.4671],
        [ -9.4163,  -6.0243, -10.2535,  -9.3010,  27.1514],
        [  9.2674,  -8.8743, -12.3999,  -8.7215,  -0.9941],
        [  6.8738,  -3.2835,  -4.1505,  -4.5778,  -2.4860]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 4, 0, 0]
target tensor([0, 4, 0, 0])
<class 'torch.Tensor'>
loss
tensor(2.1796, grad_fn=<NllLossBackward0>)
Epoch: [19][20/25]	Time 1.716 (1.755)	Data 0.027 (0.024)	Loss 2.1796 (0.1318)	Accuracy 75.000 (97.619)
train
input tensor([[[  2,   1,   0,  ...,   0,  -1,   0],
         [  1,   0,   0,  ...,   2,   1,   3],
         [  3,   0,   1,  ...,   2,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   3,  -1,  ...,   0,  -3,   5],
         [  1,  -1,  -1,  ...,  -1,  -3,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   0,  -2,  ...,   2,  -4,   0],
         [  0,   1,  -1,  ...,  -5,   4,   0],
         [  1,   2,  -2,  ...,  -6,  -5,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -9.6883,  -8.7808,  16.1816,  -8.7082,  -7.6643],
        [ -6.1155,   8.9048,  -8.4171, -10.0144,  -7.3347],
        [ -3.2047,  -4.6165,   7.3657,  -2.3226,  -3.7275],
        [-16.8578,  -4.6343,   9.4257,  -4.0484,  -5.5637]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 2, 2]
target tensor([2, 1, 2, 2])
<class 'torch.Tensor'>
loss
tensor(2.8072e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 14.3558, -10.3328,  -6.1129, -13.5162,  -4.5889],
        [ -3.1614,  -6.7151,   3.7370,  -7.4326,  -6.0142],
        [ -0.9870, -15.6087,  -4.5337,   2.1859,  -3.1719],
        [ -7.1262,  11.9557,  -1.9015,  -8.9588,  -2.4521]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 3, 1]
target tensor([0, 2, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.0120, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.1576, -11.1630,  14.7453,  -3.6242,  -5.3574],
        [ -2.3697,  -2.8725,  -8.9353,  -8.2705,  20.7801],
        [ -1.3331,   7.4192,  -7.7585,  -5.1318,  -0.6871],
        [ -0.1579,   3.1768, -11.6149,  -4.6170,  20.4273]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 4, 1, 4]
target tensor([2, 4, 1, 4])
<class 'torch.Tensor'>
loss
tensor(0.0001, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.7924, -11.6064,  10.4513,   1.1128,  -7.0978],
        [ -6.7688,  -9.9577,  17.2614, -14.1914,  -6.1637],
        [ -5.3577,  13.1165,  -6.7832,  -3.8370,  -2.6627],
        [ -2.3838,  14.3752,  -6.9299, -18.1979,  -1.2838]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 1]
target tensor([2, 2, 1, 1])
<class 'torch.Tensor'>
loss
tensor(2.2500e-05, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 0.4509, -2.8371, -0.3149, -2.2271, -7.1114],
        [ 3.4380, -3.8902, -3.1532, -6.3951, -5.5753],
        [ 0.7695, -3.0783, -3.1498, -6.7742, -4.8610],
        [-0.0295, -2.0589, -0.6880, -2.8484, -4.0227]])
<class 'torch.Tensor'>
[0, 0, 0, 0]
target tensor([2., 0., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.4325)
Test: [0/13]	Time 0.488 (0.488)	Loss 1.4325 (1.4325)	Accuracy 50.000 (50.000)
evaluate
input tensor([[[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-0.7842, -2.2544, -0.3998, -3.1325, -3.9684],
        [-0.7764, -3.9816,  1.4116, -1.3455, -7.4333],
        [-1.1207, -3.2406,  0.6158, -4.9209, -6.6537],
        [ 0.0102, -2.7303,  1.3011, -3.5178, -5.5286]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 2., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.1657)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-0.5107, -3.2957,  1.6885, -1.9997, -6.3089],
        [-1.4003, -5.1765, -2.8413, -6.8451, -5.7979],
        [-0.8677, -3.3822,  0.4522, -3.6665, -3.4016],
        [ 0.1608, -2.9590, -1.3238, -6.6395, -6.9090]])
<class 'torch.Tensor'>
[2, 0, 2, 0]
target tensor([2., 2., 1., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.2442)
evaluate
input tensor([[[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 1.2366, -3.1800, -0.0311, -5.0537, -3.0805],
        [ 0.5565, -6.9242, -0.0370, -3.7148, -7.0186],
        [-0.0291, -3.6163,  1.0076, -3.0209, -5.8455],
        [-0.3131, -3.4427, -2.0883, -4.7397, -3.9740]])
<class 'torch.Tensor'>
[0, 0, 2, 0]
target tensor([3., 2., 4., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.8576)
evaluate
input tensor([[[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-0.3077, -1.3197,  1.0195, -3.2386, -2.5013],
        [ 2.8353, -0.8538, -0.6925, -4.5323, -5.3065],
        [ 0.4283, -4.0940, -0.0427, -4.0246, -4.8785],
        [-1.4272, -5.5551, -5.0103, -5.7195, -4.5927]])
<class 'torch.Tensor'>
[2, 0, 0, 0]
target tensor([3., 0., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.2081)
evaluate
input tensor([[[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.0352, -4.4170, -1.8552, -6.9238, -7.3979],
        [ 0.1304, -0.8922, -0.4984, -2.5759, -1.5622],
        [ 1.8789, -3.7859, -0.9569, -7.3232, -3.3785],
        [-0.3695, -2.1445, -0.3522, -3.2535, -5.4220]])
<class 'torch.Tensor'>
[0, 0, 0, 2]
target tensor([0., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.3692)
evaluate
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 0.7856, -1.6707,  0.1436, -3.0256, -6.6674],
        [-1.5913, -2.3634,  2.9712, -3.2896, -4.3810],
        [ 2.4054, -4.7407, -2.0407, -4.4860, -5.2591],
        [ 0.3833, -3.6778, -4.0635, -2.7491, -8.3430]])
<class 'torch.Tensor'>
[0, 2, 0, 0]
target tensor([1., 2., 3., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.4852)
evaluate
input tensor([[[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.7977, -3.3037,  0.6997, -2.6570, -6.4816],
        [ 1.6560, -2.9193,  0.6931, -2.8821, -6.7045],
        [ 3.2080, -5.1541, -1.6318, -5.3634, -5.0873],
        [-0.5476, -4.5774,  0.8511, -4.2400, -3.2816]])
<class 'torch.Tensor'>
[2, 0, 0, 2]
target tensor([4., 2., 0., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.2484)
evaluate
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 0.5710, -1.5188, -1.8644, -3.1279, -7.2154],
        [ 0.1888, -4.8986, -0.3202, -6.9510, -4.7174],
        [ 0.5236, -3.0931,  0.8333, -1.7570, -8.2553],
        [-0.0949, -5.6642, -2.1156, -7.1676, -6.7476]])
<class 'torch.Tensor'>
[0, 0, 2, 0]
target tensor([2., 0., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.4519)
evaluate
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.3201e+00, -2.7539e+00, -9.1648e-01, -6.6889e+00, -3.0695e+00],
        [ 3.4488e-01, -2.4762e+00,  1.3975e-01, -2.0857e+00, -5.6389e+00],
        [-2.0888e-03, -2.6765e+00, -1.9743e+00, -7.3418e+00, -5.7317e+00],
        [-1.0359e+00, -6.5446e-01, -5.7772e-01, -3.1710e+00, -4.0238e+00]])
<class 'torch.Tensor'>
[2, 0, 0, 2]
target tensor([0., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.4492)
evaluate
input tensor([[[  0,   0,  -2,  ...,  -4,   5,  -5],
         [  3,  -1,   0,  ...,  -1,   0,   4],
         [  0,   0,   0,  ...,   0,   0,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   2,  ...,   5,  -7,  -4],
         [  1,   0,   0,  ...,   2,  -3,  -1],
         [  1,  -3,  -1,  ...,   3,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -3,  ...,  -2,   0,  -6],
         [  7,  -4,   0,  ...,   0,   1,   1],
         [ 11,  -5,   2,  ...,  -3,   6,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-3.0594e+00, -1.8500e+00,  2.3890e-01,  8.6558e-04, -2.6726e+00],
        [-8.1868e-01, -3.3707e+00, -9.7155e-01, -7.9292e+00, -5.7089e+00],
        [-1.5029e+00, -2.0771e+00,  1.7342e+00, -2.9909e+00, -5.3084e+00],
        [ 3.2036e+00, -3.8880e+00, -1.5118e-01, -4.0290e+00, -7.4071e+00]])
<class 'torch.Tensor'>
[2, 0, 2, 0]
target tensor([2., 2., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.2136)
Test: [10/13]	Time 0.529 (0.520)	Loss 1.2136 (2.3751)	Accuracy 50.000 (36.364)
evaluate
input tensor([[[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,   0,  ...,  -1,  -3,  -1],
         [  5,   0,   0,  ...,   6,  -1,   7],
         [  0,   1,  -4,  ...,   0,  -1,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,  -1,  ...,   1,   1,   3],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,   0,   0,  ...,   0,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   0,  -2,  ...,   2,  -4,   0],
         [  2,  -2,  -2,  ...,   6,   1,  -6],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ 1.7198, -1.8640, -2.0736, -5.6642, -2.9522],
        [-1.2657, -1.9874,  1.6678, -5.0965, -7.4969],
        [ 0.7659, -2.0630, -0.6450, -5.7773, -4.2144],
        [-0.4049, -4.1840, -1.7542, -3.8677, -5.3960]])
<class 'torch.Tensor'>
[0, 2, 0, 0]
target tensor([1., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.1117)
evaluate
input tensor([[[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 2.4194, -3.1780, -1.9966, -6.3047, -5.6975],
        [-1.5464, -3.8393, -0.2972, -4.9049, -7.4143]])
<class 'torch.Tensor'>
[0, 2]
target tensor([0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.9204)
epoch: 20
train
input tensor([[[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.8534,  -3.6128,  -1.1865,   7.6939, -15.9816],
        [-13.8394,  -3.0622,  -1.5702,  19.5248,  -3.6650],
        [ -2.6650, -12.2494,  -5.8855,  12.1394,  -6.0795],
        [ -1.2889,  -3.9166,  -2.3739,   6.3743, -10.1288]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([3, 3, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
Epoch: [20][0/25]	Time 1.896 (1.896)	Data 0.024 (0.024)	Loss 0.0002 (0.0002)	Accuracy 100.000 (100.000)
train
input tensor([[[  1,   1,  -4,  ...,  -4,   2,   1],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  2,   0,  -3,  ...,   0,   3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -2,  ...,   0,  -3,   0],
         [ 11,  -5,   2,  ...,  -3,   6,   3],
         [  6,  -4,  -1,  ...,   0,   0,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  1,   0,  -1,  ...,   4,   4,   1],
         [  2,   0,  -1,  ...,  -1,   2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -3.9716, -10.9467,  10.8631,   0.0547,  -9.6462],
        [ 12.5603,  -5.3596,  -2.1812, -15.1566, -10.7814],
        [ 15.8501, -16.9846,  -8.0503,  -7.3180,  -5.9765],
        [ -6.4025, -10.8384,   6.7241,  -8.0568,  -9.4372]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 0, 2]
target tensor([2, 0, 0, 2])
<class 'torch.Tensor'>
loss
tensor(5.8710e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.2351,   4.2349,  -1.1649,  -1.8013,  -6.8458],
        [ 17.2291, -16.1100, -12.2407, -10.7213,  -9.4841],
        [  5.6665,  -8.5395, -12.3025,  -9.9806,   6.8776],
        [ -4.1534,  -3.6782,  14.1512,  -6.3505,  -8.7140]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 4, 2]
target tensor([1, 0, 4, 2])
<class 'torch.Tensor'>
loss
tensor(0.0790, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.1502,  -6.2294,  11.2153,  -5.9735,  -4.0631],
        [ -1.5841,  -6.1501,   9.1937,  -6.0468,  -6.1959],
        [  5.0053,  11.9820,   2.5901,  -9.0272, -10.3845],
        [ -9.3532,  12.3750,  -3.2111,  -5.3076,  -3.8670]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 1]
target tensor([2, 2, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  4.0498,  -5.1247, -15.5245, -10.7979,  10.5323],
        [-12.7658,  -1.0087,  12.1436, -13.1182, -10.5056],
        [ 16.8650,  -5.2895, -10.8781,  -7.1012,  -8.5924],
        [ -4.4522,   8.9803,  -5.3353,  -4.3354,  -8.7137]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 0, 1]
target tensor([4, 2, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.0004, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  7.8043,  -4.2141,   2.2557,  -8.8619,  11.4021],
        [ -3.0245,  -8.1966,  -0.0913,   8.3443,  -5.2424],
        [  2.7113, -12.5959,  -5.2271,   8.6321,  -5.7703],
        [  1.6925, -11.4847, -11.8924, -16.4490,  15.9226]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 3, 3, 4]
target tensor([4, 3, 3, 4])
<class 'torch.Tensor'>
loss
tensor(0.0075, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,   0,  -2,  ...,   0,  -7,   1],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  1,   2,   3,  ...,   0,  -3,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   1,   1,  ...,   9,   3,  -2],
         [  4,  -1,   0,  ...,  -1,   2,   2],
         [ -1,   0,  -1,  ...,  -3,   8,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  2,   3,   1,  ...,  -3,  -4,   0],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  4.3675,  -9.9645,  -1.6886,   5.6971, -14.8446],
        [ -2.4392,  -7.0818,   6.5864,  -1.4453,  -5.7224],
        [ -9.6601,  -9.8134,  11.6435,  -7.6714, -13.0247],
        [  5.8598,   4.7628,  -7.5697, -11.1233,   1.2121]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 2, 0]
target tensor([3, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.4070, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.8150,  -1.0135,   6.0793,  -7.2299, -11.8572],
        [ -6.1397,  11.8320,  -6.6613, -16.8909,  -8.8442],
        [ -2.7462,   1.8555,  -3.2540,  -9.2732,  14.9216],
        [  0.2531,   9.9475,  -5.8122, -12.1420,  -3.3279]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 4, 1]
target tensor([2, 1, 4, 1])
<class 'torch.Tensor'>
loss
tensor(0.0037, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.7403,  -2.5839, -10.9686, -11.9084,  13.7709],
        [ 11.8975,  -3.8709,  -3.7288,  -5.8384,  -6.3175],
        [ -3.3040,  15.9492,  -9.1180, -11.2940,  -4.8242],
        [ -3.6660,  -2.0019,   8.1394,  -2.7985,  -6.9716]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 0, 1, 2]
target tensor([4, 0, 1, 2])
<class 'torch.Tensor'>
loss
tensor(1.7791e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-14.6180,  -3.3822,  -3.5581, -11.0194,  19.7702],
        [ -2.6550,  -4.6101,   7.7230,  -3.9226, -10.5401],
        [ 20.5546,  -7.4806,  -7.7352,  -7.0988, -17.2225],
        [ -4.0020,  -2.8495,  18.0147,  -9.2820,  -8.6316]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 0, 2]
target tensor([4, 2, 0, 2])
<class 'torch.Tensor'>
loss
tensor(1.1056e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.8599,  -8.3435,  15.2765,  -1.3800,  -7.1809],
        [ -2.4870, -17.3569,   6.9973,  -5.2499,  -7.7661],
        [-20.3797,  42.0090,   3.2808, -12.4125,  -9.9669],
        [  6.1665,  -5.9091,  -4.8734,  -4.8194,  -4.4976]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 0]
target tensor([2, 2, 1, 0])
<class 'torch.Tensor'>
loss
tensor(3.5821e-05, grad_fn=<NllLossBackward0>)
Epoch: [20][10/25]	Time 1.661 (1.745)	Data 0.012 (0.023)	Loss 0.0000 (0.0453)	Accuracy 100.000 (97.727)
train
input tensor([[[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 22.5243, -11.5319, -15.4205,  -8.4986, -15.0682],
        [  4.1728,  -4.1221, -11.5456, -24.1784,  31.9983],
        [  8.7665,  -6.5142,  -5.5144,  -6.8608,  -8.1020],
        [ -2.5061,  -6.2335,   7.2406,   0.0446,  -8.2803]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 4, 0, 2]
target tensor([0, 4, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[  0,   0,  -2,  ...,  -4,   5,  -5],
         [  3,  -2,   0,  ...,  -3,  -1,   8],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -4,  ...,  -4,  -9,   5],
         [  6,  -6,   1,  ...,   0,   0,   3],
         [  0,   2,  -2,  ...,  -7,  -4,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   0,   1,  ...,   1,   3,   0],
         [ 11,  -5,   2,  ...,  -3,   6,   3],
         [  2,   0,  -1,  ...,  -3,   2,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -6.4809,  -8.3312,   8.8109,   1.9324,  -6.7719],
        [-12.4270,  -1.5404, -13.7890,   8.8956, -14.2617],
        [ -3.4110,  -2.8319,   5.9546,  -8.8964, -11.5441],
        [ -9.1624, -10.8773,  -6.9428,   5.5937,  -8.3865]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 2, 3]
target tensor([2, 3, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 24.5637,  -6.9574, -11.7611,  -7.8456,  -5.4488],
        [ -3.3879,  -6.1492,  11.1510,  -7.9288,  -9.8445],
        [ -8.1581,  -3.1036,  -8.3286,  13.5043,  -5.3396],
        [ -7.5750,  14.6790,  -9.3921,  -4.9778,  -5.1097]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 3, 1]
target tensor([0, 2, 3, 1])
<class 'torch.Tensor'>
loss
tensor(1.4901e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.8498,  -6.7986,  -6.1984,  12.5409, -13.8222],
        [-11.2086,   8.4751,  -3.8497,  -7.3842, -11.0516],
        [ -3.3332,  -3.3708,   6.1556, -14.6925, -10.0851],
        [-10.0059,  -5.2724,  -9.3349,  14.4844, -12.4287]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 2, 3]
target tensor([3, 1, 2, 3])
<class 'torch.Tensor'>
loss
tensor(3.8323e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.1361,  -0.3489,   5.8839,  -2.6611,  -9.4513],
        [ 11.7645,   0.6957,  -4.9922,  -6.2151,  -8.3970],
        [ -7.0573,  -4.7411,   9.8594,  -2.4735, -10.5335],
        [ -7.3324,   1.5088,   9.2403,  -7.0078,  -8.8730]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 2]
target tensor([2, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0007, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.7225,   4.3913,  17.7147,  -7.5307, -17.4036],
        [ -1.5568,   5.3623,  -0.3596,  -1.2669,  -6.9282],
        [  6.1118,  -2.0354,  -2.7890,  -1.0636,  -6.7601],
        [  2.3535, -10.2494,  -5.5938,  -2.8710, -10.3709]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 0, 0]
target tensor([2, 1, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.0031, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.2445,   7.3355,  10.8522,  -7.6314,  -5.2823],
        [  3.7555,  -5.3587,  -7.6751,  -4.9500, -15.5579],
        [ -1.3118,  15.0153,  -5.7739,  -3.9286, -12.5273],
        [  4.5446,   2.8345,  -4.2795,  -7.9692,  -6.0825]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 1, 0]
target tensor([2, 0, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0490, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-13.3196,  -3.1091,  -6.1985,  20.4105, -15.1789],
        [ -4.8024,  15.1497,  -5.7010,  -7.5160,  -8.0318],
        [-20.6572,  -7.0682,  17.7384,  -4.7303, -26.2359],
        [ -5.7855,  19.7310,  -3.5449,  -8.9763,  -7.9998]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 2, 1]
target tensor([3, 1, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.5158,  10.2433,   9.9945,  -9.1996, -14.1460],
        [-15.6318,  -3.6861, -13.2843,   6.9496, -12.7260],
        [-11.9636,   0.4397,   7.0731,  -2.7176, -12.9162],
        [  8.2004,  -4.1786,  -5.9336,  -5.4260,  -5.2527]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 2, 0]
target tensor([2, 3, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.2067, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.7540,  -4.4874,  18.2365,  -5.5539, -17.3893],
        [  5.4900,  -2.2251,  -2.8535,  -3.1388, -11.7872],
        [-10.1311,  16.8305,   4.5483,  -8.8982,  -6.7463],
        [ -7.7421,  -6.6796,  -3.5097,   8.5036,  -7.3262]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 1, 3]
target tensor([2, 0, 1, 3])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
Epoch: [20][20/25]	Time 1.858 (1.735)	Data 0.027 (0.022)	Loss 0.0002 (0.0361)	Accuracy 100.000 (97.619)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-14.7092,   3.4189,  -3.1146,   8.3465, -15.3708],
        [ -8.5406,  -8.7002,  21.1567,  -0.1705, -10.4607],
        [ -8.1168,  33.5548,  -8.7594,  -8.6838,  -3.2151],
        [ -2.3832,  -4.0256,  10.6736,  -2.9679, -16.1769]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 1, 2]
target tensor([3, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0018, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.1980,  19.4916,  -4.4212, -11.6104,  -6.4847],
        [  4.5917,  -2.2583,  -5.2460,  -6.9541,  -6.9747],
        [ -9.3272,  15.8441,   0.3570,  -0.7911,  -8.5374],
        [-11.3368,  -5.2881,  12.3282, -10.9104, -14.8332]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 1, 2]
target tensor([1, 0, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 15.3174,  -8.8533,  -1.6558, -22.8243,  -6.0416],
        [ -6.4207,   9.7465,  -3.7458,  -5.0877,  -8.9029],
        [ -8.1368,  10.3018,  -2.8548, -10.2515,  -4.4327],
        [-11.5453,  -1.8487,  10.8453,  -2.7209,  -7.8300]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 1, 2]
target tensor([0, 1, 1, 2])
<class 'torch.Tensor'>
loss
tensor(2.1458e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  8.4608,  -9.6796,  -3.1733, -13.0233,  -6.5900],
        [ -5.0480,  -5.8567,  -8.7382,   7.4289, -11.2932],
        [ -6.4369,  19.4497,  -1.4535,  -4.0938,  -1.5087],
        [-13.5458,  -1.3038,   9.2560,  -7.4555,  -7.7085]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 1, 2]
target tensor([0, 3, 1, 2])
<class 'torch.Tensor'>
loss
tensor(1.0162e-05, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[  7,  -4,   0,  ...,  -1,   1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  4,  -3,   0,  ...,  -1,   1,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   2,  -2,  ...,  -3,  -1,   0],
         [  2,  -2,  -1,  ...,   2,  -3,   4],
         [  0,  -2,  -5,  ...,   0,   4,   7],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,   0,  ...,   0,  -6,  -4],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   1,   3,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-5.7793, -0.5340,  4.2935, -1.2449, -8.2667],
        [-3.9171, -0.5106,  2.3426, -1.2458, -9.1260],
        [-2.6507, -1.5991,  3.0909, -0.6611, -9.9474],
        [-3.9673,  0.5842,  0.8080, -3.5445, -5.4855]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([4., 2., 1., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.5513)
Test: [0/13]	Time 0.483 (0.483)	Loss 4.5513 (4.5513)	Accuracy 25.000 (25.000)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-8.0180,  1.9045,  1.7075, -4.2546, -8.8004],
        [-3.0749,  0.1254,  2.1154, -2.0368, -8.1219],
        [-6.5993, -0.4872,  4.7332,  0.1433, -8.2519],
        [-8.7933,  1.0314,  3.3018, -4.3050, -5.6167]])
<class 'torch.Tensor'>
[1, 2, 2, 2]
target tensor([2., 1., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.7859)
evaluate
input tensor([[[  3,  -1,   1,  ...,   4,   5,   0],
         [  3,   6,   0,  ...,  -4,   0,   4],
         [  2,  -2,  -2,  ...,   6,   1,  -6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  2,   0,  -3,  ...,   0,   3,   4],
         [  2,   0,   0,  ...,   7,   0,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   4,   0,  ...,   2,   5,   1],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,  -2,   2,  ...,   0,   5,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-8.8614,  0.1205,  4.2553, -0.8989, -8.5873],
        [-6.8878, -0.4939,  4.9357, -1.9129, -6.4240],
        [-8.2760, -0.2112,  3.2661, -2.6705, -9.8744],
        [-9.0887,  0.1071,  3.7206, -6.2475, -8.2860]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([4., 1., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.4591)
evaluate
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.5092, -0.8248,  1.7006, -1.7080, -7.5349],
        [-7.5349,  1.1206,  5.7642, -3.3281, -9.6236],
        [-8.7194, -1.2535,  1.8251, -5.2658, -8.9587],
        [-3.9670, -0.4993,  3.5027, -3.4939, -5.3883]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 2., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.7948)
evaluate
input tensor([[[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.2387,  0.9867,  3.6368, -3.5293, -6.3084],
        [-3.7108, -0.2827,  2.5730, -1.0321, -7.4024],
        [-3.8686,  0.6938,  0.4115, -1.9817, -9.1435],
        [-2.4283, -0.7716,  0.9790, -1.8030, -5.0995]])
<class 'torch.Tensor'>
[2, 2, 1, 2]
target tensor([1., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.8345)
evaluate
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-8.4395,  1.3122,  4.0110,  1.5983, -4.8020],
        [-5.8414, -1.2437,  2.5749, -5.5252, -7.1882],
        [-8.5845, -1.6497, -0.8758, -4.2669, -7.4844],
        [-4.8222, -0.2981,  3.2998, -5.1939, -6.3093]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 0., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.2538)
evaluate
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.2630, -1.0589,  2.1220, -3.2108, -7.9229],
        [-5.0424, -0.0327,  3.7873, -2.3294, -7.0738],
        [-8.8716, -0.2863,  1.8831, -4.2379, -9.8309],
        [-4.0900,  0.4032,  0.9631, -4.6031, -8.0889]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 2., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.7081)
evaluate
input tensor([[[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.1469, -0.4176,  0.4038, -3.6002, -7.7124],
        [-6.4553, -1.3397,  3.7727, -2.5471, -5.5649],
        [-7.4259, -0.4773,  1.7747, -2.6860, -7.1437],
        [-7.0065,  0.0135,  6.1463, -1.6814, -6.3479]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 4., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.7137)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.7587,  -4.4838,   3.4583,  -1.4640, -10.2976],
        [ -8.1653,   0.4506,   0.7604,   0.5209, -11.2084],
        [ -7.0642,  -0.3346,   4.1249,  -3.1855,  -8.8322],
        [ -4.5485,  -1.7790,   4.1325,  -0.9826,  -9.4657]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 0., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.2973)
evaluate
input tensor([[[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.2671, -1.6526,  1.8072, -2.7497, -9.5422],
        [-5.6446, -0.8206,  3.2048, -1.9883, -6.6329],
        [-6.5594,  0.8007,  3.8577, -1.5092, -6.6757],
        [-1.6931,  1.2150,  1.4598, -3.2344, -7.7989]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 0., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.5648)
evaluate
input tensor([[[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-7.2596,  0.8370,  2.4329, -4.0602, -9.2745],
        [-6.5354, -2.3743,  1.5024, -5.4244, -9.0810],
        [-5.4463,  0.5506,  4.1710, -1.9542, -4.4512],
        [-3.9355,  1.1045,  1.5654, -1.9949, -3.1108]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([3., 2., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.3423)
Test: [10/13]	Time 0.562 (0.521)	Loss 3.3423 (4.0278)	Accuracy 50.000 (36.364)
evaluate
input tensor([[[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.6888,  0.3663,  3.2539, -2.0334, -7.4568],
        [-5.7229,  0.9102,  2.9350, -1.5763, -6.0166],
        [-5.8597,  1.6590,  2.3214, -1.9238, -5.8497],
        [-3.9106, -1.6666,  1.7544, -3.2461, -8.1536]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 1., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.9215)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.7204,  1.1686,  2.0149, -5.0132, -8.7411],
        [-3.2144, -0.2447,  2.8716, -1.6836, -8.8541]])
<class 'torch.Tensor'>
[2, 2]
target tensor([1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.6298)
epoch: 21
train
input tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.5794,  19.7281,  -4.7226,  -4.2695, -10.0939],
        [ -8.3312,  13.6800,   2.8724, -14.9811, -10.9333],
        [ -7.8835,   9.8419,  -3.1424,  -5.5435,  -3.9264],
        [  7.2075,  -4.1016,  -3.4124,  -4.3577,  -7.4042]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 1, 0]
target tensor([1, 1, 1, 0])
<class 'torch.Tensor'>
loss
tensor(1.7643e-05, grad_fn=<NllLossBackward0>)
Epoch: [21][0/25]	Time 1.763 (1.763)	Data 0.024 (0.024)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.5217,  -9.9161,  -5.4672,  -2.6349, -10.0040],
        [ -8.6107,  14.7845,   0.5150,   0.8066,  -4.9252],
        [ 19.1059,  -3.7479, -10.4357,  -9.2799,  -7.2302],
        [-12.5391,  -5.3183,  14.9409,  -1.3256, -10.5075]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 0, 2]
target tensor([0, 1, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.1665, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.0057,   8.9352, -10.8408, -10.5296,  -4.5557],
        [ -5.9315,   9.1188,   3.0950,  -7.5691,  -9.0247],
        [ -5.6590,  -4.1734,  10.5894,  -2.2383,  -8.6299],
        [-22.5831,  41.5891,   2.4823,  -9.0539,  -9.3921]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 1]
target tensor([1, 1, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0006, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.6909,  -8.3657,   5.0147, -12.9235, -14.8030],
        [ -3.7963,  -5.8958,   9.8415,   0.8884,  -8.1637],
        [-17.0099,  26.0928,  -0.0720, -19.3719, -12.0970],
        [-15.5304,  -4.5507,  -3.9172,   4.7994, -13.8460]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 3]
target tensor([0, 2, 1, 3])
<class 'torch.Tensor'>
loss
tensor(0.3900, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.0950,  -6.0494,  -2.3541,   8.0776,  -4.9743],
        [ -8.4564, -12.5652,  17.2335,  -4.3349, -21.4139],
        [-15.7065,  -1.3595,   2.0104,  19.1123,  -2.6896],
        [ -8.4993,  19.0324,   1.1890,  -6.1378,  -6.7717]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 3, 1]
target tensor([3, 2, 3, 1])
<class 'torch.Tensor'>
loss
tensor(8.1061e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.2115,  -4.2429,   1.7075, -16.7553,   9.8316],
        [-12.9066,   9.7350,   1.1101, -12.4048,  -7.7073],
        [ -9.2691,  -0.3112,  -8.5174,  14.8260, -10.1365],
        [ 13.4960,  -0.1351,  -2.0412, -14.9317,  -6.2949]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 3, 0]
target tensor([4, 1, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0001, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 18.8084, -16.2015,  -3.6774,  -7.8731,  -9.1719],
        [ -3.6370,  -4.6849,  -1.2459,   7.3279, -13.1811],
        [ -5.7497,  -4.1447,  13.3692, -12.7545,  -3.5635],
        [ -1.9735,  -3.1626,   9.3064,  -6.9771,  -6.2030]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 2, 2]
target tensor([0, 3, 2, 2])
<class 'torch.Tensor'>
loss
tensor(5.7274e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 15.9507,  -9.3246,  -2.9206,  -9.3230,  -5.2524],
        [  8.1547,  -0.4467,  -2.2008,  -5.8117,  -8.0077],
        [ 11.8292,  -4.0607,  -3.5407,  -7.5827, -11.2326],
        [ -1.1549, -12.4201,   8.9500,  -7.8191, -10.1424]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 0, 2]
target tensor([0, 0, 0, 2])
<class 'torch.Tensor'>
loss
tensor(6.4456e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 5.5804e+00,  7.8269e+00, -6.0732e+00, -8.3822e+00, -6.8579e+00],
        [ 1.3992e+00, -4.2182e+00,  5.3098e+00, -5.6250e+00, -2.8969e+00],
        [-1.3574e+00, -2.4618e-01,  1.6494e+01, -1.1420e+01, -1.2793e+01],
        [ 5.5148e-03,  7.1835e+00, -3.7675e+00, -3.9252e+00, -2.7806e+00]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 1]
target tensor([1, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0304, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.3783, -11.3689,  -4.3459,  13.1046, -18.0332],
        [ -0.6509,  -0.4152,  -5.3461,  -6.9822,  12.0693],
        [ -1.7433,   6.4756,  -9.3886, -14.4724,  19.4997],
        [-16.2762,  29.0275,  -4.2346,  -6.6654,  -9.3426]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 4, 4, 1]
target tensor([3, 4, 4, 1])
<class 'torch.Tensor'>
loss
tensor(2.2650e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,  -1,   0,  ...,  -1,   0,   4],
         [  0,   4,  -2,  ...,   0,   3,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,   0,  ...,   0,   6,  -2],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         [  0,   0,   2,  ...,   4,   1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   1,   1,  ...,   6,   1,  -1],
         [  1,   2,   3,  ...,   0,  -3,   1],
         [  1,  -1,  -1,  ...,   2,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  0.7854,  -3.5603,   4.6672,  -3.7321,  -8.1896],
        [ -6.4064, -11.4257,  16.8275,  -8.8413, -29.5382],
        [  8.8460,  -0.1240,  -8.6571, -20.4758,  25.6188],
        [  0.6684,  -4.3683,   6.4169,  -3.6455,  -7.3746]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 4, 2]
target tensor([2, 2, 4, 2])
<class 'torch.Tensor'>
loss
tensor(0.0060, grad_fn=<NllLossBackward0>)
Epoch: [21][10/25]	Time 1.656 (1.725)	Data 0.012 (0.022)	Loss 0.0060 (0.0540)	Accuracy 100.000 (97.727)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.1347,  -6.0541,  13.7757,  -9.1346, -20.5067],
        [ -4.1278,  -4.1120,  -2.7706,  -5.5826, -16.0672],
        [  2.0176,  -3.8627,   9.2887, -11.0044,  -7.0169],
        [ -5.0108, -11.2807, -19.4576,  16.0640, -14.9861]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 3]
target tensor([2, 2, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.1144, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.1067,  -7.8480,   9.4929, -16.8291,  -3.3772],
        [  3.4265, -11.2949,  -3.5374,   6.6933,  -4.5143],
        [ -0.9286,  -7.3554,   6.1344,  -0.4689,  -7.3524],
        [  0.2750,   4.6333,  -1.8665,  -6.9272,  -7.4263]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 2, 1]
target tensor([2, 3, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0139, grad_fn=<NllLossBackward0>)
train
input tensor([[[  0,   0,  -2,  ...,  -4,   5,  -5],
         [  1,  -1,  -1,  ...,   0,   2,   0],
         [  1,   0,  -2,  ...,   1,   1,  -5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -2,  ...,   0,  -3,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [  4,  -3,   5,  ...,   7,  -2,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,  -1,  ...,  -1,  -1,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [ -1,   1,   0,  ...,   2,  -3,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  8.4070, -17.8892, -21.0943, -18.5550,  17.5467],
        [  0.8880,  -4.7600,  -4.8026,   9.9623, -10.5518],
        [ -0.4740,  -8.9857,   3.9658, -10.9246,  -8.6053],
        [ 12.6778,  -9.5922,  -9.6371, -12.1985, -12.0788]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 3, 2, 0]
target tensor([4, 3, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0030, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.3556, -11.1684,  -7.4390,   5.7851, -18.4540],
        [  1.8193,  -5.7836,   9.3969, -16.6606, -12.5127],
        [ 11.3496,  -2.6367,  -5.4492, -14.2489,  -8.2714],
        [ 13.7048,  -3.9744,  -3.5785,  -6.2541,  -0.1883]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 0, 0]
target tensor([3, 2, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.0012, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.9572,  15.0427, -10.9330, -15.3608,  -9.3738],
        [ -5.4732,  -3.6135,   8.0083,  -7.6958,  -4.1075],
        [ 20.7410,  -7.2311, -10.3928,  -0.7221,  -7.6729],
        [  2.9767,  14.9143,  -6.4134,  -8.0345,  -9.0458]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 0, 1]
target tensor([1, 2, 0, 1])
<class 'torch.Tensor'>
loss
tensor(5.6326e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 26.6042, -20.2821,  -6.6496, -13.0603, -17.6757],
        [  1.3760, -14.0769,  -5.4504,   2.1995, -17.5537],
        [ -4.2594,  -2.9403,   9.5523,  -7.6684,  -9.2706],
        [  3.6662, -11.7888,  17.3219, -13.5450,  -2.4070]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 2, 2]
target tensor([0, 3, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0911, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 10.2051, -14.4589, -12.6935, -20.4611,  12.5616],
        [ 15.4230,  -6.9917,  -3.9677,  -8.5326,  -2.1041],
        [ -0.8633,   3.5135,  -5.8516, -10.8954,  -9.5149],
        [  1.5535, -10.1161,   9.4028, -18.2638, -10.9753]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 0, 1, 2]
target tensor([4, 0, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0259, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.4118,  -9.2420,  13.8352,  -9.8747,  -8.8137],
        [ 19.1053,  -3.8144, -13.8676, -14.6437, -10.8209],
        [  4.7367, -12.8469, -16.0189,  -9.0141,  11.0613],
        [ 10.9354,  -8.4458,  -2.6395,  -9.9316,  -7.2485]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 4, 0]
target tensor([2, 0, 4, 0])
<class 'torch.Tensor'>
loss
tensor(0.0004, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.9146,  -5.4119,   5.7537,  -5.9656,  -7.4951],
        [  0.6637,  -4.2758,   4.8244,  -9.8096,  -4.0412],
        [  4.1162, -11.6695,  -1.4555,  -3.3818,  -8.1789],
        [ -7.3470,  -4.0440,  15.3090, -11.9486, -13.7993]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 0, 2]
target tensor([2, 2, 3, 2])
<class 'torch.Tensor'>
loss
tensor(1.8848, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  5.1800, -23.5925,  13.4738, -12.7915, -13.6945],
        [  0.9145,  -2.0410,   4.1399, -14.7476,  -9.5101],
        [ -0.6334,  14.0232,  -7.6950, -11.8989, -14.4461],
        [ -0.6468, -11.7667, -16.3967,   8.5303,  -6.5423]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 3]
target tensor([2, 2, 1, 3])
<class 'torch.Tensor'>
loss
tensor(0.0103, grad_fn=<NllLossBackward0>)
Epoch: [21][20/25]	Time 1.677 (1.761)	Data 0.027 (0.024)	Loss 0.0103 (0.1304)	Accuracy 100.000 (97.619)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.5209, -11.4823,  -7.8079,   6.8402, -14.5169],
        [ -5.9272,  -4.1940,  -0.6968,   8.8720, -10.4263],
        [ 12.9858,  -6.2270, -11.9970, -10.1561, -10.9783],
        [ -1.5671,  -9.9676,  -2.7547,   4.7888, -14.9870]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 0, 3]
target tensor([3, 3, 0, 3])
<class 'torch.Tensor'>
loss
tensor(0.0039, grad_fn=<NllLossBackward0>)
train
input tensor([[[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  4,   1,  -2,  ...,  -2,   5,  -4],
         [  6,  -2,   1,  ...,   0,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,  -1,   0,  ...,   7,   3,   0],
         [  2,   0,   0,  ...,   7,   0,  -1],
         [  3,   0,   0,  ...,   1,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  6,   0,   0,  ...,  -3,   4,   2],
         [  2,   0,  -1,  ...,  -1,   2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  1.1392,   7.7255,  -2.3604,  -2.5693,  -8.3096],
        [ -6.8116,  -5.5737,  13.5235,  -9.5216, -10.4553],
        [ -3.0652,  -6.8751,  11.7811,  -6.9778,  -8.0254],
        [ -2.7307,  12.7813,  -1.5300,  -9.3068,  -8.7706]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 1]
target tensor([1, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0004, grad_fn=<NllLossBackward0>)
train
input tensor([[[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.5322,  -5.1229,   8.0662,  -5.0419,  -4.8862],
        [ 21.3203,  -5.0626, -11.3675,  -5.7228, -20.4978],
        [ -4.8604,  13.1706,  -7.3251,  -9.0056, -11.4950],
        [ -2.7966,   5.7820,  -2.5839,  -2.1416, -10.8222]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 1, 1]
target tensor([2, 0, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.3283,  -5.5475,   1.7556,  -1.4010,   5.8512],
        [ -8.8454, -12.6337,  16.8616,  -4.4492,  -6.2304],
        [  6.8067,  -3.4058,  -0.1984, -10.8695, -15.3033],
        [ -9.7726,  -4.6311,  -5.2607,  10.6163, -12.0755]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 0, 3]
target tensor([4, 2, 0, 3])
<class 'torch.Tensor'>
loss
tensor(0.0045, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   3,  -2,  ...,   1,   3,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   3,   1,  -6],
         [  1,  -1,  -1,  ...,  -2,   0,   1],
         [  1,  -1,  -1,  ...,  -1,  -3,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -3,  ...,  -2,   0,  -6],
         [  7,  -4,   0,  ...,   0,   1,   1],
         [ 11,  -5,   2,  ...,  -3,   6,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-2.1296, -2.7563, -1.8917, -1.1860, -5.5020],
        [-4.6345, -3.1550,  3.9402,  0.0215, -5.7685],
        [-0.9636, -2.6328, -2.5449, -2.1257, -8.1254],
        [ 0.1915, -4.7660, -0.8119, -0.9052, -8.8416]])
<class 'torch.Tensor'>
[3, 2, 0, 0]
target tensor([1., 2., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.8513)
Test: [0/13]	Time 0.595 (0.595)	Loss 0.8513 (0.8513)	Accuracy 75.000 (75.000)
evaluate
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.9272, -0.9337,  0.1260, -0.3868, -2.5246],
        [-4.0833, -5.3970,  0.9422, -1.1825, -5.1552],
        [-1.6438, -5.4403, -1.7027, -0.6332, -7.1771],
        [-4.9300, -4.6072, -0.1266, -1.2760, -8.9375]])
<class 'torch.Tensor'>
[2, 2, 3, 2]
target tensor([2., 4., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.3164)
evaluate
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.2925, -3.1554,  0.4354,  0.4527, -7.4913],
        [-3.6364, -1.6124, -0.3351,  0.2189, -5.2898],
        [-2.5324, -3.3714, -2.2228, -0.4875, -8.3611],
        [-4.4664, -3.3065, -1.3954, -1.4602, -8.2360]])
<class 'torch.Tensor'>
[3, 3, 3, 2]
target tensor([2., 2., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.1962)
evaluate
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.9550, -2.6915, -0.9027, -0.5339, -8.0684],
        [-3.5263, -2.6039,  0.7202,  0.5541, -5.1643],
        [-2.6277, -4.6346, -1.6809, -3.1907, -8.4124],
        [-1.9978, -3.0135,  0.4442,  0.7668, -6.7581]])
<class 'torch.Tensor'>
[3, 2, 2, 3]
target tensor([1., 1., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.8048)
evaluate
input tensor([[[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.5759, -5.7267, -2.8251, -1.7528, -7.1250],
        [-4.9207, -4.4772,  1.9392,  0.3294, -6.0909],
        [-4.9575, -5.9019, -2.1611, -2.0274, -7.4493],
        [-5.5948, -3.9736,  0.2427,  0.9600, -8.4682]])
<class 'torch.Tensor'>
[0, 2, 3, 3]
target tensor([0., 1., 0., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.1988)
evaluate
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.5329, -4.8568, -1.1998,  0.4692, -7.2574],
        [-4.4563, -2.7973, -2.6707, -2.1275, -8.0316],
        [-3.7091, -2.6927,  1.1710, -0.1290, -7.2466],
        [-2.0524, -4.3711, -0.7736, -3.3787, -5.2961]])
<class 'torch.Tensor'>
[3, 3, 2, 2]
target tensor([2., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.9433)
evaluate
input tensor([[[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.7966, -1.6529,  1.3658,  1.1456, -5.4965],
        [-3.6898, -4.1966,  1.5509,  1.2873, -7.5099],
        [-4.7425, -6.8843, -4.9471, -1.3888, -7.0705],
        [-4.6409, -4.8469, -1.8074, -1.2502, -6.8794]])
<class 'torch.Tensor'>
[2, 2, 3, 3]
target tensor([0., 4., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.1339)
evaluate
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.5813e+00, -3.5368e+00, -5.4913e-01, -1.6716e+00, -5.0339e+00],
        [-3.2153e+00, -3.4976e+00,  1.5207e+00, -5.5436e-01, -6.4568e+00],
        [-2.4601e+00, -4.2136e+00,  2.9400e-01, -1.9174e-03, -5.8388e+00],
        [-4.0554e-01, -5.7368e+00, -2.0409e+00, -1.2348e+00, -7.4427e+00]])
<class 'torch.Tensor'>
[2, 2, 2, 0]
target tensor([0., 2., 0., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.5429)
evaluate
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.8269,  -2.1297,   1.4414,   4.2901,  -4.5847],
        [ -4.1347,  -2.6107,   1.6194,   0.5618,  -4.3106],
        [ -5.3481,  -5.1265,  -3.8862,   3.3832, -10.3682],
        [ -3.6553,  -3.8911,   2.0300,   1.8393,  -6.8847]])
<class 'torch.Tensor'>
[3, 2, 3, 2]
target tensor([2., 3., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.4038)
evaluate
input tensor([[[  2,   0,  -1,  ...,   1,   1,   3],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,   0,   0,  ...,   0,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,   0,  ...,  -1,  -3,  -1],
         [  5,   0,   0,  ...,   6,  -1,   7],
         [  0,   1,  -4,  ...,   0,  -1,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  7,  -1,  -1,  ...,   0,   5,   1],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-2.8345e+00, -3.6226e+00, -2.8565e-03, -2.0764e+00, -5.5471e+00],
        [-3.5287e+00, -3.3556e+00,  1.1117e+00, -1.5588e+00, -9.1668e+00],
        [-1.8129e-01, -2.0128e+00, -4.5838e-01, -1.3870e+00, -7.3970e+00],
        [-5.7477e+00, -3.7726e+00, -5.3097e-01, -3.5207e+00, -7.6035e+00]])
<class 'torch.Tensor'>
[2, 2, 0, 2]
target tensor([1., 2., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.1974)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.0252, -8.7950, -0.9920,  0.7451, -9.6663],
        [-2.5379, -4.4190,  1.6817,  0.5634, -8.5681],
        [-3.9586, -3.8859,  0.9439, -1.1809, -8.1039],
        [-2.5699, -6.8084, -2.9932, -3.0797, -7.7830]])
<class 'torch.Tensor'>
[3, 2, 2, 0]
target tensor([2., 2., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.4247)
Test: [10/13]	Time 0.532 (0.521)	Loss 1.4247 (2.5467)	Accuracy 25.000 (31.818)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.6200, -5.8574, -2.0841, -2.1416, -8.2488],
        [-1.6925, -2.3546,  0.1063, -1.0726, -4.4250],
        [-2.1343, -3.5984, -0.3989,  0.1228, -8.5468],
        [-1.4439, -4.1875,  0.4315, -2.0322, -4.7843]])
<class 'torch.Tensor'>
[2, 2, 3, 2]
target tensor([2., 0., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.6743)
evaluate
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-0.9152, -3.4974,  1.1214,  0.7378, -9.4441],
        [-1.7696, -5.7684, -1.6693, -3.6970, -6.9174]])
<class 'torch.Tensor'>
[2, 2]
target tensor([1., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.0203)
epoch: 22
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.0089,   5.1834,  -2.9845,   2.5674,  -4.5866],
        [  0.4426,  -5.8791,   7.7717,  -2.5241,  -4.1740],
        [ -5.7746,  -6.3398,   7.6295,  -3.7187,  -8.7278],
        [-10.2177, -12.5279,  -9.4502,  15.5109, -15.0913]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 3]
target tensor([1, 2, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0180, grad_fn=<NllLossBackward0>)
Epoch: [22][0/25]	Time 1.795 (1.795)	Data 0.024 (0.024)	Loss 0.0180 (0.0180)	Accuracy 100.000 (100.000)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  8.5862,  -9.2713,  -5.3204,  -1.2684,  -5.4727],
        [ -4.2524,   3.1805,   8.1723,  -3.2941, -12.9079],
        [ -2.7504,   5.3311,  -0.3834,  -1.5462, -10.0352],
        [ -9.8500,  -8.7667,   4.5475,   0.3213, -12.9554]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 1, 2]
target tensor([0, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0065, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.3372, -13.7841,  13.3965,   2.6733,  -4.5444],
        [ -4.7232,  -2.2348,   7.4191,  -5.5725,  -5.6272],
        [ 26.7578, -25.4990, -34.1038,  -8.9136, -12.7516],
        [  4.6869,  -2.6681,  -6.0790,  -3.8089,  -6.7453]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 0, 0]
target tensor([2, 2, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,  -1,   1,  ...,  -1,  -1,   0],
         [  2,   3,   1,  ...,  -3,  -4,   0],
         [  2,   0,  -1,  ...,   2,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   0,   0,  ...,   3,   0,  -5],
         [  2,  -2,  -2,  ...,   6,   1,  -6],
         [  3,   1,  -1,  ...,  -2,  -2,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   0,   0,  ...,  -4,   3,  -1],
         [  6,  -3,   0,  ...,   0,   1,   3],
         [ 10,  -5,   1,  ...,  -1,   1,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-5.4452e+00, -1.2531e+01,  9.3672e-01, -1.2208e+00, -1.6012e+01],
        [-4.4990e+00, -8.7403e-03,  1.6614e+01, -4.8757e+00, -3.3293e+00],
        [-9.0261e+00, -2.0809e+01,  1.8837e+01,  5.0396e+00, -1.5490e+01],
        [-3.2779e+00, -4.2101e+00, -5.4668e+00, -2.2355e+00,  1.4329e+01]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 4]
target tensor([2, 2, 2, 4])
<class 'torch.Tensor'>
loss
tensor(0.0277, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-15.4381,  16.1075,  -4.7718,  -3.1970,  -0.3307],
        [ -9.3826,   3.9631, -13.6275,  -6.5573,  25.1464],
        [-11.5648, -11.4480,  10.7063,  -2.9490, -11.2118],
        [ -3.3017,   6.7829,  -2.7819,  -0.5114,  -2.4900]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 4, 2, 1]
target tensor([1, 4, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.4850,  -3.5089,  -7.2383,   3.2670,  -8.8282],
        [ -5.6242,  -7.4364,   7.5776,   3.0046,  -4.7576],
        [-10.8320,  -8.6015,  16.1040,   4.5390,  -6.8816],
        [  4.1639,  -3.4509,  -4.1254,  -0.5631,  -4.6347]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 2, 0]
target tensor([0, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.4896, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.3589,  -8.0610,  -1.6006,  11.7596,  -8.1656],
        [ -0.1757,  -8.9011,  -2.1701,   2.1590,  -8.4275],
        [ -7.7880, -10.5411, -14.9027,  12.2641,  -0.0719],
        [-11.5960, -15.2307,  -2.0845,  22.0340, -19.1474]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([3, 0, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.6098, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-16.4749,  21.4053,  -0.9953,  -6.9821,  -5.7039],
        [  4.9474,  -7.6598,  -4.3425,  -5.4673, -10.1297],
        [ -6.9846,  -7.8330,  17.2090,  -4.9093, -13.7267],
        [ -3.7787, -11.3138,  10.3712,   2.8373,  -8.9258]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 2, 2]
target tensor([1, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.4327, -12.4571,  13.7109,  -2.9341,  -5.9417],
        [ -5.9754,  10.5621,  -0.8408,  -1.2163,  -8.1066],
        [ -9.8383, -13.7181,  -2.4725,  12.2089, -15.5299],
        [ -8.5010,  -1.2337,  13.0054,  -7.4004, -19.2552]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 3, 2]
target tensor([2, 1, 3, 2])
<class 'torch.Tensor'>
loss
tensor(5.0067e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 10.9033,  -5.6083,  -7.9238,  -0.3131, -11.7734],
        [ -1.7407,  -7.0257,  -5.9558,  11.2765, -15.0310],
        [ -4.9609,  -3.6653,  -8.9713,   3.5201,  -9.8470],
        [ -4.2909,  -8.6440,   1.7068,   2.2133, -13.3414]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 3, 3]
target tensor([0, 3, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.1184, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.7151,  26.4603,   0.2451, -11.3044,  -4.5795],
        [-16.4308,  -6.1399,  -3.1201,  19.1261, -10.4647],
        [ -4.3461,  -8.1361,  11.9053,   2.0994,  -2.3392],
        [ 14.7072,  -2.0952,  -2.7461, -16.0491, -18.4561]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 2, 0]
target tensor([1, 3, 2, 0])
<class 'torch.Tensor'>
loss
tensor(1.3947e-05, grad_fn=<NllLossBackward0>)
Epoch: [22][10/25]	Time 1.849 (1.735)	Data 0.027 (0.022)	Loss 0.0000 (0.1155)	Accuracy 100.000 (95.455)
train
input tensor([[[  1,   0,   0,  ...,   2,   0,  -8],
         [  0,   2,  -2,  ...,  -3,   4,  -2],
         [  2,  -2,  -1,  ...,   2,  -3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -2,  ...,   0,  -3,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [  2,   2,   3,  ...,  -4,   2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   0,  -2,   0],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  0,   0,   0,  ...,   1,  -4,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  1.8404,  -5.9704,  -8.5366, -11.9236,  14.9696],
        [ -5.3722,  -3.8977,  -0.9280, -20.9386,   9.7272],
        [ -3.8497,   7.4723,  -3.4624,  -7.5280,  -2.1296],
        [ -4.0395,  -3.4998,  11.8545, -12.8834,  -2.5838]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 4, 1, 2]
target tensor([4, 4, 1, 2])
<class 'torch.Tensor'>
loss
tensor(3.1500e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.0970,  -4.8176,  17.1378,  -5.7245, -27.0314],
        [ -0.4467,   2.4842,  -3.4917,  -9.2820,   1.5374],
        [ -3.2807,   8.1574,  -3.3985,  -8.6557, -12.5084],
        [ -2.1961,  -6.2124,   9.1868,  -7.3261,  -6.0326]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 1, 2]
target tensor([2, 1, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0918, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 20.5240, -13.6683,  -6.3851, -17.4717,  -5.1055],
        [ -1.3145, -12.9685,   3.7864,  13.7376,  -7.8624],
        [ 21.4243,  -5.3229,  -6.7278,  -5.4944,  -7.5724],
        [  7.3168, -19.1643,  -6.4941,   9.0399, -16.6860]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 0, 3]
target tensor([0, 3, 0, 3])
<class 'torch.Tensor'>
loss
tensor(0.0411, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.9635,  -2.2492,  10.2747, -12.0459,  -5.5795],
        [ -0.5022,   4.3779,  -4.7325,  -7.9461,  -6.7581],
        [ -2.0920,  12.9307, -12.2641, -10.9986,  -4.5976],
        [ -4.1212,  -0.3035,  -7.4418, -15.0901,   8.6631]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 1, 4]
target tensor([2, 1, 1, 4])
<class 'torch.Tensor'>
loss
tensor(0.0020, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.7275,   8.0189,   1.1595,  -7.3569,  -6.8942],
        [  9.8940,  -8.3403,  -2.2892,  -5.6765, -10.6008],
        [ -0.5165,  10.1373,  -4.8783, -10.9403,  -5.5949],
        [  1.7597,  -7.9416,   8.4352, -13.1327,  -8.9254]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 1, 2]
target tensor([1, 0, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0006, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.2525,  -9.6443,  -9.4353,  20.6403,  -4.1841],
        [ -4.3887,   2.0722,  -6.8222,   7.1343,  -8.2757],
        [-16.7415, -18.4121,  14.4627,  -8.3024, -13.8701],
        [-11.0709,  21.8141,  -1.1358, -13.7966, -10.6300]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 2, 1]
target tensor([3, 3, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0016, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.2473,  -7.5229,   5.9573, -11.4778,  -5.6447],
        [ -1.3670, -12.8445, -16.3402,  10.1287,  -6.1400],
        [  5.3627,  -9.6635,  -6.6763, -20.9094,  15.0819],
        [ 16.2602, -10.2272,  -3.6322,  -8.9859,  -7.9021]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 4, 0]
target tensor([2, 3, 4, 0])
<class 'torch.Tensor'>
loss
tensor(0.0005, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.2867,  -5.5474,  -5.2747,   4.7645, -12.3813],
        [ -3.8681,  -0.7514,   3.1493,  -6.0050,  -7.2761],
        [  0.1026,  -4.8295,   7.7620,  -9.0080,  -8.1713],
        [-13.3728,  -2.8394,  -0.6771,  -9.6692,  14.4323]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 2, 4]
target tensor([3, 2, 2, 4])
<class 'torch.Tensor'>
loss
tensor(0.0130, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.5258,  -3.5785,  -1.7955,   1.5080, -12.7603],
        [ -3.8443,  -6.8291,  -1.8891,   4.0369, -10.9379],
        [ 16.4092, -21.0340,  -6.6522, -27.1739, -19.9267],
        [  8.8968,   9.4956,  -1.7590, -14.6745,  -3.7184]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 0, 1]
target tensor([3, 3, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.1320, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 10.8741,  -4.1909,  -3.1348,  -6.6972,  -4.9565],
        [ -1.7315,  10.8511,  -0.4494, -13.7604, -11.3821],
        [  0.5084,  11.8616,  -9.9234,  -9.7704,  -7.3675],
        [ 18.7227,  -1.7065, -11.8323,  -9.6563, -13.3504]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 1, 0]
target tensor([0, 1, 1, 0])
<class 'torch.Tensor'>
loss
tensor(7.1823e-06, grad_fn=<NllLossBackward0>)
Epoch: [22][20/25]	Time 1.643 (1.731)	Data 0.023 (0.022)	Loss 0.0000 (0.0740)	Accuracy 100.000 (97.619)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.9230,  11.0016,  -2.2410,  -8.7551, -10.3224],
        [-10.7637,   6.1867,   9.9575,  -4.6730, -13.1182],
        [  1.8028,  -8.1263,   7.4096, -11.1267,  -9.4536],
        [ 12.5334,  -7.3771, -10.5561, -13.9693,  -4.5789]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 0]
target tensor([1, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0066, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 16.0286, -13.0845,  -9.8871,  -8.2571, -22.1281],
        [ 17.1548, -17.7759,  -7.1664, -13.3786,  -6.4476],
        [ -4.8892,  -8.4116,  10.2208,  -9.4983,  -7.7012],
        [ -9.6972,  11.1485,  -5.3931,  -7.8769,  -9.3706]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 2, 1]
target tensor([0, 0, 2, 1])
<class 'torch.Tensor'>
loss
tensor(8.9407e-08, grad_fn=<NllLossBackward0>)
train
input tensor([[[  5,  -1,   0,  ...,   7,   3,   0],
         [  2,   0,   0,  ...,   7,   0,  -1],
         [  3,   0,   0,  ...,   1,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  2,   0,  -3,  ...,   0,   3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  2,   3,   1,  ...,  -3,  -4,   0],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  2.0448,  -4.4779,   7.3674,  -8.1137,  -4.3450],
        [ -2.8457,  -2.9091,   8.3713,  -9.7094, -13.2912],
        [ -2.6413,  -1.4032,   6.1331,  -2.4320,  -4.6018],
        [  3.6011,  -3.1725,   8.1859, -10.7036, -14.3507]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0040, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.3499,   9.3533,  -3.8899,  -4.2238, -12.5164],
        [  3.3826,  23.8625,  -6.6821, -10.8325,  -4.8423],
        [ 12.1031,   1.7020,  -7.6140,  -9.5339,  -6.1560],
        [ -0.3228,  -9.5400,  -1.9333, -14.0259,  13.7339]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 0, 4]
target tensor([1, 1, 0, 4])
<class 'torch.Tensor'>
loss
tensor(3.9367e-05, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.3599,   0.5818,  -0.2728,  -8.2138,  -6.5996],
        [  2.7937,   0.0601,  -3.6196,  -8.7723,  -6.9946],
        [  2.3171,   0.1167,  -1.7102,  -6.4253,  -8.3939],
        [  4.3689,  -0.4362,  -4.2418, -10.9914,  -6.8678]])
<class 'torch.Tensor'>
[0, 0, 0, 0]
target tensor([0., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.6799)
Test: [0/13]	Time 0.509 (0.509)	Loss 2.6799 (2.6799)	Accuracy 50.000 (50.000)
evaluate
input tensor([[[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.5528,   0.1735,  -0.4534,  -7.5780,  -6.6739],
        [  1.2180,  -0.5844,   0.0663,  -5.2543,  -6.6047],
        [  6.2133,  -1.5936,  -4.3483, -10.1610,  -7.7086],
        [  0.9715,   0.1214,  -0.7770,  -4.6006,  -3.8672]])
<class 'torch.Tensor'>
[0, 0, 0, 0]
target tensor([2., 2., 3., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.1829)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.7367,   0.9731,  -1.3278,  -6.7200,  -7.4634],
        [  4.8307,  -2.5237,  -2.4910, -12.5422,  -7.6864],
        [  2.1310,  -1.6412,  -6.1918, -12.1475,  -7.7758],
        [  1.3177,   0.7151,  -2.8036, -13.5064,  -5.0794]])
<class 'torch.Tensor'>
[0, 0, 0, 0]
target tensor([0., 0., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.2156)
evaluate
input tensor([[[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  7,  -4,   0,  ...,  -1,   1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,  -3,  -1,  ...,   0,  -4,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         [  1,  -1,  -1,  ...,   0,   2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   2,  -2,  ...,   0,   1,  -6],
         [  0,   0,   0,  ...,  -9,  -2,   3],
         [  2,   0,  -2,  ...,   2,  -2,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  0.6356,   2.2711,  -2.5623, -12.8100,  -7.7898],
        [  3.0906,   1.1186,  -1.0966,  -6.6736,  -7.8055],
        [  1.1870,   2.0821,  -1.9729,  -7.1010,  -5.2159],
        [  1.6851,   0.0467,  -3.6146,  -6.8282,  -9.0577]])
<class 'torch.Tensor'>
[1, 0, 1, 0]
target tensor([2., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.8102)
evaluate
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  5.3106,  -2.3264,  -4.1833, -13.4675,  -8.3463],
        [  0.5852,   1.0154,   0.3914,  -6.3275,  -5.0633],
        [  1.0599,   1.1168,  -0.0773,  -6.7775,  -6.1305],
        [  2.6614,  -0.4264,  -0.3998,  -4.0954,  -9.7232]])
<class 'torch.Tensor'>
[0, 1, 1, 0]
target tensor([2., 3., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.7007)
evaluate
input tensor([[[  0,   0,  -2,  ...,  -4,   5,  -5],
         [  3,  -1,   0,  ...,  -1,   0,   4],
         [  0,   0,   0,  ...,   0,   0,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,   0,  ...,   0,  -6,  -4],
         [  5,  -1,   0,  ...,   7,   3,   0],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,  -1,   0,  ...,   7,   3,   0],
         [  2,  -1,  -1,  ...,   2,   6,  -2],
         [  0,   0,  -2,  ...,  -1,   0,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-1.7083,  2.0369,  1.0876, -3.5007, -3.9822],
        [ 4.6093, -0.1875, -2.6936, -9.0710, -7.3045],
        [ 1.9757,  1.5643, -2.8360, -8.0118, -5.4221],
        [ 2.1183,  0.4082, -0.4332, -4.8975, -6.0245]])
<class 'torch.Tensor'>
[1, 0, 0, 0]
target tensor([2., 0., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.2536)
evaluate
input tensor([[[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  4.8684,  -1.1582,  -0.9683,  -7.3689,  -8.5636],
        [  3.7519,   3.3935,  -4.7096, -13.2014,  -7.6406],
        [  2.4620,  -1.5291,  -3.2778, -15.5101,  -8.8762],
        [  3.0777,   2.1911,  -3.5092, -12.2702,  -8.5537]])
<class 'torch.Tensor'>
[0, 0, 0, 0]
target tensor([0., 2., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.6130)
evaluate
input tensor([[[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.1135,  -0.4091,  -1.2798, -11.1322,  -8.5147],
        [  2.8636,  -0.6297,  -1.2212,  -8.3512,  -4.9564],
        [  5.6578,   2.4783,  -3.8243, -11.4711,  -7.3805],
        [  0.1191,   1.9057,  -0.7100,  -4.6310,  -2.7129]])
<class 'torch.Tensor'>
[0, 0, 0, 1]
target tensor([1., 3., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.1933)
evaluate
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.9605,  -0.8117,  -0.3888,  -5.9253,  -8.2287],
        [  3.1692,  -3.9728,  -2.7826,  -9.2625,  -9.6741],
        [  1.1920,  -0.0311,   1.8066,  -8.0253,  -5.3435],
        [  3.2664,   1.7345,  -0.3412, -11.9008,  -8.6873]])
<class 'torch.Tensor'>
[0, 0, 2, 0]
target tensor([4., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.9647)
evaluate
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.0902,   0.2169,  -5.7359,  -7.7243, -10.8163],
        [  1.5870,   0.5064,  -0.3425,  -8.0298,  -9.0569],
        [  1.5627,   0.0524,  -0.6625,  -8.4970,  -6.7165],
        [  3.5331,   0.1888,  -2.1421, -11.9326,  -4.6870]])
<class 'torch.Tensor'>
[0, 0, 0, 0]
target tensor([0., 3., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.4675)
evaluate
input tensor([[[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 1.7048,  0.2664, -0.9380, -7.6636, -5.6072],
        [ 1.2500, -1.7234, -0.7196, -5.3108, -8.5411],
        [ 1.0724, -1.5315, -0.1625, -9.1796, -5.6773],
        [-0.2090,  1.0167,  0.5594, -5.7176, -6.1683]])
<class 'torch.Tensor'>
[0, 0, 0, 1]
target tensor([1., 2., 4., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.1993)
Test: [10/13]	Time 0.507 (0.555)	Loss 3.1993 (4.2073)	Accuracy 0.000 (25.000)
evaluate
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.1009,   0.6029,  -2.2762,  -5.9804,  -7.8953],
        [  3.0922,   2.4400,  -1.0836, -11.3658,  -5.7740],
        [  3.2532,  -0.0988,  -2.8743, -12.6818,  -8.0715],
        [  1.9167,   1.4570,  -3.3408, -11.1348,  -7.8535]])
<class 'torch.Tensor'>
[0, 0, 0, 0]
target tensor([1., 1., 0., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.9142)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  4.0211,   1.0973,  -3.4706, -13.8201,  -7.8047],
        [  1.8839,   0.2096,  -1.5136,  -8.5330,  -8.7577]])
<class 'torch.Tensor'>
[0, 0]
target tensor([1., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.9090)
epoch: 23
train
input tensor([[[  1,  -1,  -1,  ...,  -1,  -3,   3],
         [  2,   0,   0,  ...,  -1,  -2,   2],
         [  2,   0,  -1,  ...,   1,  -2,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   4,   0,  ...,   0,   0,   0],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,   0,  ...,  -1,  -2,  -1],
         [  1,   2,  -2,  ...,  -6,  -5,   0],
         [  1,   0,  -3,  ...,   4,  -4,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ 12.7612,  -7.3832,  -5.4143,  -3.8886,  -7.4347],
        [ 36.3429, -23.0249, -19.6833, -18.1382, -16.5591],
        [ -1.9046,  -5.4751,  11.8069, -11.4867, -12.0624],
        [ -3.8680,  -0.8194,  10.8691, -13.5689,  -7.2301]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 2, 2]
target tensor([0, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(2.5034e-06, grad_fn=<NllLossBackward0>)
Epoch: [23][0/25]	Time 1.927 (1.927)	Data 0.023 (0.023)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.9389,  -4.6759,  11.3075, -13.3398,  -6.4854],
        [  7.2994,  -7.0553,  -9.2520,  -7.5675,  -9.4882],
        [  0.7619,  17.0031,   1.0891, -10.8344, -10.3165],
        [  4.4673,  10.7467,  -6.9292,  -9.2540, -15.4624]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 1, 1]
target tensor([2, 0, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0005, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.7177,  -9.9667,   9.7267, -20.4734, -12.2862],
        [ -0.3231,  -0.3306,   5.1578,  -6.4174,  -7.0632],
        [ -1.6357,  -7.2231,  -2.2080, -12.2246,  11.9800],
        [  1.5510,   8.4728,  -0.0428,  -7.2636,  -6.8101]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 4, 1]
target tensor([2, 2, 4, 1])
<class 'torch.Tensor'>
loss
tensor(0.0024, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-15.3617,   8.4282,  15.3307, -18.2024,  -6.7509],
        [  0.1310,   8.7485,  -4.7777,  -7.8423, -12.3171],
        [  0.9746,  20.7243,   4.5837, -21.4528,  -6.2229],
        [  0.0274,   7.3769,  -4.6116,  -8.8627,  -5.3648]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 1, 1]
target tensor([2, 1, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0005, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.5238,   9.1835,  -4.5192,  -8.0162,  -3.5287],
        [  9.2429,  -1.9021,  -5.5098,  -2.2211,  -5.9672],
        [  0.6503,   1.2542,  19.1830, -10.4112, -18.8525],
        [ -1.7832,  -2.4318,  14.0512,  -9.2851, -15.5065]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 2, 2]
target tensor([1, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(5.0809e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.0711,   5.9196,   9.5091,  -7.7433,  -8.6532],
        [ 18.6366,  -6.2225, -10.1999, -23.1642,  -4.8395],
        [ -6.5549,  14.3376,  -3.6673,  -7.4721,  -6.4653],
        [  2.7562,  13.1361,  -9.2661, -17.9256,   0.2782]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 1, 1]
target tensor([2, 0, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0068, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   3,   4,  ...,   3,  -4,  -2],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[ -1,   2,  -2,  ...,  -2,   4,   1],
         [  1,   1,   0,  ...,   0,   6,  -2],
         [  4,  -1,  -3,  ...,   1,  -1,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   0,   0,  ...,   0,   4,   0],
         [  4,   1,  -2,  ...,  -2,   5,  -4],
         [  3,   1,   0,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ 13.5859,  -3.5077, -12.0178,  -7.7542,  -5.3327],
        [ -1.3801,  -2.6176,   3.0779,  -5.9156,  -5.8276],
        [ -1.0656,  -1.5028,   5.0749,  -4.1298,  -4.7719],
        [ -1.2118,  16.3904,  -5.0624, -19.2323, -10.0551]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 1]
target tensor([0, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0047, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 11.8619,   2.8853,   0.0793,  -5.6229,  -6.7871],
        [ -4.3312,   2.3790,   2.0424,  -6.3983,  -5.4521],
        [  4.5082,   1.3168, -12.4509, -14.1724,  18.3921],
        [ 19.2239, -10.2925,  -2.5640, -15.1892,  -5.2271]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 4, 0]
target tensor([0, 2, 4, 0])
<class 'torch.Tensor'>
loss
tensor(0.2192, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.7488,  -1.1145,  -4.5143,   8.4961, -14.9788],
        [  1.6735,   8.5151,   3.8212, -11.7643,  -6.4380],
        [  1.8988,   2.6268,  -5.4469, -27.1496,  16.6615],
        [  0.7688,  -3.9104,  10.0721,  -8.3655,  -7.6594]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 4, 2]
target tensor([3, 2, 4, 2])
<class 'torch.Tensor'>
loss
tensor(1.1760, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 27.1914,  -8.1507, -14.0133, -17.5503, -17.4828],
        [ -2.1643,  17.9947,  -1.3424,  -8.8935,  -3.9161],
        [ 15.1232,  -8.8693,  -7.7596, -13.1367, -22.9436],
        [  1.8399,  19.7383,  -6.3773, -21.5319,  -6.4579]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 0, 1]
target tensor([0, 1, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.0063,   6.6961,  -5.0534, -18.2052,   9.1706],
        [ -4.9020,  -8.2558,   9.6189,  -5.4933, -12.8736],
        [  0.9676,  -0.2539,  -3.7298,  -0.5933,  -6.4382],
        [ -0.8290,  -9.0373,  11.8508, -11.9518,  -9.2583]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 0, 2]
target tensor([4, 2, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.5143, grad_fn=<NllLossBackward0>)
Epoch: [23][10/25]	Time 1.727 (1.743)	Data 0.012 (0.024)	Loss 0.5143 (0.1749)	Accuracy 75.000 (93.182)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.8910, -12.2987, -13.7114, -15.4847,  10.4703],
        [ 12.1986,  -5.1122,  -9.6735, -11.2543,  -1.8100],
        [  4.6514,  -1.3753,   5.8535, -10.0259, -13.4168],
        [  0.6735, -12.0123,  10.1230,  -8.6554, -12.5924]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 0, 2, 2]
target tensor([4, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0659, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.4951,  -6.3787,  -1.1319,  12.5408, -12.7375],
        [  8.6342, -13.0904,  -1.0752, -23.2623,  -5.9133],
        [ -3.7297,  -9.7627,  20.0743,  -9.6298, -15.8512],
        [  7.4919,  -6.4961,  -1.1443, -10.8877,  -9.6341]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 2, 0]
target tensor([3, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(6.0166e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-16.2132,  -5.9112,   6.1282,  -3.9298,  10.0862],
        [ -5.0543,  -7.9593,  21.0432,  -5.8867,  -6.3291],
        [ -4.1774, -13.8555,  -6.6864,   6.9755, -13.3076],
        [ 22.1616, -10.9666,   9.0567, -19.5417, -13.2832]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 3, 0]
target tensor([4, 2, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0047, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.8234, -15.5774,   2.0461,  -3.3073,   5.8780],
        [ -5.2139,   1.9568,   1.5290,  -4.7430,  -7.2470],
        [ -6.5534, -18.4455,   3.2763,   4.6302, -16.0925],
        [  0.7492, -13.6765,  13.7376,  -5.2575, -16.8381]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 3, 2]
target tensor([4, 1, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.1886, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.5306,  7.7276,  4.2325, -9.0422, -6.0142],
        [-3.3270, -4.6593, 19.4337, -8.6306, -5.4028],
        [-1.8498, -5.8975, 12.2336, -6.4763, -5.4390],
        [13.7461, -9.7174, -5.9155, -1.0908, -7.4464]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 0]
target tensor([1, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0075, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.4319,   2.1003,   5.9953,  -7.8985,  -6.9988],
        [-31.4195, -23.3954,   2.3396,  18.1756, -13.0987],
        [ -1.6511, -12.6372,  -2.6449,  12.0624, -11.3237],
        [-18.9345,  23.3203,   0.2771,  -6.4387,  -7.8548]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 3, 1]
target tensor([1, 3, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.9788, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.6688, -20.6093,  21.7373,  -3.7232,  -9.8738],
        [ 15.3080,  -8.0346,  -2.3627,   0.1304,   0.2476],
        [ -1.6365, -10.1835,  12.0975,  -1.8710,  -9.4135],
        [ -0.6612, -18.1475,  -1.4182,  14.9381, -10.5185]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 3]
target tensor([2, 0, 2, 3])
<class 'torch.Tensor'>
loss
tensor(6.5565e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.2444,   5.8705,   5.0203,  -6.6507,  -0.1949],
        [ -5.0711, -10.4265,   5.6698,   4.9736, -12.8221],
        [ -2.1963,   5.7468,   4.8554,  -7.8343,  -6.7724],
        [  9.9387, -10.8800,   0.8645,  -3.7011, -10.2499]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 1, 0]
target tensor([1, 3, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.4505, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.3362, -16.7348,  10.5783,   0.7008,  -8.7952],
        [-13.1109, -15.0684,  -0.9316,  17.3673,  -6.3011],
        [ -1.9772, -15.5228,  12.1528,  -1.8263, -14.3198],
        [  4.1878,  -4.2191,  -1.1877,  -0.4139,  -5.4381]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 2, 0]
target tensor([2, 3, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0037, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.8911,  -9.7499,  12.5738,   1.3892, -12.7360],
        [ -9.1120, -10.2933,  14.3549,  -2.1223,  -6.1622],
        [ -6.7228,  -5.9647,  -3.0032,   8.7792,  -6.1322],
        [ -7.9793,  -7.3467,  -2.5709,   9.8618,  -9.1526]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 3, 3]
target tensor([2, 2, 3, 3])
<class 'torch.Tensor'>
loss
tensor(6.6459e-06, grad_fn=<NllLossBackward0>)
Epoch: [23][20/25]	Time 1.726 (1.733)	Data 0.023 (0.022)	Loss 0.0000 (0.1726)	Accuracy 100.000 (94.048)
train
input tensor([[[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.6860,  19.5841,  -2.8425,  -5.1956,  -3.4907],
        [ -8.8377,  -8.9123,  10.0462,  -1.2548,  -7.3523],
        [ -2.9709,  -8.4015,  -2.9054,  15.3879, -10.8959],
        [-16.6425, -12.6966,  -5.7293,  23.1682, -16.8794]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 3, 3]
target tensor([1, 2, 3, 3])
<class 'torch.Tensor'>
loss
tensor(3.0994e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.4459,  -8.1346, -10.4188,   6.8911,   1.1749],
        [-12.7047,  -1.9133,  13.5438,  -1.1126, -13.4579],
        [ -6.3643,  -7.1514,  11.5770,  -2.1439, -14.2932],
        [-13.3657,  12.7914,  -1.8590,  -0.1541,  -3.0261]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 2, 1]
target tensor([4, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(1.4299, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  6.7928,  -8.4064,   0.1352,  -2.6410,  -4.1710],
        [ -9.8554, -12.3366,  -6.8060,  20.0372,  -5.4323],
        [-13.1599,   0.1997,   1.3714,  19.3108,  -5.6130],
        [ -7.1249, -10.2367,  -6.4957,   2.5244,  -7.6000]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 3, 3]
target tensor([0, 3, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.0004, grad_fn=<NllLossBackward0>)
train
input tensor([[[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  2,  -2,  -2,  ...,   1,   0,  10],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  0,  -1,  -4,  ...,  -6,   0,  -1],
         [  2,  -1,   0,  ...,   0,   5,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,   0,  ...,   0,  -6,  -4],
         [  5,  -1,   0,  ...,   7,   3,   0],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-10.6097,  -4.2812,   8.8154,  -6.9876,  -2.4280],
        [-10.1536,   6.5089,  -2.0905,  -2.0989,  -5.0793],
        [-12.2886,  21.7863,  -8.2927,  -3.2652,  -6.9384],
        [ 23.1097,  -8.3608, -10.4779, -24.3906,  -6.0030]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 1, 0]
target tensor([2, 1, 1, 0])
<class 'torch.Tensor'>
loss
tensor(9.7823e-05, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[  1,   2,  -2,  ...,  -6,  -5,   0],
         [  0,   2,   2,  ...,   0,   0,   2],
         [  4,   0,   0,  ...,   7,   3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -2,  ...,  -6,  -5,   0],
         [  3,  -1,   1,  ...,  -2,   0,   2],
         [  2,   5,  -3,  ...,  -4,  -3,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-3.7886, -1.8609, -0.7333,  1.7955, -5.4285],
        [-4.5297,  1.4956, -0.6940,  1.8921,  0.0519],
        [-6.1662, -5.6913, -2.1630,  3.5375, -5.1009],
        [-4.6925,  1.8282, -3.9832,  0.2036, -1.7142]])
<class 'torch.Tensor'>
[3, 3, 3, 1]
target tensor([2., 2., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.9443)
Test: [0/13]	Time 0.522 (0.522)	Loss 2.9443 (2.9443)	Accuracy 25.000 (25.000)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-8.4432, -2.4894, -4.5838, -1.3616, -3.9768],
        [-3.7926,  0.5986, -2.8096,  2.4046, -5.2274],
        [-5.8672, -1.2423, -1.0961,  3.2821, -4.8092],
        [-8.3402, -1.4636, -3.6943,  1.8138, -4.4581]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([2., 2., 4., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.8175)
evaluate
input tensor([[[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.4840, -0.3876, -1.2443,  1.0291, -1.5490],
        [-5.1266,  0.4460, -0.8036,  2.4428, -2.8735],
        [-8.6080, -3.1037, -5.9946,  1.5129, -2.7239],
        [-3.1273,  1.0196, -0.8296, -0.0891, -3.6734]])
<class 'torch.Tensor'>
[3, 3, 3, 1]
target tensor([1., 0., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.8253)
evaluate
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-9.7920,  0.3468, -6.9708,  5.5462, -5.9198],
        [-4.6227,  1.4959, -2.8435,  2.7283, -4.2577],
        [-5.1793, -1.4414,  0.2693,  5.4126, -3.9633],
        [-3.0676, -1.8340, -2.9831,  1.9879, -3.4304]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([0., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.8550)
evaluate
input tensor([[[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.9434, -1.2938, -2.0187,  1.0594, -5.8430],
        [-4.4735, -1.6805, -4.9117,  0.2271, -3.3822],
        [-6.8926,  2.9959, -5.3332, -0.3103, -2.2327],
        [-2.6660, -0.7389, -1.4126,  2.9696, -7.4789]])
<class 'torch.Tensor'>
[3, 3, 1, 3]
target tensor([0., 0., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.0430)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.4667,  0.7535, -0.7325,  0.8376, -4.6447],
        [-8.2953, -1.7150, -2.2684,  4.7595, -5.0893],
        [-5.0831, -2.0402, -1.1000,  1.6449, -1.6478],
        [-6.8111,  0.8651, -4.4819, -0.8067, -3.2639]])
<class 'torch.Tensor'>
[3, 3, 3, 1]
target tensor([2., 4., 3., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.1223)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.6487,  0.8998, -3.3617, -0.3321, -0.7596],
        [-6.1496,  0.3845, -1.5174,  2.6206, -5.5417],
        [-8.7053,  1.7325,  0.0970,  5.1995, -0.0789],
        [-4.8598,  2.5661, -1.1867,  1.9185, -2.5021]])
<class 'torch.Tensor'>
[1, 3, 3, 1]
target tensor([2., 3., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.5296)
evaluate
input tensor([[[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.6155, -4.1712, -3.5616, -1.0443, -4.9673],
        [-3.2329, -3.5637, -4.1526,  1.5800, -4.1157],
        [-7.0730,  0.1955, -3.8453,  0.3317, -2.9908],
        [-6.6309,  0.4164, -4.3808,  3.4083, -2.6677]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([0., 3., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.8216)
evaluate
input tensor([[[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.9896, -1.5535, -1.3063,  0.3625, -4.1571],
        [-9.2669,  0.2971, -3.4367,  0.1913, -0.7179],
        [-1.8001,  3.0596, -3.6296, -2.0671, -3.4277],
        [-1.7866,  0.9619, -2.8964,  1.0351, -4.5695]])
<class 'torch.Tensor'>
[3, 1, 1, 3]
target tensor([1., 0., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.2506)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-8.0120, -0.3886, -1.2698,  3.4944, -1.8932],
        [-6.0390,  0.8695, -0.0742,  3.2518, -3.2386],
        [-4.2190, -1.4878, -3.3375,  1.9152, -5.7873],
        [-3.7235, -1.3868, -0.7935,  4.2751, -3.8513]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([1., 0., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.9252)
evaluate
input tensor([[[  0,   3,  -2,  ...,   1,   3,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   1,  -3,  ...,   1,  -3,   2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  2,  -2,  -1,  ...,   2,  -3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -1,  ...,   2,  -3,   4],
         [  2,  -1,   0,  ...,   0,  -3,   2],
         [  2,  -1,  -4,  ...,   0,  -4,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -5.8737,  -1.6779,   2.1404,   2.0847,  -3.4832],
        [ -4.1826,  -3.3291,  -4.5846,  -0.9741,  -4.4011],
        [ -7.4427,   1.8367,  -4.4661,   0.4036,  -3.3094],
        [-10.7087,   2.7889,  -3.5464,   1.4858,  -2.0074]])
<class 'torch.Tensor'>
[2, 3, 1, 1]
target tensor([2., 2., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.1760)
Test: [10/13]	Time 0.489 (0.528)	Loss 3.1760 (4.6646)	Accuracy 25.000 (15.909)
evaluate
input tensor([[[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.1781, -0.6943, -1.0576, -0.1560, -2.4225],
        [-5.7494, -2.1916, -0.6933,  1.9177, -1.6375],
        [-3.7851, -0.5961, -2.8006,  0.9866, -5.5773],
        [-5.1968,  0.5764, -0.5437,  2.7830, -1.9990]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([0., 4., 1., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.1074)
evaluate
input tensor([[[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.7339,  2.8737, -3.4216,  0.2366, -0.9570],
        [-4.7748,  1.6688, -2.5462,  1.4562, -1.6896]])
<class 'torch.Tensor'>
[1, 1]
target tensor([1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.4632)
epoch: 24
train
input tensor([[[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-16.1455,  -6.8593,  14.2581,   9.5264, -11.3465],
        [-11.8954,  20.4801,  -0.4444,   4.7000,  -7.2602],
        [ 10.5378,  -0.3861, -16.4335,  -2.8886, -19.9871],
        [-11.4865,  -1.6656,   9.2207,   2.5225,  -3.5878]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 0, 2]
target tensor([2, 1, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0025, grad_fn=<NllLossBackward0>)
Epoch: [24][0/25]	Time 3.355 (3.355)	Data 0.055 (0.055)	Loss 0.0025 (0.0025)	Accuracy 100.000 (100.000)
train
input tensor([[[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  5.3769,  -1.9235,  -5.0963,  -2.9784,  -2.8465],
        [  4.9291,  -9.9552,  -9.4543,   2.0923,  -2.8598],
        [-10.3850,  -0.8265,   8.3708,  -9.3590,  -8.9450],
        [ -0.8867,  -1.0467, -12.6381,   5.0283,  18.7277]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 2, 4]
target tensor([0, 0, 2, 4])
<class 'torch.Tensor'>
loss
tensor(0.0147, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.5560,  -8.8792,  -7.9004,  13.1919,  -8.8626],
        [-10.7205,  -5.1902,   8.1400,  -3.9477,  -9.5999],
        [  4.9602,  -4.9562,  -6.2204,   3.4366,  -4.3605],
        [-18.4137,  26.8763,  -0.8939,  -1.6043,  -2.8586]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 0, 1]
target tensor([3, 2, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.0493, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.0883,  14.5076, -11.5515,  -0.9993,  -3.5901],
        [ 10.7372,  -5.0416, -12.5888,   2.1109,  -3.1177],
        [-12.1220,  -4.4956,   3.2211,   3.4479,  17.0427],
        [ -9.1818,  -6.1574,  10.9579,   2.3611,  -8.6912]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 4, 2]
target tensor([1, 0, 4, 2])
<class 'torch.Tensor'>
loss
tensor(9.1872e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.5051,  -3.1014, -12.7568,  14.7101,   1.0568],
        [ 14.5073,  -5.3507, -23.2404,  -1.3857,  -3.2422],
        [-11.2003,  -2.1544,   7.8548,   3.1015,   1.1904],
        [-11.0938,   5.8323,  -8.8230,  18.1080,  -4.7856]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 2, 3]
target tensor([3, 0, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0025, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   0,   3,  ...,   2,   2,   2],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   4,   0,  ...,   0,   0,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,   2,  ...,   4,   0,  -2],
         [  2,   1,   1,  ...,   0,  -1,   0],
         [  1,  -2,  -1,  ...,   0,  -5,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ 15.9504,  -5.8789, -15.9994,  -6.4100,  -3.0633],
        [ -4.7150,   0.5735,   2.4157,  -5.5727,  -1.0752],
        [  3.2450,  -0.3504,  -9.6938,  -0.4077,   3.8012],
        [ -5.7305,  -0.7052,   7.7029,   4.5615,   4.2127]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 4, 2]
target tensor([0, 2, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.3185, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-18.4418,  21.5220,  -4.1666, -20.3933,   3.4652],
        [ -7.3883,  20.6186, -16.1916,  -2.2192,   1.9198],
        [-14.6888,  -1.6929,  10.0688,  -5.6323,  -2.4725],
        [  5.3302,  -3.7672,  -9.8217,   1.3535,  -3.1369]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 0]
target tensor([1, 1, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0047, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.9303, -10.8708,   9.2709,   0.3046,   0.7942],
        [  6.2291,  -1.4255,  -9.6958,  -4.5880,   1.1840],
        [-14.5861,  -1.8808,   9.5892,  -3.6771,   0.8546],
        [ -8.3662,  12.1167,  -7.6729,  -3.4433,  -1.9012]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 1]
target tensor([2, 0, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0019, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-14.8065,   1.0568,  -6.2856,  13.8114,  -8.5111],
        [ -5.5149,  -1.1422, -13.3382,  16.6682,  -4.4743],
        [-25.0521,  -2.7900,  -9.3507,  21.3224,  -5.8677],
        [ -2.5199,  -2.8116, -17.4016,  20.4902, -11.7201]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([3, 3, 3, 3])
<class 'torch.Tensor'>
loss
tensor(7.1525e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-8.2892, 20.4171, -8.1090, -0.6694, -2.6130],
        [-1.4087, -3.8047, -9.5874, -8.7612, 25.1314],
        [ 3.7735, -3.2593, -9.1983, -6.3266, -4.8424],
        [-3.1636, 12.5948, -6.2663, -8.2012,  0.6317]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 4, 0, 1]
target tensor([1, 4, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.3843, -0.5368,  3.7841, -5.4245, -2.7519],
        [-9.7744, -3.1844, 10.2285,  0.4918, -6.9652],
        [-4.7089, -0.7039,  2.2413, -1.5397,  0.5159],
        [ 4.9828, -0.6119, -8.9517, -2.4704,  0.4169]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 0]
target tensor([2, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0641, grad_fn=<NllLossBackward0>)
Epoch: [24][10/25]	Time 1.666 (1.990)	Data 0.027 (0.029)	Loss 0.0641 (0.0417)	Accuracy 100.000 (97.727)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.3880,  -0.7283,   4.2621,   2.1449,  -0.0913],
        [ 12.5771,   3.4007, -25.6364,  -2.8997,   4.0349],
        [-14.0060,  30.7135, -13.2873,  -5.6013,  -2.6969],
        [ 19.7519,  -0.1427, -10.7777, -18.3314,  -0.2071]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 1, 0]
target tensor([2, 0, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0349, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.4572,   6.6404, -21.0936, -16.0055,  28.5960],
        [ -2.9710,   8.0117, -12.5011, -11.4751,  21.1492],
        [-16.1969,  -0.4760,  -7.7023,  26.6318,  -0.3300],
        [ 15.1173,  -5.2569,  -9.1639,  -5.7201,   1.9859]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 4, 3, 0]
target tensor([4, 4, 3, 0])
<class 'torch.Tensor'>
loss
tensor(1.0133e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[  0,   0,  -2,  ...,  -4,   5,  -5],
         [  3,  -2,   0,  ...,  -3,  -1,   8],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  4,   1,  -2,  ...,  -2,   5,  -4],
         [  6,  -2,   1,  ...,   0,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -1,  ...,   0,   0,   0],
         [  0,   1,   1,  ...,   6,   1,  -1],
         [  2,   0,   0,  ...,   7,   0,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-1.5987, -2.9812,  3.4910, -3.4850, -2.9277],
        [-2.2352,  6.7177, -4.7610, -5.3079, -5.8780],
        [-7.8400,  4.8190, -0.0986, -3.4545, -0.0701],
        [18.1539, -0.7911, -5.7685, -8.5014,  2.8753]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 1, 0]
target tensor([2, 1, 2, 0])
<class 'torch.Tensor'>
loss
tensor(1.2357, grad_fn=<NllLossBackward0>)
train
input tensor([[[  5,   0,  -2,  ...,   0,  -3,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [  2,   2,   3,  ...,  -4,   2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  6,   1,   2,  ...,  -1,   0,   1],
         [  2,  -1,  -1,  ...,   2,   6,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   0,   0,  ...,   1,  -3,   0],
         [  2,   0,   0,  ...,  -2,   5,   4],
         [  2,   0,  -2,  ...,   0,   2,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -5.4664,  -4.2405, -11.0779, -14.5015,   7.9557],
        [ -2.9058,  -3.2390,   3.8454,  -2.0483,   0.7560],
        [ -0.5660,  -1.1506,  -0.0654,  -2.1595,  -3.5390],
        [ -8.5051,  -5.3189,   3.4298,  -4.0190,  -0.2206]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 2, 2]
target tensor([4, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.2041, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.8950,  18.4856,   0.8217,  -4.5066,  -3.2399],
        [ -7.4710,   6.0072,   6.8871,  -1.4137,  -1.7983],
        [-14.2868,  -5.6549, -14.0265,  22.3014,  -3.5039],
        [ 20.9330,  -4.7527, -17.8634, -13.1499,   0.3013]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 3, 0]
target tensor([1, 2, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0868, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.4478,   9.9793,  -1.1334,  -2.0261,  -0.1276],
        [ -3.5510,  -0.6328,   7.6775,  -2.4394,  -5.8854],
        [ -2.1278,  -3.1226,   4.7644,  -5.5176,  -2.2526],
        [ -8.2027, -11.0232,  11.7469,  -5.7486, -10.8171]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 2]
target tensor([1, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0007, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.1510,   9.5463,  -0.6740,  -3.5764,   2.3007],
        [ -8.3450, -12.6741,  21.8977,  -7.9780,  -8.8945],
        [ -9.5127,  -9.5200,  -4.3000,  15.4231,  -6.2177],
        [ -3.0733,  -1.0561,   7.4884,  -4.5914,   1.1971]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 3, 2]
target tensor([1, 2, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0007, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.4212, -10.3535,  -5.4692,  11.9121,  -5.3330],
        [ -4.9347,  -6.1069,   9.8788,  -4.9105,  -5.5816],
        [ -8.3549, -12.2010,  17.1272,  -6.8554, -11.5142],
        [-11.0037, -10.2123,  -0.4683,  18.5834,   2.7731]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 2, 3]
target tensor([3, 2, 2, 3])
<class 'torch.Tensor'>
loss
tensor(2.9802e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 18.6219, -12.5345,  -3.1726, -14.1872,  -2.8318],
        [  4.4015,  -4.6910,  -6.7160,  -8.3269,  -5.8943],
        [ -4.6399,  -0.3307,  13.7020,  -3.6145,  -1.6455],
        [ -7.8711,  25.9404, -14.5568, -13.7391,   1.6556]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 2, 1]
target tensor([0, 0, 2, 1])
<class 'torch.Tensor'>
loss
tensor(4.1303e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.7834,  21.8336,  -4.7245, -11.8109,   9.8639],
        [ -7.1155,  -6.1030,  -9.1092,  10.4123,  -4.6037],
        [-12.6777,  -5.3879,  -1.4165,  -2.6024,  16.0707],
        [ -3.0715,  -7.6925,   1.9040,   5.0883,  -5.3613]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 4, 3]
target tensor([1, 3, 4, 3])
<class 'torch.Tensor'>
loss
tensor(0.0102, grad_fn=<NllLossBackward0>)
Epoch: [24][20/25]	Time 1.661 (1.876)	Data 0.023 (0.025)	Loss 0.0102 (0.0968)	Accuracy 100.000 (97.619)
train
input tensor([[[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-13.1318,  -2.1907,   3.4433,  13.5690,  -0.8558],
        [ -7.7010, -14.9821,  16.9818,  -7.7710,   1.4013],
        [ -3.4675,   0.0516,  13.4188,  -8.3522,   3.1698],
        [-11.8817,  11.8272,  -3.2031,  -7.6457,  -2.2948]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 2, 1]
target tensor([3, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(1.9729e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.2538e-01, -1.1393e+01,  4.2178e+00, -2.3832e+01,  4.0326e+01],
        [-1.2584e+00, -4.0694e+00,  1.0663e+01, -3.1451e-02, -1.6407e+01],
        [-1.2060e+01,  4.1789e+00, -6.0558e+00, -2.1093e+00, -2.4153e+00],
        [-4.6628e+00,  7.9705e+00, -3.9864e+00, -1.7814e+00, -4.0130e+00]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 1, 1]
target tensor([4, 2, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0008, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.5428,  10.2550,   3.9944, -13.5938,   2.5264],
        [  0.4232, -13.2559,  -5.2671,   4.8870,  -8.5855],
        [ -7.3775, -14.3725,  -2.0685,  15.8903,  -9.1298],
        [  1.3227,   2.5575,   1.7613,  -5.7476,  -1.8645]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 3, 1]
target tensor([1, 3, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.1440, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.9200,  -3.3448,   0.8670,  -4.4122,  -0.6092],
        [ 18.1006, -11.1985,  -1.0193, -23.6602,   3.0037],
        [ -4.9766, -10.3279,  19.1672,  -5.3249,  -7.1024],
        [  0.9928,  11.7836,  -5.9450, -10.3684,   2.0342]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 1]
target tensor([1, 0, 2, 1])
<class 'torch.Tensor'>
loss
tensor(1.1084, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-0.4992, -2.7831,  2.5469, -2.9595, -1.6012],
        [-3.4163, -5.2126,  7.1088, -3.2060, -4.7127],
        [-0.8596, -3.9993,  3.8705, -0.2258, -6.8134],
        [-6.3729, -6.2634,  3.2514, -2.1260, -5.4089]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 3., 1., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.7388)
Test: [0/13]	Time 0.474 (0.474)	Loss 7.7388 (7.7388)	Accuracy 0.000 (0.000)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.3446, -12.2440,   6.9177,  -2.5291,  -4.1401],
        [ -5.8349,  -8.9034,   5.7607,  -2.5889,  -4.4929],
        [ -6.3856,  -6.0532,   5.6813,  -5.7191,   0.3717],
        [ -2.2809,  -8.3949,   6.4553,  -2.9065,  -0.6430]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 4., 0., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.3563)
evaluate
input tensor([[[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   2,  -2,  ...,  -3,  -1,   0],
         [  2,  -2,  -1,  ...,   2,  -3,   4],
         [  0,  -2,  -5,  ...,   0,   4,   7],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   2,  -2,  ...,   0,   1,  -6],
         [  0,   0,   0,  ...,  -9,  -2,   3],
         [  2,   0,  -2,  ...,   2,  -2,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   0,   0,  ...,  -3,   0,  -2],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         [  1,   2,   2,  ...,  -3,   0,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-2.3001, -3.2555,  1.8865, -5.7653, -1.0707],
        [-2.7370, -2.4894,  3.8239, -1.8894, -2.7203],
        [-1.3487, -6.6315,  3.5324, -2.7680, -4.9198],
        [-2.1289, -5.2193,  5.9028, -4.6779, -0.3925]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 2., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.0887)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.1036, -3.6488,  4.5889, -4.7309,  1.0344],
        [-3.0938, -7.7168,  7.0361, -5.2652, -3.5463],
        [-1.0865, -5.5334,  5.5868, -3.4058, -4.0573],
        [ 0.4064, -2.8292,  3.7930, -7.5791, -2.5876]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 1., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.5518)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 0.0485, -9.2687,  4.9597, -5.3203, -2.0015],
        [-4.2790, -3.4034,  4.6977, -6.9412,  0.1368],
        [-0.5563, -8.1217,  4.7076, -4.4198, -2.2093],
        [-2.9577, -1.6200,  4.3672, -2.4355,  1.5728]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([3., 1., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.9334)
evaluate
input tensor([[[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.6008,  -8.9883,   3.9993,  -6.5872,  -1.8983],
        [ -1.0340, -10.7791,   5.1873,  -6.7848,  -4.3965],
        [ -3.6979,  -5.1856,   4.6617,  -6.1746,  -0.2086],
        [ -4.4480,  -5.7867,   4.9756,  -5.9964,  -2.2023]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 0., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.4543)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.6033, -5.4788,  6.5188, -3.1618, -2.4727],
        [-0.2753, -4.0281,  4.1345, -3.1964, -4.6069],
        [-2.3909, -6.5381,  6.5139, -3.3964, -3.6652],
        [-1.3577, -2.4920,  5.2121, -4.2706, -2.7217]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 2., 4., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.8293)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.4303, -6.1347,  8.1097, -5.0149, -4.0286],
        [-3.8236, -5.1060,  3.8952, -6.7824, -1.4763],
        [-2.7191, -7.0452,  7.6886, -1.0027, -3.2040],
        [-2.8059, -7.0159,  5.7910, -4.4421, -0.2346]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 2., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.5603)
evaluate
input tensor([[[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  7,  -1,  -1,  ...,   0,   5,   1],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   2,  ...,   5,  -7,  -4],
         [  1,   0,   0,  ...,   2,  -3,  -1],
         [  1,  -3,  -1,  ...,   3,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   0,   1,  ...,   0,  -2,   4],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         [  5,   0,  -1,  ...,  -2,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ 1.2777, -3.5705,  3.1338, -4.4994, -3.7630],
        [-2.7508, -3.4732,  5.6607, -2.4631, -2.0719],
        [-6.6059, -3.1332,  5.8790, -5.7611, -0.7817],
        [-1.7864, -4.2260,  6.6460, -3.3304, -0.7145]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 0., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.0987)
evaluate
input tensor([[[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.9648, -7.7331,  5.7665, -5.3124, -3.0804],
        [-0.9422, -6.0975,  5.5095, -0.4684, -2.9333],
        [-3.7074, -5.5499,  4.4432, -7.9153, -1.2184],
        [-2.4974, -6.5654,  9.5439, -3.9380, -2.0207]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.1832)
evaluate
input tensor([[[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.3111, -6.1717,  4.3271, -6.2426, -1.2421],
        [-5.8743, -2.8226,  6.9138,  0.2360,  0.4491],
        [-3.0686, -5.5774,  3.5503, -3.3823, -1.6313],
        [-5.0432, -9.7391,  3.2274, -6.0820, -1.6965]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([3., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.6481)
Test: [10/13]	Time 0.556 (0.529)	Loss 2.6481 (5.0403)	Accuracy 75.000 (40.909)
evaluate
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.4428, -4.1251,  2.3710, -2.7977, -5.1174],
        [-5.4317, -9.3607,  5.2612, -8.7245, -2.7377],
        [-2.1041, -9.2687,  3.4890, -6.8581, -2.7993],
        [-4.7804, -5.7805,  8.0195, -4.1049, -0.5140]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 2., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.0829)
evaluate
input tensor([[[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.7901, -2.3755,  4.8520, -4.3412, -0.9001],
        [ 0.6834, -6.3224,  4.2456, -5.1427, -4.1691]])
<class 'torch.Tensor'>
[2, 2]
target tensor([2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.7975)
epoch: 25
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.2093,  -6.2164,   3.7710, -13.6884,  33.5527],
        [ 12.4827,  -6.3553,   1.6170, -10.7387,  -7.0762],
        [ -1.3392, -12.7171,   3.7172,   0.1544,  -2.1096],
        [-11.1892,  -8.2896,   0.5688,  15.2096,  -9.0532]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 0, 2, 3]
target tensor([4, 0, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.9000, grad_fn=<NllLossBackward0>)
Epoch: [25][0/25]	Time 1.823 (1.823)	Data 0.024 (0.024)	Loss 0.9000 (0.9000)	Accuracy 75.000 (75.000)
train
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.2866,  -9.2788,   1.4531,  -2.3568,  13.9145],
        [ -2.5146,  -7.8020,  -3.5131, -19.2339,  22.2782],
        [  3.2208,  -8.7914,  -0.1947,  -1.1566, -10.0017],
        [-20.2490, -14.5316,  -6.6420,  25.9180,   1.9074]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 4, 0, 3]
target tensor([4, 4, 0, 3])
<class 'torch.Tensor'>
loss
tensor(0.0111, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-14.1231,  -9.0145,  -6.5462,  10.1063,  -5.3482],
        [ 15.6779, -17.2735,   2.2160, -13.1963,  -6.5932],
        [-12.4406,  13.2779,   1.5158, -10.9013,  -0.7164],
        [ -2.1662,   9.9683,   1.3715,  -6.8196,  -6.9333]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 1, 1]
target tensor([3, 0, 1, 1])
<class 'torch.Tensor'>
loss
tensor(5.0093e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  7.2723, -22.0038,  -5.8037,  -4.7496,  -5.6663],
        [ -4.3410,  10.4190,  -9.3436,  -2.3508,   3.0900],
        [ 17.2484, -11.9987, -10.6202,  -1.4178, -18.7103],
        [ 10.2792, -18.6915,  -2.3428, -13.4006, -18.4582]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 0, 0]
target tensor([0, 1, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.2585,  -9.2829,  -5.3152,  14.4247, -11.8533],
        [-11.4088,  16.5060,   1.6415,  -2.5810,  -5.4926],
        [ -5.6542, -13.3020,  17.9168,   0.9123,  -9.8863],
        [ -6.1884,  -5.7718,  15.4675,  -0.8601, -11.9862]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 2, 2]
target tensor([3, 1, 2, 2])
<class 'torch.Tensor'>
loss
tensor(1.1921e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   1,   0,  ...,   0,  -1,   0],
         [  1,   0,   0,  ...,   2,   1,   3],
         [  3,   0,   1,  ...,   2,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  2,   0,  -3,  ...,   0,   3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  2,  -2,  -2,  ...,   1,   0,  10],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-12.9014, -15.1355,  18.1989,  -1.8614, -15.9645],
        [-12.3916,  -6.8942,   9.6955,  -7.0434,  -5.7052],
        [ -9.2772,  -4.8307,  13.9221,   3.5184,  -7.5736],
        [ -2.7860,  10.6592,  -1.3242,  -3.7190,  -0.1131]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 1]
target tensor([2, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(1.4961e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 19.9702, -21.3255, -17.2506,  -7.8288,  -7.2222],
        [ -4.0756,  -5.8190,  17.1443,   0.5876,  -2.1647],
        [ -3.7943, -11.8999, -13.8667,  17.8099,  -7.9246],
        [-11.2540,  -2.6703,   3.9497,  16.7137,  -5.9882]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 3, 3]
target tensor([0, 2, 3, 3])
<class 'torch.Tensor'>
loss
tensor(7.4506e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.5049,  -6.9064,  10.1212,  -7.2206,  -1.9762],
        [ -6.6465,  -8.5945,  15.1540,  -4.5240,  -6.2290],
        [ -3.6430,  -7.6922,  11.6618,  -2.2873,  -0.3669],
        [-20.1627,  15.8480,  -1.7044,  -5.1141,  -6.0685]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 1]
target tensor([2, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(3.2782e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  7,  -4,   0,  ...,  -1,   1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,  -2,   0,  ...,  -3,  -1,   8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   0,   0,  ...,   2,   0,  -8],
         [  0,   2,  -2,  ...,  -3,   4,  -2],
         [  2,  -2,  -1,  ...,   2,  -3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,  -2,   4,  ...,   1,  -4,   1],
         [  1,   0,   0,  ...,   3,   0,  -6],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -6.2142, -10.6601,  10.2156,  -2.1318,  -2.3549],
        [ -3.4945,  10.1641,  -4.8945,   1.6559,  -6.8961],
        [ -7.5647, -14.0388,  -9.3246,  -1.1606,  14.2726],
        [  3.9461,  -9.7416,  -5.4832,   5.1373,  -3.7211]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 4, 3]
target tensor([2, 1, 4, 0])
<class 'torch.Tensor'>
loss
tensor(0.3642, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.8419, -23.6496,  13.4051,   0.3108, -13.0437],
        [-14.6229,  -4.7518,  -6.6454,   3.9480,  -9.1718],
        [ -2.9785,  10.1331,  -5.3459,  -4.3751,  -4.3762],
        [ -8.7485,  -3.3426,  -6.3568,   3.1341,  10.1981]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 1, 4]
target tensor([2, 3, 1, 4])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.5874,  -6.4295,   8.4424,   0.6632,  -8.9952],
        [-15.0451,  29.0952, -12.7137,   2.7248,  -1.8543],
        [  1.4053,  -6.7421,   6.6711,   4.7906,  -8.3653],
        [ -2.7086,  -4.2036,   9.0067,   5.0741, -14.0900]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 2, 2]
target tensor([2, 1, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0416, grad_fn=<NllLossBackward0>)
Epoch: [25][10/25]	Time 2.082 (1.912)	Data 0.012 (0.026)	Loss 0.0416 (0.1198)	Accuracy 100.000 (95.455)
train
input tensor([[[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.2662,   4.3750,  12.0233,  -0.8530,   4.1797],
        [ -2.9885,  -7.0186,   3.2341,   1.5594,  -6.1195],
        [ -4.6353,  -9.2821, -20.2025,  16.1044,  -3.7112],
        [ 13.2155,  -2.6200,  -7.0107,   3.5753,  -3.1739]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 3, 0]
target tensor([2, 2, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0436, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 11.5478,  -4.5548, -12.9806,  -6.5747,  -2.6768],
        [-16.5999,  22.2235,  -4.3691,  -4.8884,  -3.2289],
        [ -6.8323,  16.5784,  -8.7228,  -3.9194,  -0.8059],
        [ -0.3579,  -2.8896, -11.3074, -11.2758,  11.5760]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 1, 4]
target tensor([0, 1, 1, 4])
<class 'torch.Tensor'>
loss
tensor(1.9669e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.2316,  -6.7233,   8.2394,   2.2516,  -6.8677],
        [ 14.3918,  -6.9147,  -4.7431,  -3.2234,  -8.8504],
        [-10.1519, -11.0391, -12.3279,  21.0994,  -8.9193],
        [  3.7582,  -7.0529,  -6.9149,  -4.2330,  -4.8655]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 3, 0]
target tensor([2, 0, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0010, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.4050, -11.3548, -10.7473,  13.1252,  -7.7274],
        [ -0.1990,  -8.9023,  11.7832,  -0.4924, -10.6171],
        [ 24.6695,  -6.9275, -12.6151, -18.8058,  -2.4827],
        [ -1.7337,  -1.2727,  -2.5462,   8.2346,  -5.3578]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 0, 3]
target tensor([3, 2, 0, 3])
<class 'torch.Tensor'>
loss
tensor(3.8502e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 14.7304,  -5.7657,  -8.7634,  -3.4897, -16.5298],
        [ -2.1755,  12.5763,  -5.0722,  -4.9816,  -4.2722],
        [  8.4811,  -3.5427,  -8.6819,  -1.2944,  -4.0260],
        [  2.0406,  15.6082,  -7.8932,   3.4511,  -7.6042]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 0, 1]
target tensor([0, 1, 0, 1])
<class 'torch.Tensor'>
loss
tensor(1.8358e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.1039,  32.8329, -18.0975,  -4.1722,  -0.2808],
        [ -2.0151,  11.5406, -17.5519,  -6.5544,   1.6863],
        [ -4.5029,  -2.4443,  10.7917,  -2.9647,  -1.8780],
        [ -8.9111,  -9.3110,  -7.3005,  13.9431,  -1.9562]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 3]
target tensor([1, 1, 2, 3])
<class 'torch.Tensor'>
loss
tensor(1.5050e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.9904,   6.1146,   2.1511,  -2.8409,  -6.0338],
        [  4.6782, -15.7267, -12.2766, -12.0843,  16.0016],
        [ 23.3428,  -1.9480, -11.3263,  -1.7165,   2.2856],
        [ -8.0815,  -2.4663,   6.0496,   0.4315,  -7.2801]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 4, 0, 2]
target tensor([1, 4, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0072, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -1,  -1,  ...,   0,   5,   1],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  6,  -2,   1,  ...,   0,  -1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [ 11,  -3,   0,  ...,   3,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  4,  -2,   0,  ...,  -4,   2,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ 15.7669,  -1.9600,  -3.5546,  -4.9281,  -5.1362],
        [-20.7372,  -8.1590,  -3.8810,  30.1729, -11.0840],
        [ -2.6253,  -4.3908,   5.0078,  -0.7659,  -5.9005],
        [ -2.5507,  -8.1772,  11.8409,  -0.5142,  -4.9494]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 2, 2]
target tensor([0, 3, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0009, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.3450, -3.7400,  1.9992, -5.9374, -1.9405],
        [-1.0222, 10.1953, -5.9549, -3.4081, -0.8017],
        [-3.9644, -6.2235,  3.8043, -3.8310, -9.2613],
        [-1.4885, -6.5172,  8.5717, -0.1149, -6.3587]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 2, 2]
target tensor([2, 1, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0072, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.2977,  -3.2417,   1.3431,   0.1231,  -7.0975],
        [ -7.4228,  -6.0800,  -1.9047,  19.1069,  -2.5236],
        [  8.4684,  -1.3776,  -4.0494,  -3.8913,  -8.3170],
        [ -7.3367,  -5.5315, -14.7520,  14.4454, -10.9868]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 0, 3]
target tensor([2, 3, 0, 3])
<class 'torch.Tensor'>
loss
tensor(0.1263, grad_fn=<NllLossBackward0>)
Epoch: [25][20/25]	Time 1.703 (1.832)	Data 0.027 (0.024)	Loss 0.1263 (0.0716)	Accuracy 100.000 (97.619)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.9098,   0.1220,   4.5043,   0.0771,  -2.1428],
        [  2.8116,   7.8722,  -5.1187,  -8.3577,  -6.1461],
        [  3.1193,   7.9540, -17.6072,  -8.1067,  -6.4353],
        [  0.1823,  -9.8086,   1.4664,  -6.5401,  -8.1560]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 1, 2]
target tensor([2, 1, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0715, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.9197, -12.5041, -10.1266,  -5.4874,   5.5649],
        [ 13.5001,  -9.6919,  -5.3419,  -4.4657,  -6.5541],
        [ -7.5719,  -6.9679,  -6.7666,   8.5618,  -5.6338],
        [-14.2615,  -4.2986,  13.1823,  -1.2566,  -3.8074]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 0, 3, 2]
target tensor([4, 0, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0004, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.7827,  -2.2791,   0.1523,   1.7110,  -5.1144],
        [ -3.1461,  18.1003,  -0.7113,  -4.5662,  -1.4869],
        [  4.6611,  -1.4505,  -5.9991,  -2.4812,  -4.4209],
        [ -2.9159,  20.4349, -13.9753,  -1.7547,  -7.1062]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 0, 1]
target tensor([2, 1, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.4423, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.9227,  11.3411,  -6.1930,  -3.9021,  -2.4465],
        [-11.6900,  -4.2236,   3.3536,  -0.1097,  -4.3492],
        [ -2.3778,  -8.7296,   8.9893,  -5.5017,  -2.1403],
        [ -3.5162,  -2.8027,  12.2882,  -4.3629, -17.6338]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 2]
target tensor([1, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0080, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.0472, -2.4930,  1.3827, -5.3673, -4.4174],
        [ 0.1634, -3.4086,  2.0580, -2.4714, -2.1385],
        [ 1.6096, -4.6904,  0.2264, -7.3514, -6.8221],
        [-2.6358, -3.0018, -0.8303, -9.0348, -3.8973]])
<class 'torch.Tensor'>
[2, 2, 0, 2]
target tensor([1., 4., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.2130)
Test: [0/13]	Time 0.515 (0.515)	Loss 2.2130 (2.2130)	Accuracy 50.000 (50.000)
evaluate
input tensor([[[  5,  -2,  -2,  ...,   0,   0,  -3],
         [  1,  -2,  -1,  ...,   2,  -4,  -5],
         [  2,   0,  -2,  ...,  -3,   4,  -5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  7,  -4,   0,  ...,  -1,   1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,  -3,  -1,  ...,   0,  -4,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   4,   0,  ...,   0,   0,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ 3.1552, -4.0475, -1.4392, -5.6910, -3.4795],
        [ 0.8881,  0.1118, -0.6393, -2.7441, -6.0887],
        [ 0.2388,  2.1262, -3.3322, -5.9011, -1.7495],
        [-0.8187, -0.4801, -1.8660, -5.7969, -2.2285]])
<class 'torch.Tensor'>
[0, 0, 1, 1]
target tensor([0., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.0958)
evaluate
input tensor([[[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-0.5015,  0.2708,  1.7561, -4.3892, -3.0513],
        [-1.5376,  2.0152, -0.3524, -6.4626, -2.3188],
        [-2.6686, -0.8644, -2.1318, -2.8447, -6.9670],
        [-1.6959, -0.7284, -1.6366, -5.8180, -3.1692]])
<class 'torch.Tensor'>
[2, 1, 1, 1]
target tensor([2., 1., 0., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.1014)
evaluate
input tensor([[[  5,  -1,   0,  ...,   7,   3,   0],
         [  2,  -1,  -1,  ...,   2,   6,  -2],
         [  0,   0,  -2,  ...,  -1,   0,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   2,  -2,  ...,   0,   1,  -6],
         [  0,   0,   0,  ...,  -9,  -2,   3],
         [  2,   0,  -2,  ...,   2,  -2,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -2,  ...,  -6,  -5,   0],
         [  3,  -1,   1,  ...,  -2,   0,   2],
         [  2,   5,  -3,  ...,  -4,  -3,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ 0.6448, -1.8523,  1.8468, -1.6968, -3.6731],
        [ 0.1440, -3.6446, -0.6176, -3.1257, -5.9826],
        [-3.1326,  2.0916,  0.1905, -6.2569, -1.7414],
        [-1.3756,  2.3271,  1.0858, -3.1509,  1.1300]])
<class 'torch.Tensor'>
[2, 0, 1, 1]
target tensor([2., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.3201)
evaluate
input tensor([[[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.2907, -4.1087,  0.0804, -2.1398, -6.3038],
        [ 2.9758, -2.6566,  0.2698, -6.4038, -5.1277],
        [ 0.4746, -1.3674,  2.0630, -4.2317, -4.3912],
        [-1.2024, -1.1980,  5.2135, -4.3083, -1.8679]])
<class 'torch.Tensor'>
[2, 0, 2, 2]
target tensor([4., 0., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.7003)
evaluate
input tensor([[[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 0.1495, -2.4888,  0.9831, -4.2205, -1.6878],
        [ 2.6077,  1.1244, -0.9903, -4.7830, -5.0390],
        [ 1.4774, -4.2811, -0.1680, -5.5134, -3.1793],
        [-0.5436, -6.4945,  0.6706, -2.6889, -5.7738]])
<class 'torch.Tensor'>
[2, 0, 0, 2]
target tensor([3., 0., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.3324)
evaluate
input tensor([[[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.8815e+00,  1.0093e+00, -1.6296e+00, -5.5721e+00, -3.0318e+00],
        [-3.7491e-01,  6.6438e-01,  2.1756e+00, -3.2231e+00, -1.5137e+00],
        [-6.2561e-03, -1.1730e+00,  1.2065e+00, -4.8179e+00, -2.0649e+00],
        [-1.5062e-01,  1.8375e-01, -3.1726e+00, -7.0675e+00, -3.2377e+00]])
<class 'torch.Tensor'>
[1, 2, 2, 1]
target tensor([3., 3., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.7682)
evaluate
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.4177,  0.7578,  2.7491,  0.0514, -0.5173],
        [ 2.0364,  1.8064, -1.9244, -6.6082, -3.3472],
        [-0.7495,  0.6196, -1.7297, -6.8888, -3.5616],
        [-1.1273,  0.1034,  2.8290, -4.3828, -4.6915]])
<class 'torch.Tensor'>
[2, 0, 1, 2]
target tensor([2., 0., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.3026)
evaluate
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.0645,  0.0440, -0.2008, -5.4125, -0.8481],
        [-0.1413, -0.9531,  0.0264, -2.9887, -5.3662],
        [-2.2396, -1.3079, -1.1862, -5.1470, -4.7799],
        [-2.0379, -3.3521, -3.3877, -5.9054, -3.5419]])
<class 'torch.Tensor'>
[1, 2, 2, 0]
target tensor([0., 1., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.6259)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.2656, -2.9596,  3.1584, -1.6198, -3.4649],
        [-1.2936,  0.6275,  0.1655, -2.0439, -3.2356],
        [-1.3549, -0.0364,  3.0203, -4.1806, -5.1886],
        [-0.2357, -0.3820,  1.4992, -2.5599, -3.8387]])
<class 'torch.Tensor'>
[2, 1, 2, 2]
target tensor([2., 0., 3., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.9661)
evaluate
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 0.3170, -0.1851, -0.0295, -1.0722, -7.5306],
        [-0.2987, -0.0811, -2.5921, -3.0649, -2.6037],
        [ 1.3312, -2.2458, -0.8599, -5.4899, -2.9505],
        [-1.5446,  1.7877,  0.4124, -5.1327, -0.7835]])
<class 'torch.Tensor'>
[0, 1, 0, 1]
target tensor([1., 2., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.6215)
Test: [10/13]	Time 0.493 (0.518)	Loss 1.6215 (2.1861)	Accuracy 25.000 (40.909)
evaluate
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 0.4367, -1.2604,  2.5402, -4.6923, -4.2244],
        [ 0.5958, -0.0406,  0.8243, -3.8589, -1.7087],
        [-0.4947,  1.4455,  0.3681, -2.1078, -3.5758],
        [-1.7667, -0.4516,  3.0678, -5.6004, -0.9195]])
<class 'torch.Tensor'>
[2, 2, 1, 2]
target tensor([4., 0., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.2587)
evaluate
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-0.1289, -2.8194, -1.9357, -6.8328, -4.2582],
        [-0.3975,  0.9113,  0.5450, -5.3221,  0.1687]])
<class 'torch.Tensor'>
[0, 1]
target tensor([2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.6441)
epoch: 26
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.3670,  -0.2336,   7.4643,  -6.7702,  -8.0245],
        [ -4.9909,  -1.2420,   6.7578,  -2.9915,  -7.3764],
        [-12.6965, -11.6625, -11.6347,  26.4463, -13.4080],
        [-13.5608,  -6.4412,  -6.3126,   9.8501,  -4.6920]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 3, 3]
target tensor([2, 2, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.0008, grad_fn=<NllLossBackward0>)
Epoch: [26][0/25]	Time 1.934 (1.934)	Data 0.024 (0.024)	Loss 0.0008 (0.0008)	Accuracy 100.000 (100.000)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 33.2032, -16.8715, -11.2709, -13.5179,  -6.3529],
        [ -0.8578,  -2.5823,  -5.4529, -33.8830,  36.7928],
        [ -3.7049,   4.5482,  -4.9107,  -9.0977,  -3.3792],
        [ -6.3793, -14.5317,  -3.4716,  -4.6050,  13.1624]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 4, 1, 4]
target tensor([0, 4, 1, 4])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-13.7082,  21.7633,   4.3296,  -7.9666,   7.5082],
        [ -0.2340,  -2.9962,  11.0824,  -4.0053,  -3.4185],
        [  2.5610,  16.7289,  -0.4965, -16.1055,  -1.4883],
        [  0.2006,  -3.6053,  21.7626,  -7.0769, -18.4096]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 1, 2]
target tensor([1, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(3.7551e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.6891,  -4.2219,   2.6839,   4.2162, -11.4232],
        [ -0.2169,  -4.6588,  17.7485,  -7.7101,  -2.7785],
        [ -5.1018,  27.3643,  -2.5096, -26.9253,   3.2299],
        [ -1.7779,  -8.0811,  -9.5918,   4.6518, -10.0779]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 1, 3]
target tensor([3, 2, 1, 3])
<class 'torch.Tensor'>
loss
tensor(0.0494, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.8000,  17.4104,   5.7868, -14.5359,   1.5271],
        [ -8.7358,  -0.9072,  13.3209, -14.4510, -13.9729],
        [  5.2472,  -6.9301,  -2.0762,  -6.6384,  -4.6695],
        [ -9.1090,  -6.2925,  18.9517,  -7.0311, -13.2159]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 0, 2]
target tensor([1, 2, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ -1,   2,  -2,  ...,  -2,   4,   1],
         [  1,   1,   0,  ...,   0,   6,  -2],
         [  4,  -1,  -3,  ...,   1,  -1,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  1,   1,  -4,  ...,  -4,   2,   1],
         [  4,  -1,   0,  ...,  -1,   2,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   0,   0,  ...,   1,  -3,   0],
         [  2,   0,   0,  ...,  -2,   5,   4],
         [  2,   0,  -2,  ...,   0,   2,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -3.5156,   0.6831,  11.8881,  -9.2556,  -6.2534],
        [ -2.1773,  -6.5326,   9.8815,  -5.7607,  -2.6347],
        [ -3.3988, -11.4676,   1.3169,   0.7927,   1.0199],
        [-12.5021,  -0.2466,   9.4633, -17.5732,  -8.4010]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2, 2, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.3440, grad_fn=<NllLossBackward0>)
train
input tensor([[[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  7,  -2,   0,  ...,  -3,   7,   1],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  7,  -4,   0,  ...,  -1,   1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,  -2,   0,  ...,  -3,  -1,   8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,   0,  ...,   0,  -6,  -4],
         [  0,   2,   0,  ...,   3,   0,  -7],
         [  3,  -1,   2,  ...,   1,  -2,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -1.4516,   7.4279,   7.1568, -11.9756,  -6.0684],
        [ -3.5840,   8.5179,   1.9811,  -2.6158,  -3.6900],
        [ -2.2306, -19.2785,  23.3724, -13.7560,  -0.1489],
        [ -0.3714, -11.8873, -18.5676,  21.7406,  -1.2280]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 3]
target tensor([1, 1, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.1421, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-16.7705,  -4.0442,  24.1366,  -2.2450,  -7.5441],
        [ -4.8363,  23.1262, -13.5144, -19.1887,  -7.3368],
        [ 17.0952,  -8.7695,  -1.3030,  -3.8920, -16.5259],
        [ -0.1407,  -4.9637,   0.5131,   2.7917,  -6.4988]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 0, 3]
target tensor([2, 1, 0, 3])
<class 'torch.Tensor'>
loss
tensor(0.0363, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.9876,  -3.7396,  19.2085,  -8.2586,  -5.6253],
        [ -9.4840,   0.0866,  -4.0281,   8.9896,  -5.5419],
        [ 17.2882,  -3.7326,  -5.6802, -25.2533,  -9.4153],
        [  1.7137,  14.3540,  -3.5019,  -3.7715,  -8.7628]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 0, 1]
target tensor([2, 3, 0, 1])
<class 'torch.Tensor'>
loss
tensor(3.5462e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 2.1809, -5.8798, -3.1160, -0.2827, -4.8549],
        [-4.2475, -7.5964, -1.5136, 16.5837, -7.3619],
        [ 5.8856, -4.5787, -3.4260, -2.6373, -5.7692],
        [-4.9554, -1.1295,  8.0932, -7.5495, -2.3810]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 0, 2]
target tensor([0, 3, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0220, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-13.6641,  38.0793, -14.3421, -11.1747,  -5.9369],
        [ -3.1532,   0.0958,  12.0487, -12.1889, -10.9670],
        [ -1.3856,  22.0012,  -4.4820, -14.0354,  -5.7485],
        [ -1.2404,  -4.1288,   3.5005,  -6.6233,  -6.9557]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 1, 2]
target tensor([1, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0023, grad_fn=<NllLossBackward0>)
Epoch: [26][10/25]	Time 1.670 (1.764)	Data 0.024 (0.024)	Loss 0.0023 (0.0543)	Accuracy 100.000 (97.727)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.9502,  20.6104,   1.0873,  -5.2913, -12.6167],
        [ 20.1472,  -3.8746,  -2.5391, -23.4615,  -0.9930],
        [-24.1339,   3.6597,   5.9416,  20.3567, -13.7136],
        [ -2.7449,   6.3472,   5.4163,  -4.7198,  -3.7267]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 3, 1]
target tensor([1, 0, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.0831, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.3613,  -0.5794,   1.3183,   9.8653,  -8.1184],
        [ -5.1441,  19.3942,  -3.5843,  -6.3830,  -5.1253],
        [ -6.3434,   1.5880,  -2.1030, -17.8177,  13.0982],
        [ 15.0011,   0.5136,  -9.0207, -11.1382,  -6.8522]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 4, 0]
target tensor([3, 1, 4, 0])
<class 'torch.Tensor'>
loss
tensor(6.1803e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 11.5755,  -9.7476,   1.6081, -12.0435,  -6.2912],
        [ -3.3005,   5.6995,  15.2045,  -9.1496,  -5.9599],
        [ 11.1346,   2.5147,  -6.6582, -11.9694, -10.5519],
        [-11.1685,  28.3237,   0.9327,  -9.6036, -13.6031]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 0, 1]
target tensor([0, 2, 0, 1])
<class 'torch.Tensor'>
loss
tensor(7.5454e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.5992,   5.7487,  -1.3164,  -4.6190,   8.8329],
        [-10.6146, -14.9358,  26.9397,  -0.4591, -12.5465],
        [ -3.2426,  17.8556,   4.6177,  -5.0058, -10.9885],
        [  3.4655,  -5.8271,   0.6146,  -6.0535,  -5.0691]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 1, 0]
target tensor([4, 2, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0253, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [ -1,   3,   3,  ...,   0,   3,   3],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   0,   0,  ...,   0,   4,   0],
         [  4,   1,  -2,  ...,  -2,   5,  -4],
         [  3,   1,   0,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  4,  -2,   0,  ...,  -4,   2,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ 13.1881,  -1.9689,  -1.6432, -20.9402, -13.2981],
        [ -1.3302,  -4.2040,  12.8675,  -7.7548, -10.6575],
        [  4.0592,  16.7259,  -9.3409,   0.0374,  -5.2097],
        [ -4.7186,  -4.2492,  15.6774,  -9.6759,  -9.2347]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 1, 2]
target tensor([0, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(1.1027e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.2266,   3.3906,  10.0805,  -8.1415, -13.5668],
        [ -7.2782,   5.3529,  12.1435,  -2.7493,  -9.4311],
        [ -1.8666,  -6.4945,   9.0659,   1.8574, -18.1068],
        [ -5.5839,   2.1390,  15.2994,  -8.5861,  -9.5594]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0008, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.6579,   3.0234,  13.7810,   2.1537, -11.9645],
        [-12.3945,  -0.9688,  -1.8012,  10.5472, -15.8161],
        [-10.3660,  -9.0920,  -3.2688,  17.2993, -20.4377],
        [ -7.5101,   1.9467,  14.9452,  -6.6231, -14.1549]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 3, 2]
target tensor([2, 3, 3, 2])
<class 'torch.Tensor'>
loss
tensor(2.1725e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.7633,  -3.0611,  -8.8283,  14.5397, -17.0700],
        [ -8.5944,   0.6411,   9.6651, -11.4239, -13.5491],
        [  8.7243,  -0.7202,  -3.9179,  -5.3121, -11.3059],
        [ -6.3851,  -3.9629,  13.3031,  -5.1664,  -2.8855]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 0, 2]
target tensor([3, 2, 0, 2])
<class 'torch.Tensor'>
loss
tensor(5.0959e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.3502,   3.3259,  -6.3381,  -5.3740,  10.6128],
        [ 11.8462,  -6.8523,  -2.7293,  -2.0392,  -7.4728],
        [  2.2827,   5.8201,  -4.4601,  -2.3133,   4.4583],
        [ -5.4335,  19.4441, -19.0324, -10.9360, -10.5290]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 0, 1, 1]
target tensor([4, 0, 4, 1])
<class 'torch.Tensor'>
loss
tensor(0.4034, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  9.7702,  -7.0883,  -0.9431, -16.2915, -10.7299],
        [ -5.5706,  -5.9231,  11.7537,  -7.9606,  -7.6454],
        [ -8.8525,   5.2198,   6.5866,  -8.3201,  -7.1232],
        [ 21.6070,  -6.8947,  -9.9973, -12.6498, -19.5410]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 0]
target tensor([0, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0568, grad_fn=<NllLossBackward0>)
Epoch: [26][20/25]	Time 1.784 (1.821)	Data 0.027 (0.025)	Loss 0.0568 (0.0556)	Accuracy 100.000 (97.619)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.1201,   1.3673,  12.1688,  -1.6522,  -4.3572],
        [ -3.2886,   0.0850,  -9.0408,  15.1504, -10.3798],
        [-14.4484,  -1.1585,  29.7715, -15.2285,  -7.2031],
        [ -7.7105,  19.3156,  -5.9837,  -2.5915,  -8.5643]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 2, 1]
target tensor([2, 3, 2, 1])
<class 'torch.Tensor'>
loss
tensor(5.4836e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.3797,   8.7248,  -0.4467,  -6.1591,  -9.4648],
        [ 17.0645,  -6.1183,  -7.0526,  -3.3701, -16.5595],
        [ -5.5164,   0.9593,   9.1672,  -5.5951,  -5.4089],
        [  5.3165,  -5.4885,  -8.3431,  -8.0079, -16.6782]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 2, 0]
target tensor([1, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0001, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  4.5476,   4.2569,  -5.5208,  -5.5632,   0.1336],
        [-10.9876,  -3.0398,  -6.7754,  10.5990,  -3.6640],
        [ -3.0197,   2.3748, -10.9132,  -8.7449,  14.2963],
        [-10.8977,  16.5901,  -7.7196,  -5.7642,  -5.8171]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 4, 1]
target tensor([0, 3, 4, 1])
<class 'torch.Tensor'>
loss
tensor(0.1413, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.1552,   1.6078,   3.0133,   0.2836,  -1.4001],
        [  3.0614,   0.4996,   0.6064,  -7.7742,  20.4509],
        [  1.5900,  -6.6654,  -4.8459,   9.0402,  -8.3762],
        [  9.9566,  -4.1057, -10.2674,  -1.7208,  -6.7318]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 4, 3, 0]
target tensor([1, 4, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.4214, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-0.0972, -3.9477, -2.2917, -1.3979, -4.9315],
        [-1.0925,  0.3459,  0.8651, -0.7240, -0.1185],
        [-2.9074, -2.1249,  0.6069, -3.1668,  0.3324],
        [-1.5265, -4.6112, -4.9948, -3.8392, -1.2043]])
<class 'torch.Tensor'>
[0, 2, 2, 4]
target tensor([2., 3., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.1843)
Test: [0/13]	Time 0.515 (0.515)	Loss 3.1843 (3.1843)	Accuracy 0.000 (0.000)
evaluate
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 0.1375, -0.4879, -1.0869,  0.3208, -6.7580],
        [-0.2404, -2.2080, -0.0085, -2.9424, -4.0550],
        [-2.5934, -0.7068, -3.6281, -2.6253, -1.6703],
        [-0.7911,  0.7208, -1.0608, -0.6773, -2.3465]])
<class 'torch.Tensor'>
[3, 2, 1, 1]
target tensor([1., 2., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.7964)
evaluate
input tensor([[[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 2.5220, -3.7119, -3.1663, -3.4166, -1.5755],
        [ 0.4160, -0.3985, -0.1911, -3.1125, -1.1162],
        [-0.0568, -1.4238, -0.0192, -3.8838, -1.0314],
        [-1.3474, -0.9478,  2.1659, -2.3716, -3.8752]])
<class 'torch.Tensor'>
[0, 0, 2, 2]
target tensor([0., 0., 1., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.9516)
evaluate
input tensor([[[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 1.2673,  0.3073, -3.3100, -3.6566, -2.5875],
        [-0.5958, -1.4481, -1.0506, -1.1611, -5.0964],
        [-0.0442, -3.9674,  1.3259, -0.9946, -0.2124],
        [ 0.2120, -1.9540,  0.0218, -0.0093, -3.2727]])
<class 'torch.Tensor'>
[0, 0, 2, 0]
target tensor([0., 1., 4., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.3440)
evaluate
input tensor([[[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-0.2987,  0.1040,  0.8998, -3.4028, -1.9193],
        [-2.3234, -2.9537,  3.2452, -2.3990, -0.5854],
        [-0.2005,  0.0387, -1.2074, -3.4103,  1.1146],
        [-4.5777, -2.1186, -2.5482, -3.0394,  1.2622]])
<class 'torch.Tensor'>
[2, 2, 4, 4]
target tensor([2., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.3515)
evaluate
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 0.1720, -2.8371, -2.1139, -3.1331, -0.5927],
        [-1.7510,  0.1384, -0.7144, -0.1993, -2.2767],
        [ 0.1551, -3.3475, -0.4070, -2.6909, -0.3481],
        [-0.9837, -4.1008, -4.0173, -4.8316, -2.3109]])
<class 'torch.Tensor'>
[0, 1, 0, 0]
target tensor([0., 0., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.5692)
evaluate
input tensor([[[  7,  -4,   0,  ...,  -1,   1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  4,  -3,   0,  ...,  -1,   1,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  2,  -1,  -1,  ...,   0,   1,  -2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   4,   0,  ...,   0,   0,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-0.6155, -2.4424,  0.7841, -2.2006, -3.7983],
        [-3.4480, -1.3402, -4.7633, -1.2009, -3.4078],
        [-1.7995, -1.7391, -3.1165, -2.6465, -1.3226],
        [-0.2503,  1.0890, -5.1238, -3.8298, -0.1046]])
<class 'torch.Tensor'>
[2, 3, 4, 1]
target tensor([4., 0., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.7805)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.9713, -0.2781, -3.5696, -4.5498, -1.0418],
        [ 1.3668,  0.3230, -1.5365, -1.2558, -3.8302],
        [ 1.7626,  0.8913, -1.7584, -3.3342, -4.3566],
        [-1.9524, -2.6488, -3.4119, -2.4203, -1.9122]])
<class 'torch.Tensor'>
[1, 0, 0, 4]
target tensor([1., 2., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.3573)
evaluate
input tensor([[[ -1,   2,  -2,  ...,  -2,   4,   1],
         [  0,   0,  -2,  ...,  -4,   5,  -5],
         [  1,  -1,  -1,  ...,   0,   2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         [  3,  -2,   0,  ...,  -3,  -1,   8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-2.0524,  0.7101, -0.0491, -3.6018, -0.0118],
        [-4.2359,  1.2982, -1.6759, -3.6776,  0.0630],
        [-2.3496, -7.9276, -1.2502,  0.0115, -3.9024],
        [-4.7348, -4.7571, -4.0739, -5.5848, -3.3616]])
<class 'torch.Tensor'>
[1, 1, 3, 4]
target tensor([2., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.9486)
evaluate
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.8153, -0.9159, -4.4773, -0.7956, -1.3255],
        [-0.6573, -1.7934,  0.4197, -0.0902, -2.0808],
        [-1.7842,  1.0676, -2.6726, -4.3148, -0.7657],
        [-3.0425, -1.6524,  0.7239, -2.1366, -2.6488]])
<class 'torch.Tensor'>
[3, 2, 1, 2]
target tensor([2., 0., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.7440)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-0.0315, -1.4762, -5.2225, -4.1792, -0.3651],
        [-1.8148, -3.7356,  1.7397,  0.0649, -2.2343],
        [-2.7022, -1.6231, -3.3409, -4.0492, -1.4688],
        [-2.0306,  1.5343, -0.6137, -2.3439,  2.4580]])
<class 'torch.Tensor'>
[0, 2, 4, 4]
target tensor([2., 2., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.2459)
Test: [10/13]	Time 0.560 (0.537)	Loss 3.2459 (2.2067)	Accuracy 25.000 (29.545)
evaluate
input tensor([[[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.1382, -3.0363, -0.0081, -4.0136, -2.6966],
        [-5.0309, -5.1065, -1.5564, -0.1065, -4.2172],
        [ 2.9588, -3.5540, -1.2873, -5.2281, -3.4184],
        [ 1.3071, -5.1006, -1.2848, -4.9962, -4.6858]])
<class 'torch.Tensor'>
[2, 3, 0, 0]
target tensor([1., 4., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.9615)
evaluate
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.1260,  1.2044,  0.9389,  1.5558,  0.7794],
        [ 1.0104, -5.7976, -1.8453, -4.0263, -1.0224]])
<class 'torch.Tensor'>
[3, 0]
target tensor([2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.4142)
epoch: 27
train
input tensor([[[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.7502,  -1.5082,   7.8119,  -7.8845,  -3.8799],
        [ 22.9735,  -7.2922, -11.2310, -28.9389,  -0.1751],
        [-14.7694,   0.9827,   1.0144,  21.9214,  -4.4213],
        [ -1.8890,   5.0101,  -4.9466,  -5.8842,  16.2383]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 3, 4]
target tensor([2, 0, 3, 4])
<class 'torch.Tensor'>
loss
tensor(3.0248e-05, grad_fn=<NllLossBackward0>)
Epoch: [27][0/25]	Time 1.708 (1.708)	Data 0.027 (0.027)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 11.6648,  -4.0925,  -7.1203,  -9.5536,  -5.9469],
        [ 12.6695,  -3.5351,  -5.0753,  -4.4878, -11.3600],
        [ -3.8260,  -8.1663, -17.5237,  20.1959,  -5.1009],
        [ -6.4662,  16.9810,   0.4888,  -9.9877,   5.1206]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 3, 1]
target tensor([0, 0, 3, 1])
<class 'torch.Tensor'>
loss
tensor(1.8477e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-15.4050, -15.1585,  -8.7123,  18.1616, -10.8622],
        [-21.1381,  19.6264,  -8.6032,   7.4762,  -3.5502],
        [  5.2334,  -3.1724,  -9.2789,  -4.2991,  -2.8880],
        [ -8.5098,  -5.0304,  -4.4943,   8.3573,  -8.5586]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 0, 3]
target tensor([3, 1, 0, 3])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  9.1372,  -4.3838,  -6.7416,  -3.3137,  -1.4962],
        [  1.1699, -20.4060,  -8.0165,  -8.6165,  28.1640],
        [ -1.9293,   6.5697,  -1.8609,  -2.8215,   3.3470],
        [  1.1061,  -4.3482,  -5.2518,   3.7903,  -8.1705]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 4, 1, 3]
target tensor([0, 4, 1, 3])
<class 'torch.Tensor'>
loss
tensor(0.0265, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.8918,   0.3631,   6.6024,   0.1262,  -4.5724],
        [ 10.1327,   1.3575,   1.7529,   2.2205,  -2.1298],
        [ -5.0098,  -7.5207,  -6.6949,  15.0525,  -6.9185],
        [ -4.7975, -13.8538,   4.8292,  -2.6076,   0.4458]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 3, 2]
target tensor([2, 0, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0066, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.7173,   3.3902,  -1.1897,  -1.3258,  -3.2349],
        [ 28.2862, -12.8632, -14.1157,   0.0928,   2.0188],
        [ -7.9787,  -6.0984,  10.5878, -10.6496,   3.0554],
        [ 18.8703, -11.5859, -10.1567,  -8.4306,   3.0473]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 2, 0]
target tensor([1, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0067, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.7864,  -1.5342, -12.5950,   9.1034,  -5.3951],
        [ -3.5855, -13.6879, -28.8262,  35.9941,  12.3429],
        [  2.7126,   2.8282,  -4.4104,   0.1950,  -0.9938],
        [ -5.9738,  -8.8874,   3.0971,  -3.4869,  -6.2567]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 1, 2]
target tensor([3, 3, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.1719, grad_fn=<NllLossBackward0>)
train
input tensor([[[  3,   0,   0,  ...,  -4,   3,  -1],
         [  3,   0,   0,  ...,   0,  -1,   5],
         [  2,   0,  -1,  ...,   2,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   5,   1,  ...,   1,   2,   0],
         [  2,   3,   0,  ...,   2,  -1,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  4,  -2,   0,  ...,  -4,   2,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-12.2402,  -1.3181,   7.7651,  -2.3737,  -0.6735],
        [ 13.7778, -12.6955, -12.3729,  -6.2090, -11.4287],
        [ -1.1150,  -2.9155,   6.1134,   0.5012,  -2.4137],
        [ -8.4720, -13.6717,  11.5329,  -1.8163,  -4.6062]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 2]
target tensor([2, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0013, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.3838,  23.6103, -15.6127, -11.0107,   8.5528],
        [ -2.7372,  -0.8249,   3.7825,  -0.3397,   0.4693],
        [ -3.4442,  -4.1665,   5.8572,  -2.8534,  -5.1948],
        [ -5.4666,  19.5255, -16.0446,  -4.3628,   5.1870]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 1]
target tensor([1, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0156, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.8029,  -9.1681, -11.4181,  17.6255,   1.7186],
        [-11.8319,  -7.7377, -12.8208,  23.6802,   2.7253],
        [-12.5896,  -4.4935, -10.0616,  -0.8247,  22.0721],
        [ -3.0814,  -3.8200,   7.1689,  -8.4558,   2.3129]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 4, 2]
target tensor([3, 3, 4, 2])
<class 'torch.Tensor'>
loss
tensor(0.0020, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.4048, -13.5825, -10.0278,  12.4753,   1.5120],
        [  4.4379,  -4.9427,  -5.8270,  -2.4000,  -2.4859],
        [ -4.7883,   9.5331,  -5.2200,  -2.6904,  -2.6988],
        [ -7.4441,  10.3560, -17.2803, -12.5571,   5.7117]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 1, 1]
target tensor([3, 0, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0029, grad_fn=<NllLossBackward0>)
Epoch: [27][10/25]	Time 1.661 (1.769)	Data 0.012 (0.021)	Loss 0.0029 (0.0212)	Accuracy 100.000 (100.000)
train
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.1306, -15.1802, -20.0166,  24.0956,  -9.4388],
        [-10.4987, -15.2888, -15.5027,  -6.4498,  21.7863],
        [ -5.6195,  -4.9319,  -0.9918,  -6.9218,  -3.3544],
        [ -4.0619,  12.0590,  -3.0652,   1.7008,  -1.6261]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 4, 2, 1]
target tensor([3, 4, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0297, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 12.7362,   1.2127,  -7.4114,  -7.9486,   2.3186],
        [ -4.7889,  -6.2496,   5.2937,   1.3536,   4.0532],
        [ -3.7033,  20.7831, -12.9079,  -1.9338,   2.2236],
        [ -4.7815,  -1.1230, -10.9284,  10.8122,   2.6757]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 1, 3]
target tensor([0, 2, 1, 3])
<class 'torch.Tensor'>
loss
tensor(0.0674, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.6284,  16.1120,  -4.6095,  -3.2751,   0.3379],
        [-14.4128,  26.8586, -26.5007,  -6.4782,   2.7119],
        [ -4.7615,  -2.1106,   9.4076,  -5.8416,   4.6217],
        [  0.0862,   3.3252, -12.3439,  -8.3218,  15.4394]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 4]
target tensor([1, 1, 2, 4])
<class 'torch.Tensor'>
loss
tensor(0.0021, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 16.9771,   0.1855, -18.4018, -12.7709,   5.9468],
        [-12.6413,  20.2736, -11.3720,  -3.5323,   3.1532],
        [  8.3530,  -6.7624,  -6.9661,  -2.2029,   3.9386],
        [ -7.1098, -12.0523,  -8.9743,   2.9871,  21.0842]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 0, 4]
target tensor([0, 1, 0, 4])
<class 'torch.Tensor'>
loss
tensor(0.0030, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.1667,  -4.0572,  -8.4456,   6.4998,   0.1004],
        [ -5.0304,   3.4965,   2.3210,  -5.4449,  -1.7060],
        [ -3.8855,  -0.9120,  10.5835,  -3.3091,   0.8270],
        [-14.4608,  -0.3269,  21.7649, -14.6924,  -0.5058]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 2, 2]
target tensor([3, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.3627, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.4497,  -7.7406,  15.3945,  -0.0536,  -0.2453],
        [ -4.7434,  -0.6591,  12.4494,  -6.4313, -11.9969],
        [ -2.6722,  16.1006,  -8.7965,  -3.6888,   4.6932],
        [ -0.6609,  -1.7021,   8.4534,  -0.8947,  -0.8468]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 2]
target tensor([2, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(8.5221e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.9330,  18.1226,  -7.1042,  -2.0046,   6.7689],
        [ -9.1305,  22.8115, -20.9099,  -8.2451,  -2.1823],
        [ -6.2816,  -2.6519,  11.5848,  -5.5684,   1.8939],
        [ 10.0841,  -9.2570,  -4.8385,   0.4655,  -2.7282]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 0]
target tensor([1, 1, 2, 0])
<class 'torch.Tensor'>
loss
tensor(3.5970e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 10.0002,   2.3188, -13.5262,  -0.5997,  -1.1546],
        [ -5.9951,   1.0751,  13.6456,  -3.4965, -10.9397],
        [-10.1526, -12.9284,   8.2599,  -5.7380,   4.0287],
        [ -7.8440,  -3.4340, -13.3089,  -3.9242,  24.1066]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 4]
target tensor([0, 2, 2, 4])
<class 'torch.Tensor'>
loss
tensor(0.0037, grad_fn=<NllLossBackward0>)
train
input tensor([[[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,  -1,   0,  ...,   7,   3,   0],
         [  2,   0,   0,  ...,   7,   0,  -1],
         [  3,   0,   0,  ...,   1,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -1,  ...,   0,   0,   0],
         [  0,   1,   1,  ...,   6,   1,  -1],
         [  2,   0,   0,  ...,   7,   0,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -1,  ...,   0,   0,   0],
         [  2,  -1,  -2,  ...,   2,   4,  -2],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-7.3835e+00, -5.0722e+00,  8.4946e+00,  1.0838e-02, -2.3709e+00],
        [-8.3927e+00, -4.2400e+00,  1.1026e+01, -5.4597e+00, -2.7929e+00],
        [ 8.1899e+00, -1.3996e+01, -3.0825e+00, -1.1932e+01, -6.4844e-01],
        [-1.6812e+01,  1.3996e+01, -3.2234e+00, -6.2482e+00,  1.1779e+00]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 0, 1]
target tensor([2, 2, 0, 1])
<class 'torch.Tensor'>
loss
tensor(9.7295e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.4671,  -5.9399,   5.1254,  -2.5396,   5.1957],
        [ 10.2795,  -0.5637,  -8.3483, -13.4116,  -5.4429],
        [-12.9316,  32.3219, -13.5237,  -3.1192,  -6.0439],
        [ -6.5252,  -8.6197,  18.1791,  -3.4924,  -0.1050]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 0, 1, 2]
target tensor([2, 0, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.1827, grad_fn=<NllLossBackward0>)
Epoch: [27][20/25]	Time 1.737 (1.832)	Data 0.032 (0.023)	Loss 0.1827 (0.0421)	Accuracy 75.000 (97.619)
train
input tensor([[[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.4199, -10.5121,  15.8861,  -7.9596,  -0.1057],
        [ -4.6948,  -7.9198,  12.5659,   0.6204,   1.0534],
        [ -4.1440,  -0.0821,  12.7179,  -2.8292,  -3.8684],
        [ -1.8019,   9.9371,  -4.0837,  -1.7711,  -5.0494]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 1]
target tensor([2, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(9.2684e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.9247,  -2.2281,  -6.6405, -21.0597,  30.4069],
        [-12.0545, -17.4903,  -6.8257,  18.8279,  -7.1318],
        [ 15.6417,  -7.2793, -11.4969, -20.4811,   3.4150],
        [-12.0025,  11.4309,  -8.8464,   2.6034,   0.2386]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 3, 0, 1]
target tensor([4, 3, 0, 1])
<class 'torch.Tensor'>
loss
tensor(4.1333e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.2335e+00,  1.1918e+01,  7.1618e-01, -1.1370e+01, -9.0064e-01],
        [-7.3818e+00, -7.0877e+00, -6.2140e+00,  1.2737e+01,  4.2439e-03],
        [ 1.1094e+01, -1.1168e+01, -8.8080e+00, -8.9701e+00, -7.7986e-01],
        [-1.1576e+01, -5.5482e+00, -5.1507e+00,  6.9660e+00,  1.8903e+00]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 0, 3]
target tensor([1, 3, 0, 3])
<class 'torch.Tensor'>
loss
tensor(0.0016, grad_fn=<NllLossBackward0>)
train
input tensor([[[  3,   0,  -1,  ...,   0,  -3,  -1],
         [  1,   5,  -2,  ...,  -6,   5,   2],
         [  2,   5,   0,  ...,   0,   6,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,  -1,  ...,  -1,  -3,   3],
         [  0,  -1,  -6,  ...,  -4,   0,  -8],
         [  4,  -1,   1,  ...,   6,  -4,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   1,   1,  ...,   9,   3,  -2],
         [  4,  -1,   0,  ...,  -1,   2,   2],
         [ -1,   0,  -1,  ...,  -3,   8,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  6.7647,  -9.7351,  -0.5366,   3.0677,  -1.3326],
        [ -6.0204, -25.3241,  28.0080,  -3.2548,  -4.0639],
        [ -5.1766,  -5.3366,  10.7551, -11.1902, -16.6143],
        [ -7.1289,  -7.5979,  13.8243,  10.3328,  -1.2303]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 2]
target tensor([0, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0139, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[  1,   2,  -1,  ...,   3,   1,  -6],
         [  1,   1,  -4,  ...,  -4,   2,   1],
         [  1,   0,  -2,  ...,  -1,  -1,  -9],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,  -1,   1,  ...,   4,   5,   0],
         [  3,   6,   0,  ...,  -4,   0,   4],
         [  2,  -2,  -2,  ...,   6,   1,  -6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  2,   3,   1,  ...,  -3,  -4,   0],
         [  1,   1,   0,  ...,   0,   6,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-9.0697, -4.3992,  3.5213, -3.1357, -0.6655],
        [-7.9336, -6.1358,  4.3569,  0.2033, -4.7825],
        [-4.9133, -3.6692,  1.3715, -2.9471, -2.3149],
        [-3.0413, -1.1499, -1.0127, -3.4462, -1.6983]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 4., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.7248)
Test: [0/13]	Time 0.555 (0.555)	Loss 5.7248 (5.7248)	Accuracy 25.000 (25.000)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.8323, -1.3983,  3.1593, -3.4491, -3.3438],
        [-4.1342, -4.4997,  7.0630,  0.6246, -4.3478],
        [-4.1695, -0.3251,  4.6143, -2.0173, -2.3825],
        [-1.3874, -1.7965,  3.2317, -0.9330, -4.8999]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.1535)
evaluate
input tensor([[[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.4593, -5.4942,  6.3747, -1.4390, -1.3961],
        [-2.3438, -2.8360,  4.0754, -3.6686, -2.3376],
        [-2.3028, -4.4073,  4.3909, -2.4796, -2.0226],
        [-6.6350, -3.3315,  3.3223, -2.9425, -4.1159]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([4., 1., 3., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.9577)
evaluate
input tensor([[[  0,   0,   0,  ...,   3,   1,  -6],
         [  1,  -1,  -1,  ...,  -2,   0,   1],
         [  1,  -1,  -1,  ...,  -1,  -3,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -2,  ...,  -6,  -5,   0],
         [  0,   2,   2,  ...,   0,   0,   2],
         [  4,   0,   0,  ...,   7,   3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   3,  -2,  ...,   1,   3,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-1.8663, -1.1071,  1.5829, -2.9193, -4.9868],
        [-2.6001, -2.6500,  3.5611, -2.1782, -5.4891],
        [-8.3842, -0.8169,  5.2266, -3.5099, -1.8469],
        [-5.2028, -3.9170,  7.1896, -1.9242, -2.2534]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.8916)
evaluate
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.0301, -2.1319,  2.0395, -0.4441, -5.8865],
        [-9.3371, -7.4901,  2.9698, -5.1903, -5.1088],
        [ 0.7737, -5.2330,  3.3373, -5.1557, -5.0382],
        [-7.2808,  1.1298,  5.4980,  1.5159, -1.3151]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 2., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.7381)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.7807, -4.2747,  6.2147, -1.9482, -2.3449],
        [-3.6994, -3.9519,  6.1302,  0.7153, -3.6920],
        [-2.2702, -7.2210,  3.1097, -3.4306, -3.3223],
        [-1.7626, -5.8399,  2.4477, -3.2336, -4.1213]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 0., 3., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.7756)
evaluate
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.1521, -1.8480,  1.7841,  0.0207, -6.9397],
        [-7.9439, -3.0832,  2.8736, -1.5989, -4.6726],
        [-1.1747, -7.4673,  4.0691, -4.7795, -5.5477],
        [-2.5483, -0.8577,  2.7762, -2.6807, -1.0954]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 0., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.9981)
evaluate
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.7509,  0.4440,  2.2712, -1.9816,  0.5747],
        [-5.5070, -9.2074,  5.0013,  0.6864, -6.1123],
        [-0.7141, -0.9310,  1.8234, -2.8337, -1.8816],
        [-2.7178, -1.4884,  3.9347, -0.2312, -2.7104]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 2., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.7610)
evaluate
input tensor([[[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.1172, -1.4673,  4.4433,  0.2061, -3.5260],
        [-4.5995, -6.3877,  1.5843, -4.7946, -4.9677],
        [-5.7370, -0.2881,  3.4028, -3.8245, -2.9679],
        [-2.0137, -0.2242,  4.7901, -2.7725, -3.4948]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.0775)
evaluate
input tensor([[[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-7.0267, -2.8541,  2.9974, -2.4988, -4.5210],
        [-5.4221, -3.1192,  1.4180, -0.8737, -2.7290],
        [-5.7893, -4.6148,  2.9674, -1.7754, -3.6711],
        [-5.1562, -4.3174,  5.4122, -3.6545, -4.7714]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([3., 2., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.0305)
evaluate
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.1285, -3.8963,  5.5524, -2.3342, -4.9566],
        [-3.6968, -2.9560,  7.3229, -2.2608, -5.3688],
        [-5.2962, -2.9089,  3.5498, -2.0980, -3.5725],
        [-1.8435, -4.9764,  1.5764, -0.9640, -6.7345]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([4., 3., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.0517)
Test: [10/13]	Time 0.539 (0.521)	Loss 5.0517 (4.0145)	Accuracy 50.000 (40.909)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 0.2492, -0.3417,  1.4654, -2.4776, -5.9523],
        [-1.5089, -3.0742,  3.5996,  0.3557, -5.0740],
        [-3.4228, -4.6799,  3.7932, -2.8458, -2.4034],
        [-5.6601, -3.2996,  6.4345, -2.0169, -3.5258]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 2., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.2187)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.1431, -7.7207,  1.3008, -3.9553, -2.6229],
        [-3.6226, -1.7312,  5.1027, -0.1506, -2.1171]])
<class 'torch.Tensor'>
[2, 2]
target tensor([2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.6434)
epoch: 28
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.6003,  -4.6596,  -3.9803,  17.4271,  -4.9350],
        [-23.7506,  -5.2800,   2.5400,  26.9191,  -5.8492],
        [ -3.8032,   2.3391,  17.6058, -11.4353,  -5.4864],
        [ -3.8987, -11.5677,  16.8563,  -2.9389,  -5.3192]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 2, 2]
target tensor([3, 3, 2, 2])
<class 'torch.Tensor'>
loss
tensor(5.9605e-08, grad_fn=<NllLossBackward0>)
Epoch: [28][0/25]	Time 1.852 (1.852)	Data 0.024 (0.024)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-17.2402,  15.7500,  -3.9813,  -3.9859,  -2.5225],
        [-16.9315,  20.3337,  -0.1170,  -4.2389, -10.0908],
        [ -6.9197,  -8.0330,   9.1238,  -9.1161,  -6.4975],
        [ -4.2399, -15.9859,   3.4503,  -5.1405,  -6.9658]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 2]
target tensor([1, 1, 2, 0])
<class 'torch.Tensor'>
loss
tensor(1.9227, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[10.6602, -3.5112, -2.5034, -5.2486, -5.5387],
        [16.8543, -9.3979, -4.4225, -4.5253, -0.6566],
        [-5.6399, -6.5082, -1.6142, 12.9777, -6.1379],
        [-6.2511, -6.1802, 14.5860, -1.1652, -5.1922]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 3, 2]
target tensor([0, 0, 3, 2])
<class 'torch.Tensor'>
loss
tensor(8.6427e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.0403,   3.4024,  -1.4091,  -4.5330,  -5.2641],
        [ -6.0134,  -4.6030,  21.8453,   2.5348, -17.7848],
        [ -1.6687,  -1.9244,  14.2090,  -0.8992,  -4.9028],
        [ -7.7438, -15.4147,  21.6537,  -8.2733, -11.6151]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 2]
target tensor([1, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0023, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.3976,  -5.6991,  -5.2098,  -5.2948,  16.3038],
        [ -1.5747, -10.6148,  -7.0703, -11.2617,   6.6286],
        [ -1.9659,  14.1223,  -9.6672, -10.6985,  -5.4383],
        [ -3.3205,  -7.0355,  -2.4221,  11.8216,  -4.5520]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 4, 1, 3]
target tensor([4, 4, 1, 3])
<class 'torch.Tensor'>
loss
tensor(6.9013e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   0,   0,  ...,  -4,   3,  -1],
         [  6,  -3,   0,  ...,   0,   1,   3],
         [ 10,  -5,   1,  ...,  -1,   1,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,  -1,  ...,  -1,  -3,   3],
         [  2,   0,   0,  ...,  -1,  -2,   2],
         [  2,   0,  -1,  ...,   1,  -2,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,   0,  ...,   0,  -6,  -4],
         [  5,  -1,   0,  ...,   7,   3,   0],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -3.4240,  -4.9659,   5.1811,  -0.7770,  -4.4603],
        [  4.8394,  -8.3210,  -7.7011, -25.6941,  32.9634],
        [ 11.0607,  -6.7537,  -0.8128,  -1.6722,  -7.0812],
        [ 16.4239, -10.3572,  -8.3329, -15.8204, -15.6015]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 4, 0, 0]
target tensor([2, 4, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.0007, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.0710, -12.7746,   2.5378,  -2.6845,  14.2196],
        [ 28.6769, -22.0411, -11.1888, -29.8847,  -4.8086],
        [-14.1480,   9.5670,   2.9973,  -4.0889,   0.5826],
        [  3.0239,  15.8741,  -9.7820,  -7.0694,   0.7962]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 0, 1, 1]
target tensor([4, 0, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0004, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.2934,  -2.6618,  -0.5658,  10.2839, -11.8147],
        [  1.4195,   4.3343,  -5.2641,  -3.0139,  -5.6525],
        [  2.6286, -17.7637,  -8.3312,  -3.8274,   7.8988],
        [ -1.1518,  11.3038,  -1.6414,  -4.4760,  -6.1826]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 4, 1]
target tensor([3, 1, 4, 1])
<class 'torch.Tensor'>
loss
tensor(0.0147, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.9056,  11.9094,  -6.4344,  -3.4958,  -1.6477],
        [  0.7173,  -6.9007,  12.4999,  -2.9592, -10.6009],
        [ 22.6854,  -9.3435,  -8.7699,  -4.1637, -17.7464],
        [  2.4166, -13.6591,  10.2418,  -4.3989,  -9.2741]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 0, 2]
target tensor([1, 2, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0001, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.3944, -16.6295,  18.7794,  -0.1206,  -7.8422],
        [  5.3222, -21.2355,  27.3878,  -6.7727,  -8.5653],
        [ -1.1403,  21.0253, -15.9203,  -6.0109,  -4.9486],
        [ -1.5105,  -6.7259,  10.8279,  -0.1109,  -9.6501]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 2]
target tensor([2, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(5.5730e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  6.1901,  10.8481,  -6.5418,  -4.2185, -10.1664],
        [ 13.8248, -19.0078,   0.0850,  -9.1530,  -4.6962],
        [ 23.0756, -21.7921,  -6.5595, -15.9675,  -7.5478],
        [  5.7652, -14.7189,  15.2164,  -9.7157,  -7.3500]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 0, 2]
target tensor([1, 0, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0024, grad_fn=<NllLossBackward0>)
Epoch: [28][10/25]	Time 1.830 (1.744)	Data 0.012 (0.020)	Loss 0.0024 (0.1767)	Accuracy 100.000 (97.727)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.2290,   6.3571,   1.6666,  -2.8807, -10.8382],
        [ -0.6163,  -5.4144,  11.9983,  -2.3798,  -7.8986],
        [ -6.5754, -13.1101,  -5.1100,  17.6838,  -4.5427],
        [  0.7051,  14.7770,  -0.1927, -14.8324,  -8.9115]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 3, 1]
target tensor([1, 2, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.0038, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   0,  -2,  ...,   0,  -7,   1],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  1,   2,   3,  ...,   0,  -3,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   4,   0,  ...,   0,   0,   0],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -4.2374, -25.8377,  16.1476,  -7.0384, -12.9968],
        [  5.6197, -13.2371,  -4.6510,   4.2593, -14.7328],
        [ 27.5212, -18.3999, -14.7287,  -4.2073, -12.7803],
        [  5.8021,  -9.1778,  10.5042, -19.0192,  -7.3239]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 0, 2]
target tensor([2, 3, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.3995, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.8302,  24.9574, -15.9201,  -2.5460,  -6.1158],
        [  3.9736, -14.5409, -11.7599,  10.8078, -13.9875],
        [ 13.7340, -11.3883,  -3.4106, -14.0682, -12.0286],
        [  6.3451,  -1.2453,  -7.3360, -12.9249,  14.2210]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 0, 4]
target tensor([1, 3, 0, 4])
<class 'torch.Tensor'>
loss
tensor(0.0004, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.1536, -10.2707,  15.0905,  -0.1581,  -5.0737],
        [  1.5961,  -5.6993,  14.5479,  -0.8851,  -2.7363],
        [ 14.4192,  -6.6957,  -1.2482, -10.8880, -12.8634],
        [ -3.1377,  -6.3310,  17.5523, -21.6992,  -7.7784]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 0, 2]
target tensor([2, 2, 0, 2])
<class 'torch.Tensor'>
loss
tensor(8.0466e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.3785,  -7.2230,   6.6429,   0.9528,  -5.3861],
        [ -2.9964, -20.5700,   2.0638,  -3.5313, -12.4589],
        [ -0.6191,  -3.8959,   4.4667,  -5.5079,  -4.1083],
        [  5.6529,   8.2918,  -5.8221,  -5.9835,  -6.2421]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 1]
target tensor([2, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0257, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 14.0190,  -5.2773,  -0.9354,  -2.0349,  -8.5587],
        [ -5.7124, -15.9673,   9.1753,  -6.4460, -11.9209],
        [  0.1934,  -0.3022,   5.9506,  -6.6896,  -7.0656],
        [ -1.9725, -11.6255,  -3.0606,  16.8759, -14.0792]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 3]
target tensor([0, 2, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0013, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-9.7219e-01,  1.1812e+01, -9.2020e+00,  2.5062e+00, -1.0138e+01],
        [-5.7502e-03,  1.0175e+01, -3.8721e+00, -4.5726e+00, -2.9841e+00],
        [ 7.9961e+00, -7.2789e+00, -6.8275e+00, -2.5212e+00, -6.2731e+00],
        [-3.1226e+00,  1.0480e+00, -3.5994e+00,  1.3252e+01, -1.6964e+01]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 0, 3]
target tensor([1, 1, 0, 3])
<class 'torch.Tensor'>
loss
tensor(4.2050e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 20.5880,  -9.4991, -10.5570, -17.2749,   2.5460],
        [-10.9444, -11.4219,   9.8007,   5.4390, -21.7159],
        [  5.6575, -19.1723,  -9.9759,   2.2143,  31.3091],
        [ -1.4063, -12.9462,   6.3735,  -1.5419, -18.3308]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 4, 2]
target tensor([0, 2, 4, 2])
<class 'torch.Tensor'>
loss
tensor(0.0034, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.1091,  -9.2480,   6.8251,   2.2908, -11.2081],
        [ -6.2663, -21.2381, -14.9941,  22.2320, -11.5328],
        [ -7.2667, -10.8154, -18.3031,  39.3701, -16.2705],
        [ 10.0807,  -2.8866, -12.6397,   1.7764, -14.6960]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 3, 0]
target tensor([2, 3, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0027, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.3414,  -4.3209,   7.3167,  -4.5763,  -8.8927],
        [ -3.3386, -11.7654,  -5.0230,  11.3267,  -9.0970],
        [ -1.8358,   5.8303,  -2.9665,   1.8259,  -5.6708],
        [-11.2694,  11.4775,  -4.7147,   5.9660,  -9.5333]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 1, 1]
target tensor([2, 3, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0057, grad_fn=<NllLossBackward0>)
Epoch: [28][20/25]	Time 1.700 (1.734)	Data 0.036 (0.023)	Loss 0.0057 (0.1136)	Accuracy 100.000 (97.619)
train
input tensor([[[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.4326, -18.2026,   5.1468,   1.0073, -13.5263],
        [  7.0904,  -1.3819, -10.6062,  -3.9877,  11.9739],
        [ -4.5052, -13.3521,  10.6789,  -2.1597,  -6.8271],
        [ 12.9519,  -2.9084, -10.4353,   1.3727,  -3.6257]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 4, 2, 0]
target tensor([2, 4, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0060, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.6975,  -9.9965,   8.4109,   1.8983, -14.5354],
        [ -9.2371, -12.1806,  -7.1018,  17.0718,  -5.3916],
        [ -3.7203,   9.8982,  -8.8662,   5.1536,   3.1742],
        [  9.2479, -10.0709, -12.0450,   5.4406, -19.7030]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 1, 0]
target tensor([2, 3, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0083, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.7680,  -7.2342,  -4.9046,  14.2825, -10.2762],
        [ -0.5349,   2.9646,  -9.1556,   5.4800, -11.0038],
        [ -7.8864, -16.6755, -19.3256,  20.7622,  -5.9595],
        [ -5.0526,  -9.3864,   8.0971,   1.0485,  -9.1805]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 3, 2]
target tensor([3, 1, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.6491, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.3916,  24.7959, -21.9756,  -0.3994,  -7.7308],
        [-10.0046,  -2.4770,  -6.8956,  21.6398,  -8.7834],
        [ 11.1812, -11.6392,  -1.0328,  -4.4885,  -8.1304],
        [  4.0670,  -2.7346,  -4.9911,   1.5364,  -7.1362]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 0, 0]
target tensor([1, 3, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.0194, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 2.9188, -5.5807, -1.3730, -0.7241, -9.0141],
        [ 0.8873, -2.1862, -1.7529,  3.7031, -8.6315],
        [-0.5744, -0.8873, -2.7060,  1.8388, -5.5128],
        [-5.3539, -4.2282, -5.4696,  6.1510, -9.9423]])
<class 'torch.Tensor'>
[0, 3, 3, 3]
target tensor([0., 1., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.6730)
Test: [0/13]	Time 0.498 (0.498)	Loss 2.6730 (2.6730)	Accuracy 50.000 (50.000)
evaluate
input tensor([[[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,   0,  ...,   0,  -6,  -4],
         [  5,  -1,   0,  ...,   7,   3,   0],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,  -2,  ...,   2,  -2,  -4],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [  7,  -1,  -1,  ...,   0,   5,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-1.0323, -1.4825, -6.3642,  2.5830, -6.7229],
        [-1.3743, -5.1787, -2.9385,  4.3195, -8.8563],
        [-1.3319, -5.7401, -6.1851,  5.6287, -9.7954],
        [ 1.0792, -7.7740, -4.1820,  3.1250, -8.7549]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([1., 0., 0., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.2226)
evaluate
input tensor([[[  0,   3,  -2,  ...,   1,   3,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,   0,  ...,  -1,  -3,  -1],
         [  5,   0,   0,  ...,   6,  -1,   7],
         [  0,   1,  -4,  ...,   0,  -1,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[ 10,  -6,   1,  ...,   2,  -5,   4],
         [  4,  -3,  -3,  ...,  -2,   1,   3],
         [  1,  -1,  -2,  ...,   3,   3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-2.6513, -3.5142,  1.6079,  3.4295, -7.0899],
        [-1.7261, -4.0495, -1.2320,  4.1293, -8.5159],
        [-0.2607, -0.8567,  0.5000,  2.0261, -7.4233],
        [-5.0333, -1.5516, -5.5198,  5.0138, -7.5047]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([2., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.9308)
evaluate
input tensor([[[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.4950,  -0.4286,  -0.4515,  -0.4967,  -3.6534],
        [ -1.4500,  -2.4359,  -0.5493,   4.5168,  -7.6995],
        [  0.1676,  -4.5102,  -1.9257,   2.7691,  -7.2780],
        [ -0.2882,  -3.3558,  -0.3162,   3.7007, -10.2952]])
<class 'torch.Tensor'>
[0, 3, 3, 3]
target tensor([0., 0., 3., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.7174)
evaluate
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.6957,  -2.5332,  -3.1590,   3.6655,  -9.8072],
        [ -2.1778,  -4.1990,  -8.2543,   5.9179, -10.1932],
        [  2.3190,  -8.3851,  -2.8929,   1.3211, -10.5528],
        [ -0.2589,  -3.1562,  -2.9477,   2.8828,  -9.6122]])
<class 'torch.Tensor'>
[3, 3, 0, 3]
target tensor([2., 2., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.8636)
evaluate
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.2186,  -2.4431,  -0.9292,   1.3123,  -9.4320],
        [  0.7417,  -5.0184,  -3.4789,   3.6654, -10.5108],
        [ -2.7531,  -2.9224,  -6.2833,   5.2095,  -8.5622],
        [ -0.1039,  -1.2636,  -3.7690,   2.5970, -10.0674]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([2., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.9774)
evaluate
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.5370,  -3.8565,  -0.7247,   2.9856,  -9.6381],
        [ -2.9034,  -1.3993,  -5.8141,   5.0504, -10.4222],
        [ -2.1875,  -2.5423,  -0.1360,   5.1300,  -6.9555],
        [ -3.4642,  -3.5270,  -4.3866,   3.8260,  -9.2814]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([4., 1., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.8374)
evaluate
input tensor([[[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.6007,  -3.2985,  -1.4930,   4.5933,  -8.9733],
        [ -1.2730,  -1.9879,  -0.5410,   4.1364,  -7.0152],
        [  1.3581,  -7.3392,  -5.6906,   4.6685, -10.7056],
        [ -5.3857,  -2.8398,  -6.2827,   8.0906, -10.5423]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([2., 2., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.9058)
evaluate
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.7367,  -7.3791,  -6.0561,   2.1733, -11.3734],
        [ -2.1543,   0.6111,  -2.4657,   1.1258,  -3.0877],
        [ -0.9196,  -5.5780,  -0.5196,   6.8058,  -9.2635],
        [ -2.1119,  -4.7460,   1.2465,   5.6393,  -9.5923]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([2., 2., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.1195)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.2571,  -8.3844,  -7.9593,   3.6349,  -8.3720],
        [ -4.7520,  -3.1173,  -5.2552,   4.4106, -10.3173],
        [ -2.7437,  -5.3061,  -2.4576,   3.6166, -10.3367],
        [ -3.5489,  -5.1069,  -1.3436,   4.5475,  -7.9159]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([2., 3., 1., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.5467)
evaluate
input tensor([[[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.2136,  -3.3213,  -0.9091,   2.2616,  -6.9817],
        [ -6.1197,  -7.6840,  -6.7179,   4.1758, -11.7959],
        [ -1.1475,  -5.9212,  -0.4080,   5.2171,  -6.3778],
        [ -2.1335,  -9.7195,  -3.0380,   8.1207, -11.8840]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([1., 2., 4., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(9.8394)
Test: [10/13]	Time 0.489 (0.515)	Loss 9.8394 (5.7849)	Accuracy 0.000 (20.455)
evaluate
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.5105,  0.4291, -1.4237,  6.5167, -6.8874],
        [-6.1791, -4.7294, -5.3933,  5.4647, -7.0638],
        [ 2.2069,  0.3682, -3.8498,  1.3403, -8.6760],
        [-1.8552, -0.5697, -5.8277,  3.4850, -7.6276]])
<class 'torch.Tensor'>
[3, 3, 0, 3]
target tensor([2., 0., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.0305)
evaluate
input tensor([[[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.9000, -0.2732, -0.4505,  2.3416, -7.3571],
        [-5.0401, -6.3547, -3.0071,  7.6943, -9.9721]])
<class 'torch.Tensor'>
[3, 3]
target tensor([2., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(10.2987)
epoch: 29
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-7.2357e+00, -1.0170e+01, -1.1452e+01,  1.8012e+01, -1.1249e+01],
        [-7.1468e+00, -1.4058e+01,  1.8484e+01,  8.4260e+00, -2.9187e+01],
        [-9.9893e+00,  1.9162e+01, -7.5731e+00,  1.1059e-02, -8.6671e+00],
        [-3.7362e+00,  3.0512e+01, -1.2430e+01,  6.4184e+00, -7.8565e+00]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 1, 1]
target tensor([3, 2, 1, 1])
<class 'torch.Tensor'>
loss
tensor(1.0699e-05, grad_fn=<NllLossBackward0>)
Epoch: [29][0/25]	Time 1.964 (1.964)	Data 0.024 (0.024)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
train
input tensor([[[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.5610,  16.8097, -10.1313,   2.7118,  -8.3320],
        [-14.6389,  16.6084, -10.3833,  -1.2145,  -2.0744],
        [ -4.6824,  -7.7822,  10.2818,   1.1313, -11.7522],
        [ -6.7691,   0.9588,   9.2346,  11.7284,  -6.2137]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 3]
target tensor([1, 1, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.6433, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.6971,  -2.3660,  -6.7636,  18.9736, -20.7326],
        [ -7.8238, -13.8524,  18.6559,  -1.4563, -10.9797],
        [-17.4985,  -7.6864,  -5.1550,  33.3562, -17.5031],
        [  3.6373,   1.8655,   2.3292,   3.2187,  -6.2471]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 3, 0]
target tensor([3, 2, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.1853, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.6054,  12.3043,  -6.8164,  -1.7882,  -1.0198],
        [ -5.9872,  -9.6811,  -4.0327,  -8.0563,  12.5184],
        [ 16.7581,  -4.1821,  -5.9369,   3.0304, -19.9809],
        [ 16.6884,  -6.2380,  -8.8886, -15.8676,  -5.8173]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 4, 0, 0]
target tensor([1, 4, 0, 0])
<class 'torch.Tensor'>
loss
tensor(8.9407e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.6433, -22.5125,  24.0953,  -8.5558, -13.4520],
        [ 12.4118, -11.4988,  -6.8182,  -3.8627, -14.4230],
        [ -6.2769,  -7.0612,  14.9199,   0.9722,  -2.5002],
        [  1.4451,  -2.7983,  -7.9464, -16.3452,  23.3403]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 4]
target tensor([2, 0, 2, 4])
<class 'torch.Tensor'>
loss
tensor(2.3842e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.0698e+00, -1.0850e+01,  2.1432e+01, -2.6839e+01, -1.0058e+01],
        [ 1.6674e+00,  6.1982e+00,  1.2363e+01, -8.6927e+00, -3.3007e+00],
        [-4.6506e+00, -1.0036e+01, -7.0077e+00,  1.5219e+00, -7.7151e+00],
        [-1.4591e+00,  1.5271e+01,  5.8949e-03, -1.2842e+01, -3.4415e+00]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 3, 1]
target tensor([2, 2, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.0011, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.6302,  18.7522,  -7.6935,  -5.8660,  -4.0685],
        [ 11.6390,  -6.4792, -16.5374, -29.8292, -15.5457],
        [ -2.6851,  10.6054,   2.4527, -12.7780,  -5.6644],
        [ 12.2877,  -8.5838,  -3.4396,  -5.5623,  -6.5227]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 1, 0]
target tensor([1, 0, 1, 0])
<class 'torch.Tensor'>
loss
tensor(7.2439e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.1292,  11.3600,   0.2946,  -6.6966,  -9.3029],
        [ -0.8467,   0.5476,  11.2617,  -7.1084,  -3.7471],
        [-11.1410,  -6.7268,  17.4358, -12.3523,  -6.6497],
        [ -6.3301,  21.7128,   4.5620, -13.3768,  -7.3889]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 1]
target tensor([1, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(1.4245e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.3782,  32.0250, -11.9398, -13.3343,  -3.7765],
        [ -1.0316,  16.4519,  -2.6966,  -6.4801, -10.9643],
        [ 11.9170,  -1.3958,  -7.8889,  -3.6228,  -8.7729],
        [-11.9379, -18.1775, -11.1889,  37.7812, -22.9240]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 0, 3]
target tensor([1, 1, 0, 3])
<class 'torch.Tensor'>
loss
tensor(4.4703e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.6591,  -5.1351,  12.9553, -12.9484, -10.2234],
        [  3.8441,   4.3564,   1.1997, -20.0720, -12.0970],
        [ -4.5544,   8.0063,  -2.3944,  -8.3321,  -7.8708],
        [ 12.3166,  -3.4294,  -1.7030, -10.1646,  -6.8801]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 1, 0]
target tensor([2, 0, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.2520, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  9.8005, -18.5294,  -7.2675, -24.3251,   6.8195],
        [  0.2865,  -0.2595,  -1.4242, -13.9474,  11.7927],
        [ -0.0784,  -6.0806,  -2.3842,  -5.8243, -13.8331],
        [ -9.3171,  31.4988,  -5.0258, -16.3820,  -7.6152]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 4, 0, 1]
target tensor([4, 4, 3, 1])
<class 'torch.Tensor'>
loss
tensor(2.2191, grad_fn=<NllLossBackward0>)
Epoch: [29][10/25]	Time 1.730 (1.771)	Data 0.031 (0.022)	Loss 2.2191 (0.3001)	Accuracy 50.000 (90.909)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.7419,  -1.2777,  -2.3895,   4.1025, -10.1803],
        [ -8.3806,   7.1672,  -2.7488, -18.9958,   8.7184],
        [ 23.9332, -11.6877, -23.1162, -12.5207, -15.4286],
        [ -3.2809,  -7.2772,  22.9770, -11.7959, -16.7900]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 4, 0, 2]
target tensor([3, 4, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0515, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-17.0961,  -8.4177,  -2.9243,   8.0467,  -8.0757],
        [  6.3165,  -2.2160,  -1.1232,  -6.4353,  -0.8412],
        [ -3.7794,   1.5806,  15.1559, -10.3289,   1.7763],
        [ -8.0467,  16.7895,  -7.8977,  -9.7414,  -5.2177]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 2, 1]
target tensor([3, 0, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0004, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  7.9882,  -8.6517,   2.1349,  -8.4850,  -3.0618],
        [-24.1226, -14.4040,   4.4986,  16.3881,  -4.8811],
        [-13.0892,  -2.1226,   1.7170,   5.3844,  -7.0840],
        [ -1.3676,  -4.0319,  11.6861,  -1.1251,  -3.2538]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 3, 2]
target tensor([0, 3, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0072, grad_fn=<NllLossBackward0>)
train
input tensor([[[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  2,  -1,  -1,  ...,   0,   1,  -2],
         [  5,  -1,   0,  ...,   7,   3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   4,   0,  ...,   0,   0,   0],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   2,  -2,  ...,   0,   1,  -6],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [ 13,  -6,   0,  ...,  -1,  -3,   9],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-13.0061,  -1.2316,  10.2363,  -2.9025,  -4.4075],
        [ 13.3951, -21.3292,  -6.7691,  -7.6048,  -6.9025],
        [ -6.5495,  -8.9768,   2.0179,   8.6889,  -0.9847],
        [ -6.5333, -17.3968,  24.0282, -16.6116,   1.6122]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 3, 2]
target tensor([2, 0, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.3454,   0.1669,  -0.6924,  -5.0166,  -5.7754],
        [-13.2568,  17.1000,   2.0764,  -9.9516,   1.3285],
        [ -9.0092,  -1.3055,  15.7502, -11.2286,  -2.5346],
        [ -5.7436,  -8.1518,   1.4841,  -0.6476,   1.6918]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 4]
target tensor([3, 1, 2, 0])
<class 'torch.Tensor'>
loss
tensor(3.4063, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.1697,  -8.3664,  11.1067, -11.3426,  -4.6431],
        [-13.2242,  -1.7282,  17.6932,  -2.4393,  -0.3440],
        [  0.0453, -14.2240, -14.4379,  19.8420,   9.1700],
        [-24.3706,   9.7886,  -5.3268,  -8.9211,  -1.6806]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 3, 1]
target tensor([2, 2, 3, 1])
<class 'torch.Tensor'>
loss
tensor(8.6426e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-14.7358,  -8.9484,  21.9957,  -0.9270, -12.6748],
        [-12.3116, -16.1847,  15.9213,  -5.7052,  -1.6571],
        [ -6.5592, -10.2708,   3.3739,  -9.1598,  11.7734],
        [-12.6726,  -9.9414,  16.2371,  -1.8047,  -5.9717]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 4, 2]
target tensor([2, 2, 4, 2])
<class 'torch.Tensor'>
loss
tensor(5.6231e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-13.2854,   3.2830,  -5.0480,  -8.8787,   5.2816],
        [ -9.1943,  -5.7678,  10.4974,  -2.6722,  -3.3874],
        [-11.1596,  -7.1246,  -5.0901,  -1.0276,  24.0484],
        [  6.5087,  -2.4032,  -2.5478,  -5.8358,  -4.2068]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 4, 0]
target tensor([1, 2, 4, 0])
<class 'torch.Tensor'>
loss
tensor(0.5315, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 12.1696,  -8.5759,  -2.6231, -21.3738,  -1.3341],
        [-17.8857, -10.5623,  -7.0799,  15.2164, -12.2848],
        [ 14.3835, -14.6606,  -8.4769,  -9.3038,   1.6269],
        [ -6.3289,  -3.7646,  12.4440,  -1.0914,  -3.9070]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 0, 2]
target tensor([0, 3, 0, 2])
<class 'torch.Tensor'>
loss
tensor(1.5199e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-15.8077,  -4.4989,  -0.0253,  20.1946,  -2.9953],
        [ -1.3172,  12.4696,  -2.7465,  -4.2614,   0.1752],
        [ -4.4202,  -5.8851,  15.7063,  -3.6815,  -8.6710],
        [-10.7639,  -8.4130,  10.7488,  -1.2830, -13.1666]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 2, 2]
target tensor([3, 1, 2, 2])
<class 'torch.Tensor'>
loss
tensor(2.9504e-06, grad_fn=<NllLossBackward0>)
Epoch: [29][20/25]	Time 1.752 (1.747)	Data 0.012 (0.021)	Loss 0.0000 (0.3475)	Accuracy 100.000 (91.667)
train
input tensor([[[  7,  -4,   0,  ...,  -1,   1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,  -2,   0,  ...,  -3,  -1,   8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [  5,  -1,  -1,  ...,  -1,   2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,  -1,   0,  ...,   7,   3,   0],
         [  2,   0,   0,  ...,   7,   0,  -1],
         [  3,   0,   0,  ...,   1,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -8.8532,  20.4749,  -7.6627, -17.5655,  -6.1924],
        [ -7.1443, -17.4364,  -2.2826,  16.4458,  -4.1912],
        [ -9.1238, -14.0154,  13.0030,   3.0698, -10.0341],
        [ -8.9936,  -5.5095,   7.6641,  -4.7246,  -6.8793]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 2, 2]
target tensor([1, 3, 2, 2])
<class 'torch.Tensor'>
loss
tensor(1.3768e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.4403,  -6.8404,  -9.7662, -11.1257,  27.6407],
        [ 18.0437, -14.4344,  -8.4470,   1.0318,  -9.1328],
        [ -7.9511, -10.0038, -10.9633,  24.3409,  -6.5753],
        [  9.7122, -12.1597,  -7.6137,   1.0878,  -1.6534]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 0, 3, 0]
target tensor([4, 0, 3, 0])
<class 'torch.Tensor'>
loss
tensor(4.7798e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,  -3,  -1,  ...,   0,  -2,   0],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  0,   0,   0,  ...,   1,  -4,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  6,  -3,   0,  ...,   0,   1,   3],
         [  5,   0,   2,  ...,  -1,  -1,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   1,   0,  ...,   0,  -1,   0],
         [  1,   0,   0,  ...,   2,   1,   3],
         [  3,   0,   1,  ...,   2,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-10.4130,   7.5131,  -6.4140,   5.5606, -11.9662],
        [ -6.6887,  -7.9760,   6.9936,   3.9446, -12.1507],
        [-17.5913,  -7.9934,  13.0759,  -0.1973,  -9.1088],
        [ -4.6843,  -2.8130,   7.0370,   0.0515,  -5.6318]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 2]
target tensor([1, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0450, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  9.3243, -13.0257,   0.6584,  -2.4025,  -8.5725],
        [-11.2010,  -6.7682,  12.8516,   1.1450,  -9.6349],
        [-13.7993,  30.2159, -10.0682,  -1.9135,  -0.9157],
        [-16.2929, -15.2873,  12.6935,   7.6882, -17.5328]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 1, 2]
target tensor([0, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0017, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.1891,  -4.1168,  -1.4935,   4.6209,  -9.0276],
        [ -8.3045,  -1.4965,  -3.3677,   4.2950,  -6.9385],
        [ -5.6156,  -4.1203,   1.6084,   3.8595,  -8.1142],
        [ -8.8346,  -5.4866,  -4.6924,   7.0748,  -9.5336]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([3., 1., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.4163)
Test: [0/13]	Time 0.490 (0.490)	Loss 4.4163 (4.4163)	Accuracy 50.000 (50.000)
evaluate
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.1135,  -3.7163,  -3.8015,  10.7443,  -9.2921],
        [  0.3276,  -0.4104,  -1.8394,   0.7238,  -7.1968],
        [ -5.2453,  -2.8546,   1.3458,   5.7121,  -7.3976],
        [ -1.5265,  -1.9334,   0.0292,   2.5144,  -6.8039]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([0., 0., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(9.6268)
evaluate
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.0559, -5.0660, -1.6807,  3.3574, -8.0266],
        [-8.9082, -4.3858,  0.9050,  6.2533, -6.3409],
        [-4.2014, -5.2166, -1.2188,  3.4737, -7.0669],
        [-8.5113, -4.7052, -1.6584,  5.0587, -7.5338]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([2., 1., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.6053)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-8.0890, -8.4324, -4.1880,  7.1873, -6.9591],
        [-9.8371, -5.2129, -2.3447,  4.9229, -9.4678],
        [-4.8668,  0.4676, -1.4428,  2.0409, -2.1782],
        [-6.8642, -6.1693,  1.0001,  3.3816, -9.9347]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([2., 0., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(9.8713)
evaluate
input tensor([[[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-0.7608, -5.6748, -0.5877,  1.1580, -8.3221],
        [-8.4350, -2.5133, -2.6342,  7.9387, -8.1623],
        [-9.4841, -6.7653, -4.0353,  6.2027, -9.5858],
        [-3.0950, -7.8426,  0.1213,  3.2650, -6.3246]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([0., 1., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.7331)
evaluate
input tensor([[[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.8024,  -1.9554,  -0.0977,  -1.1089,  -2.5880],
        [ -7.3116, -11.0161,  -0.4584,  10.6801, -13.6189],
        [ -4.1774,  -2.8745,  -0.2979,   1.1534,  -9.1960],
        [ -3.4667,  -0.8020,  -0.1309,   1.3195,  -4.1650]])
<class 'torch.Tensor'>
[2, 3, 3, 3]
target tensor([0., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.0066)
evaluate
input tensor([[[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.8107,  -1.6796,   1.6482,   1.5421,  -6.5560],
        [-10.4474,  -3.8551,  -4.4723,   8.1663,  -7.2050],
        [ -7.3219,  -4.2024,   2.5320,   4.4139,  -5.5850],
        [ -4.7162,  -3.0653,   2.0519,   3.5863,  -6.7649]])
<class 'torch.Tensor'>
[2, 3, 3, 3]
target tensor([2., 2., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.8813)
evaluate
input tensor([[[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.8294,  -4.4985,  -2.2744,   8.4667, -10.1167],
        [ -6.4064,  -6.5985,   2.0121,   5.2894,  -4.5373],
        [ -9.9948,  -5.8046,   0.1797,   9.4722, -10.4384],
        [ -3.3227,  -3.3882,   0.4529,   3.6342,  -7.0504]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([3., 4., 4., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(8.2496)
evaluate
input tensor([[[ -1,   2,  -2,  ...,  -2,   4,   1],
         [  0,   0,  -2,  ...,  -4,   5,  -5],
         [  1,  -1,  -1,  ...,   0,   2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   3,   1,  ...,  -3,  -4,   0],
         [  2,  -2,  -2,  ...,   6,   1,  -6],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,  -1,   0,  ...,   7,   3,   0],
         [  2,  -1,  -1,  ...,   2,   6,  -2],
         [  0,   0,  -2,  ...,  -1,   0,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -5.6145,  -0.7534,   0.8989,   1.0443,  -6.6030],
        [-10.8422,  -2.2813,  -2.7954,   6.8548,  -7.3790],
        [ -3.4875,  -8.8132,  -1.7981,   2.5741,  -8.4024],
        [ -2.1773,  -3.7714,   0.3346,   4.5772,  -9.0431]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([2., 2., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.2099)
evaluate
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.2939,  -5.6896,  -2.1799,   7.1777,  -6.7176],
        [ -5.5110,  -5.7250,   1.4526,   6.2281,  -7.9448],
        [ -3.8475,  -3.6852,  -1.7491,   3.0166,  -8.0405],
        [ -3.9131,  -1.6607,  -2.3733,   2.5877,  -8.3584]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([0., 0., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(10.6298)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-8.0468, -3.7962,  1.9319,  5.1037, -7.9673],
        [-6.8285, -4.0472,  0.0701,  4.0843, -7.7667],
        [-4.2797, -7.0083, -1.5944,  5.0349, -9.1809],
        [-2.5698, -4.6452,  1.4143,  2.1315, -5.6934]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([2., 0., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.6603)
Test: [10/13]	Time 0.566 (0.587)	Loss 7.6603 (6.8082)	Accuracy 0.000 (15.909)
evaluate
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.7988,  -4.4783,   2.1605,   3.3240,  -9.4376],
        [-10.0219,  -0.3497,   0.8407,   7.4375,  -5.8275],
        [ -2.4827,  -3.5001,  -1.6064,   1.4048,  -8.2886],
        [-13.0209,  -8.3300,  -3.8089,   7.6902, -10.0652]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([4., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(9.0278)
evaluate
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  1,   0,  -1,  ...,   4,   4,   1],
         [  1,   2,  -2,  ...,  -4,   3,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-6.3179, -5.4272,  2.6778,  6.1639, -8.6724],
        [-4.7071, -2.9056, -4.8692,  3.6972, -6.3537]])
<class 'torch.Tensor'>
[3, 3]
target tensor([2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.0604)
epoch: 30
train
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.0757,  25.5843,  -4.5541, -17.4128, -14.4982],
        [ 13.7851, -10.1062, -10.1345, -15.9698,  -6.0514],
        [-20.2264,  -8.7484, -14.2548,  18.6889, -17.5049],
        [ -6.9438,  -5.7071,   5.7296,  -0.0475, -11.1661]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 3, 2]
target tensor([1, 0, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0008, grad_fn=<NllLossBackward0>)
Epoch: [30][0/25]	Time 1.701 (1.701)	Data 0.023 (0.023)	Loss 0.0008 (0.0008)	Accuracy 100.000 (100.000)
train
input tensor([[[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.3349, -12.3610,  -7.1145,   0.1007,  39.6664],
        [ -9.2650,  -8.9684,  -4.6936,  16.1796,  -5.4329],
        [-16.6713,  15.5977,  -6.5980,   5.7373,  -9.0829],
        [ 20.8181, -15.0094,  -0.2849,  -7.7932,  -1.0406]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 3, 1, 0]
target tensor([4, 3, 1, 0])
<class 'torch.Tensor'>
loss
tensor(1.3053e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 13.2939,  -2.8427,  -5.4611,  -2.4632,  -9.6782],
        [  7.0782, -13.1448, -13.7238,   5.1792, -18.0357],
        [ -5.6455,  -4.4167, -15.6693,  -4.1826,  14.7124],
        [ -8.6522,  -1.7505,  -9.3073,  15.1395, -10.1029]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 4, 3]
target tensor([0, 0, 4, 3])
<class 'torch.Tensor'>
loss
tensor(0.0349, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.9834,  16.4650,  -6.8005,   4.7992,  -4.9635],
        [  0.3050,  -3.8770,   7.2795,  11.0779, -12.4875],
        [ -5.2634,  26.3590, -16.7060,  -2.4612,  -8.9417],
        [ 10.1607, -17.3340,  -6.0208,  -3.4656,  -5.6851]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 1, 0]
target tensor([1, 2, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.9551, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.7321,  -6.1979,  -6.8102,   1.7734,   6.8168],
        [-20.0081, -10.3316,  12.0393,  -4.5284, -17.8445],
        [-11.9502, -17.9927,  26.3751,   0.0838, -18.4371],
        [  8.7469,  -5.4662,  -7.9976,   4.0744, -13.5187]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 2, 0]
target tensor([4, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0039, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.2665,  -7.3935,  -9.3480,  20.9199, -12.6543],
        [ -7.3547,  -6.7578,  11.5241,   3.5373, -23.5921],
        [-11.1038,  14.9107,  -8.0560,  -4.6848,  -6.5398],
        [ -3.9919,   0.5770,  15.3589,   1.5821,  -9.7647]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 1, 2]
target tensor([3, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(8.5310e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.3264, -10.0323,  -9.1381,  33.2214, -21.4699],
        [ -4.7965,  -1.3747,  12.8909, -10.8801, -10.4214],
        [  9.4314,  -4.5530,  -7.4784,   1.6236,  -8.7491],
        [-32.1840, -18.1575,  -2.8306,  43.2730, -21.0358]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 0, 3]
target tensor([3, 2, 0, 3])
<class 'torch.Tensor'>
loss
tensor(0.0001, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.1101e+00, -1.0955e+01, -1.6652e+00,  1.4775e+01, -1.6805e+01],
        [-1.7659e+00,  9.4272e+00, -1.8487e+00, -4.4581e+00, -4.6594e+00],
        [-1.7658e+01,  1.9966e+01, -1.0524e+00, -4.7741e+00, -3.2566e+00],
        [-5.1191e+00,  8.1204e+00, -1.3788e+00, -8.5201e-03, -1.4446e+01]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 1, 1]
target tensor([3, 1, 1, 1])
<class 'torch.Tensor'>
loss
tensor(9.9940e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.7742e+00,  1.9494e+01, -2.8605e+00, -8.6484e+00, -1.1362e+01],
        [-7.6504e+00, -1.2004e+01,  1.4705e+01, -2.0948e-01, -1.3049e+01],
        [ 7.0525e+00, -5.6405e+00, -5.5093e+00, -2.2644e+00, -1.0490e+01],
        [-1.9166e+01, -1.4316e+00,  5.7073e-03,  2.8289e+01, -2.1643e+01]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 0, 3]
target tensor([1, 2, 0, 3])
<class 'torch.Tensor'>
loss
tensor(2.4198e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.7050e+00, -2.2268e+00,  1.8413e+01, -4.4481e+00, -1.6895e+01],
        [-4.5523e+00, -1.6637e+01,  1.3376e+01, -4.8192e+00, -8.9188e+00],
        [-1.2948e+01, -5.0591e+00,  1.2420e+01,  5.4870e+00, -1.3864e+01],
        [-1.2068e+01, -1.6504e-02,  4.0418e+00,  1.5255e+01, -9.1185e+00]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 3]
target tensor([2, 2, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-15.7104, -13.6701,   1.7979,  18.1880, -23.9075],
        [-24.1423,  -9.2925,  -1.4757,  38.7650, -21.1249],
        [  1.2089,  -9.1745, -11.3570,  15.4188, -11.6207],
        [ -4.4462,  -8.4362,  18.2167,  -1.0749, -14.7284]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 3, 2]
target tensor([3, 3, 3, 2])
<class 'torch.Tensor'>
loss
tensor(2.0862e-07, grad_fn=<NllLossBackward0>)
Epoch: [30][10/25]	Time 1.701 (1.751)	Data 0.012 (0.022)	Loss 0.0000 (0.0905)	Accuracy 100.000 (97.727)
train
input tensor([[[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  4,   1,  -2,  ...,  -2,   5,  -4],
         [  6,  -2,   1,  ...,   0,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  2,   3,   1,  ...,  -3,  -4,   0],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   3,  -1,  ...,   0,  -3,   5],
         [  1,  -1,  -1,  ...,  -1,  -3,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-11.5526,  -5.4327,  17.6467, -11.1883,  -9.2516],
        [ -2.9475,   9.1949,   2.7845,  -1.5932,  -8.8814],
        [-14.0850, -18.3579,  18.0512,  -6.3499, -18.3891],
        [-22.1412,  18.3161, -10.2455,   0.7192, -34.2031]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 2, 1]
target tensor([2, 1, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0004, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 15.0774, -12.7137,  -1.8729,   1.6887, -13.7067],
        [-17.5054,  21.5261,  -0.7111,  -5.1277, -19.2395],
        [  4.2365,  -1.4709,  -1.6245,  -1.6779,  -5.4408],
        [-14.3349,  22.8929,  -8.3665, -13.8512,  -6.4060]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 0, 1]
target tensor([0, 1, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.0022, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.1797, -11.8626,   7.6817,  -6.2007,   1.4130],
        [ -2.7350,  -1.7895,   8.2985,   3.3809, -15.7285],
        [ -3.0471,  -3.1827,   3.4923,   9.3660, -16.1773],
        [ -1.8486,  10.9856,   4.9206,  -7.9133, -10.9276]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 3, 1]
target tensor([4, 2, 3, 1])
<class 'torch.Tensor'>
loss
tensor(1.5708, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.4399,  -7.5238, -10.4321,  -1.7097,   8.7586],
        [-19.2037,  17.6170,   3.2920,  -8.2980, -10.2142],
        [-15.2125,  -1.1082,  21.9875, -12.6153, -20.0334],
        [-14.7670,   2.2963,   5.6639,   3.3352,   5.3524]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 2, 2]
target tensor([4, 1, 2, 4])
<class 'torch.Tensor'>
loss
tensor(0.2336, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.7860, -13.1314,  17.3975,  -6.1067,  -3.5029],
        [-14.2285,  -2.0987,  19.2712,  -0.1546, -29.6562],
        [ 14.8900,  -7.6194,  -4.2935,   0.1203, -16.4181],
        [ 10.5165,  -6.1937,  -0.7312, -16.5101,  -4.1371]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 0, 0]
target tensor([2, 2, 0, 0])
<class 'torch.Tensor'>
loss
tensor(3.4570e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -2,  ...,   0,  -3,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [  2,   2,   3,  ...,  -4,   2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,   0,  ...,  -1,  -2,  -1],
         [  1,   2,  -2,  ...,  -6,  -5,   0],
         [  1,   0,  -3,  ...,   4,  -4,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   0,  -2,   0],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  0,   0,   0,  ...,   1,  -4,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-10.4086, -19.5618,  19.8285, -20.0659,  -2.9083],
        [-11.4929, -12.2816,  -7.0621,  -0.9981,  -0.2544],
        [ -9.4613,  -2.9379,  10.3508,  -4.4029, -13.4685],
        [ -6.2027,  17.5485,  -7.0454, -15.5339, -11.9122]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 4, 2, 1]
target tensor([2, 4, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0974, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.1168,  -3.7159,   8.3196,  -3.7905,  -4.7284],
        [  9.6079, -10.8311,  -4.5278,  -7.2173,  -7.7841],
        [-12.4204,  -5.2435,  11.5887,  -9.3869, -10.7520],
        [ -2.7275, -11.4838,  12.8788,  -6.8596, -11.7983]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 2]
target tensor([2, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(5.7810e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.6349,   9.7708,  -5.4605,  -6.0787, -13.3297],
        [  8.2031,  -1.9349,   2.0604,  -4.9844,  -4.4140],
        [  4.9957, -12.3017,  -2.3518, -15.9452,   5.3590],
        [ 26.4392,  -2.4424, -16.6890,  -8.1423, -19.2987]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 4, 0]
target tensor([1, 0, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.2234, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-18.5752,  -3.1854,  13.6240,  -2.8894,   0.8996],
        [  9.8326,  -1.5076,  -1.7766,  -5.6632,  -2.3555],
        [ -3.0856,  22.7927,  -9.9348, -11.3557,  -1.2320],
        [ 13.1580, -13.0328, -16.9543,  -2.3199,   3.4836]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 1, 0]
target tensor([2, 0, 1, 0])
<class 'torch.Tensor'>
loss
tensor(2.3126e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.8307,  -5.2606,  -5.1411,  22.8783,   0.2209],
        [  1.1692,  -4.5431,   6.7649,  -5.0320,  -2.9843],
        [ -8.4450, -13.4225,  17.0973,  -3.1253, -15.1992],
        [-18.0283,  10.3275,  -8.1202,  -8.9495,  -0.9964]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 2, 1]
target tensor([3, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0009, grad_fn=<NllLossBackward0>)
Epoch: [30][20/25]	Time 1.686 (1.768)	Data 0.027 (0.024)	Loss 0.0009 (0.1488)	Accuracy 100.000 (95.238)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.5997,  13.7865,  -3.3767,  -2.7943,   2.4520],
        [  5.9132,   2.8848,  -1.3663, -22.6293,  31.3450],
        [ -6.9258,  -5.1416,   7.9594,  -9.8653,   0.1482],
        [-10.6293,  -7.3018, -13.3391,   3.6473,   1.4887]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 4, 2, 3]
target tensor([1, 4, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0274, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.4819, -22.5664, -23.0017,  27.1497, -10.2105],
        [ -3.4829,   1.9495,   6.8474,  -9.7175,  -2.8860],
        [ -1.5308,  -4.7535,  12.3489,  -3.5822,   1.9132],
        [ 10.5278,  -6.4339,  -8.4466,  -5.0596,   1.0509]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 2, 0]
target tensor([3, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0019, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,  -1,   8,  -4],
         [  1,   0,   1,  ...,   6,   4,  -2],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -1,  ...,   0,   0,   0],
         [  2,  -1,  -2,  ...,   2,   4,  -2],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   2,  -2,  ...,   0,   1,  -6],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [ 13,  -6,   0,  ...,  -1,  -3,   9],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -0.9121,  -3.1195,   2.3907,  -1.6057,  -2.9379],
        [  0.6874,  11.5076,  -9.5697, -13.2143,   4.0969],
        [ -6.6153,  11.9968,  -5.6396,  -6.5078,  -5.0502],
        [ -2.3628,  -2.7456,  -1.6868,   4.9288,  -3.1299]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 1, 3]
target tensor([2, 1, 1, 3])
<class 'torch.Tensor'>
loss
tensor(0.0164, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 22.4750, -15.6227, -38.0756, -29.7298,   9.8755],
        [  2.1269,   8.1206,   4.1894, -10.6614,  -9.7016],
        [  2.2754,  -5.7896,   8.0594,  -5.5032,  -1.4482],
        [ -0.1401,  -0.1077,   5.4644,  -7.7533,   3.9049]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 2, 2]
target tensor([0, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(1.0383, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 0.8221, -4.7986, -2.4671, -6.7685,  5.0939],
        [ 3.4340, -2.7365, -1.7893, -8.7045,  1.6816],
        [ 2.3381, -1.5293, -5.3041, -7.5812,  1.8916],
        [-0.3849, -1.6648, -1.3051, -9.1807,  1.3971]])
<class 'torch.Tensor'>
[4, 0, 0, 4]
target tensor([4., 1., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.3629)
Test: [0/13]	Time 0.485 (0.485)	Loss 4.3629 (4.3629)	Accuracy 25.000 (25.000)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.3482,  -6.4071,  -4.3461, -10.1003,   4.7484],
        [  6.9207,   1.2228,  -4.5414,  -8.6743,  -1.2153],
        [  1.8741,  -2.1948,  -2.9246,  -5.1430,  -0.3920],
        [  3.0455,  -3.6018,  -3.7919,  -6.9088,  -0.6338]])
<class 'torch.Tensor'>
[4, 0, 0, 0]
target tensor([3., 0., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.7146)
evaluate
input tensor([[[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   3,   1,  -6],
         [  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   0,   0,  ...,   3,   0,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  5,  -1,   0,  ...,   7,   3,   0],
         [  5,   0,   0,  ...,   6,  -1,   7],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ 2.1869, -0.9648, -5.7685, -5.9355,  1.7586],
        [ 1.7983, -8.6416, -4.3920, -2.4767, -3.7189],
        [ 2.1066, -1.5307, -1.4035, -6.0619, -0.1421],
        [ 1.9056, -2.3031, -0.9212, -7.8792,  0.6278]])
<class 'torch.Tensor'>
[0, 0, 0, 0]
target tensor([1., 2., 0., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.0316)
evaluate
input tensor([[[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 0.2295,  0.1761, -2.1344, -7.8037,  1.4001],
        [ 1.8818,  0.5936, -3.2215, -7.6508,  4.2188],
        [ 1.2353, -4.4718, -2.4921, -9.4430, -1.3981],
        [ 4.9978, -4.7820, -2.4266, -8.9106, -1.0491]])
<class 'torch.Tensor'>
[4, 4, 0, 0]
target tensor([2., 2., 1., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.3468)
evaluate
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-0.4912, -3.9237, -6.9524, -7.3608, -0.1731],
        [-1.5345, -1.3064, -7.9862, -5.2055,  2.7915],
        [ 1.9057, -2.1731, -5.0204, -7.5439,  2.2427],
        [ 2.7695, -2.7636, -3.3391, -4.4789, -0.5444]])
<class 'torch.Tensor'>
[4, 4, 4, 0]
target tensor([2., 2., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(8.6580)
evaluate
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 0.5073, -1.2857, -2.0870, -6.8338, -1.3029],
        [-2.6842, -5.8762, -7.9077, -9.2802,  1.9131],
        [ 0.0630, -1.8532, -2.2616, -3.1112, -0.0162],
        [ 2.2572, -2.2217, -1.5245, -6.1435,  0.5838]])
<class 'torch.Tensor'>
[0, 4, 0, 0]
target tensor([2., 2., 0., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.5401)
evaluate
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 2.0606, -1.2091, -2.4823, -3.9177, -1.6287],
        [-0.9081, -2.6973, -2.5696, -6.6171,  2.4799],
        [ 3.2104, -2.4726, -1.8847, -7.0907, -0.9323],
        [ 0.2529, -3.4051, -1.2912, -4.1779,  0.5535]])
<class 'torch.Tensor'>
[0, 4, 0, 4]
target tensor([1., 2., 4., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.7764)
evaluate
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 0.7373, -1.9939, -4.2376, -8.7849,  0.8576],
        [-0.6240, -2.7059, -2.8911, -7.1335,  2.8535],
        [ 3.9138, -0.8856, -5.1451, -9.6148, -0.8394],
        [ 2.0729, -1.0515, -7.0674, -7.4203,  3.6212]])
<class 'torch.Tensor'>
[4, 4, 0, 4]
target tensor([0., 1., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.8188)
evaluate
input tensor([[[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.5376,  -0.6495,  -5.4466, -10.2831,   1.4543],
        [ -0.1646,   2.0358,  -3.6837,  -4.2774,   3.4963],
        [  0.3899,  -2.7299,  -6.5111, -10.3218,   2.1119],
        [  1.0541,  -2.7328,  -4.4447,  -4.7385,  -1.5598]])
<class 'torch.Tensor'>
[4, 4, 4, 0]
target tensor([3., 2., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.2891)
evaluate
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-0.6062, -2.9793, -6.5543, -8.4987,  5.4097],
        [ 3.4186, -7.1430, -5.2687, -9.2961,  1.6401],
        [-1.9420, -4.2620, -4.7692, -4.2676,  0.6298],
        [ 1.5619, -0.0486, -7.9525, -8.9367,  2.1456]])
<class 'torch.Tensor'>
[4, 0, 4, 4]
target tensor([0., 0., 4., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.2433)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 0.3303, -2.3225, -6.5977, -8.5171,  2.5278],
        [ 1.4639, -3.4626, -1.6816, -6.5354,  1.4403],
        [-2.5848, -2.7145, -5.7355, -5.7545, -0.8310],
        [ 4.1106, -4.4713, -5.1193, -8.3630,  0.5117]])
<class 'torch.Tensor'>
[4, 0, 4, 0]
target tensor([2., 0., 3., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.7970)
Test: [10/13]	Time 0.555 (0.513)	Loss 3.7970 (4.8708)	Accuracy 50.000 (22.727)
evaluate
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.9187,  0.2134, -2.4645, -1.9486,  2.8884],
        [-1.1759, -1.7342, -8.7438, -5.3354,  1.1527],
        [ 2.1864, -3.5886, -8.8727, -9.3543,  2.9580],
        [ 2.7307,  0.2143, -0.5799, -6.6604,  0.5725]])
<class 'torch.Tensor'>
[4, 4, 4, 0]
target tensor([2., 0., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.9089)
evaluate
input tensor([[[  2,   0,   0,  ...,  -1,  -2,  -1],
         [  0,   2,  -2,  ...,  -3,   4,  -2],
         [  2,  -1,  -1,  ...,   0,   1,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  2.1387,  -6.1815,  -7.7026,  -9.3262,   3.6879],
        [ -1.3573,  -0.5920,  -8.0526, -10.1533,   4.1495]])
<class 'torch.Tensor'>
[4, 4]
target tensor([2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(11.8990)
epoch: 31
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,  -1,   0,  ...,  -1,   0,   4],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  6,  -2,   1,  ...,   0,  -1,   0],
         [  3,  -1,  -2,  ...,   0,   3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -2,  ...,   0,  -3,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [ 13,  -6,   0,  ...,  -1,  -3,   9],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ 23.4069, -10.0510, -13.6067, -20.6193,   6.6774],
        [ -0.0495,  -3.3338,  10.9112, -10.1634,  -8.0759],
        [ -5.0019,  -3.1616,   2.9227,  -1.5416,  -4.2139],
        [  9.0495,  -2.3986,  -4.1945,  -4.9711,  -2.2263]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 0]
target tensor([0, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0037, grad_fn=<NllLossBackward0>)
Epoch: [31][0/25]	Time 1.886 (1.886)	Data 0.024 (0.024)	Loss 0.0037 (0.0037)	Accuracy 100.000 (100.000)
train
input tensor([[[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 10.6904,  -9.3585,  -9.2742, -10.9525,  -3.4413],
        [ -1.1688,  -9.2418,   7.5871, -16.0195,   0.4792],
        [ -2.0414,  10.8700, -10.9060, -10.2185,  -5.3161],
        [ -6.5319, -14.0874,  14.3423,  -9.9785, -11.0405]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 1, 2]
target tensor([0, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.1490,   0.1082,  -3.7431,   8.8112,  -3.0603],
        [ 24.9909, -17.5780, -17.0563, -14.4253,  -4.3376],
        [  0.7134,  -5.0592,   4.8142,  -8.1012,   0.4270],
        [ 22.2736,  -6.5995,  -7.8697,  -7.7892,  -0.6822]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 2, 0]
target tensor([3, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0072, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 13.0342, -13.8165,  -5.8663, -11.3819,   2.1085],
        [ -3.7817,  -6.4846,  -2.4665,   4.3101,   3.6521],
        [  0.5527,   3.3298,  -5.3166, -10.8541,  -3.3730],
        [  0.1633,  -9.7542, -21.4545, -14.0076,  41.3918]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 1, 4]
target tensor([0, 3, 1, 4])
<class 'torch.Tensor'>
loss
tensor(0.1200, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.7833, -10.7202,   5.1180, -11.9542,  -5.5484],
        [ -3.3996, -12.4018,   5.2689,  -4.7863,  -0.4066],
        [  0.9089,  -5.7920,   9.4994,  -1.7639,  -5.8905],
        [ 23.2393, -12.4549,  -7.4519, -13.3199,   5.9239]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 0]
target tensor([2, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0042, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 11.0539,  -7.7019,  -6.4469,  -5.9274,  -1.9901],
        [ -1.5284,   7.1342,  -1.0976,  -5.5711,  -2.5466],
        [  2.9927, -10.6986,  -8.2912,   1.8905,  -5.6805],
        [ -6.0965, -14.9955,  -6.0910,   1.6477,  -0.9032]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 0, 3]
target tensor([0, 1, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.3664, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.4494,  13.4989,  -2.5860,  -7.2897, -12.4985],
        [ -5.5650, -20.9109,  20.1771, -20.8286,  -0.1408],
        [ -0.5021, -23.1194,  21.6641,  -5.8876,  -4.6070],
        [ -1.4310,   1.8546, -13.6094, -12.7253,   5.3270]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 4]
target tensor([1, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.8760, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.0313, -10.0154,  -1.0612,   7.6391,  -4.8077],
        [ -1.1855,   7.6301,  -2.4409,  -5.0369,  -2.3254],
        [  2.5150, -16.5698,  12.0331,  -7.1009, -13.0239],
        [ 18.1624, -20.0737,  -1.6955, -13.9836,  -7.6088]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 2, 0]
target tensor([3, 1, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0001, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.7102,   8.7160,  -7.9077,  -8.6472,  -6.6392],
        [ -1.3101,  -7.9299,  13.4987,  -9.5495,  -2.0872],
        [-14.9443, -15.8943,  -1.8721,  -9.1577,  38.5726],
        [  9.6384,  -4.3120,  -1.3729,  -5.8925,  -5.0938]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 4, 0]
target tensor([1, 2, 4, 0])
<class 'torch.Tensor'>
loss
tensor(5.0664e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 18.4982, -12.2090,  -2.5938, -10.1070,  -6.6292],
        [ 20.2599, -20.2759, -16.4585,  -9.3839, -10.6451],
        [ -7.1260,  12.0712,  -8.6221,  -9.3114,  -5.3029],
        [ -1.5966,  -5.6816,  10.3685,  -5.9034,  -5.3757]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 1, 2]
target tensor([0, 0, 1, 2])
<class 'torch.Tensor'>
loss
tensor(1.6689e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.9109,  19.8051, -13.8490,   2.4429, -10.9129],
        [ -4.7855, -23.5134,  12.7387,  -2.4552, -18.6450],
        [  4.6368,  12.2180,  -6.2785,  -2.5628,  -4.8145],
        [-12.0476,  -9.1742,  16.5366,  -2.2732, -24.3236]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 1, 2]
target tensor([1, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0001, grad_fn=<NllLossBackward0>)
Epoch: [31][10/25]	Time 1.944 (1.757)	Data 0.036 (0.022)	Loss 0.0001 (0.1253)	Accuracy 100.000 (95.455)
train
input tensor([[[  1,   1,  -4,  ...,  -4,   2,   1],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  2,   0,  -3,  ...,   0,   3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -1,  ...,   0,   0,   0],
         [  0,   1,   1,  ...,   6,   1,  -1],
         [  2,   0,   0,  ...,   7,   0,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,  -1,  ...,  -1,  -3,   3],
         [  0,  -1,  -6,  ...,  -4,   0,  -8],
         [  4,  -1,   1,  ...,   6,  -4,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -4.6176,   0.2035,   2.9118,   0.4632, -15.0438],
        [  7.5307, -14.7958,  -9.8824,  -1.0751, -11.2360],
        [ -6.5911, -19.6448,  18.5280,  -4.7436, -12.2381],
        [-11.2870, -25.4408,  31.7309,   6.2254, -22.9402]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 2]
target tensor([2, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0358, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.6729,  -3.7471,   1.6315,   8.9232, -10.2117],
        [ -6.7360,  -6.0367,   4.7670,  -2.0069,  -8.3397],
        [-24.5248, -10.8621, -18.2467,  40.9005, -21.0637],
        [ 11.7253,  -3.5826,  -5.4786,  -2.5134, -16.6799]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 3, 0]
target tensor([3, 2, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0005, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 27.1167, -17.4350, -14.7857,  -0.3065, -22.5189],
        [ -9.4424,  -8.0269,  13.9491,   0.0922, -14.7354],
        [ 19.5525,  -7.1090,  -9.2735, -18.9869,  -3.5287],
        [-11.2289,  -7.3790, -19.6624,   6.0029,  18.5434]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 0, 4]
target tensor([0, 2, 0, 4])
<class 'torch.Tensor'>
loss
tensor(1.1325e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.7976, -15.0226, -12.6243,  35.0497, -29.8457],
        [ -5.8688,  -2.7329,  -2.1929, -12.8410,  19.2578],
        [-13.3386,  15.3305,  -7.5265,  -2.4156, -10.8626],
        [ -4.9099,  11.0873, -17.9198,  -3.6983, -12.1083]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 4, 1, 1]
target tensor([3, 4, 1, 1])
<class 'torch.Tensor'>
loss
tensor(1.1921e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 10.1719, -11.7394,  -3.1327,   1.2881, -12.7851],
        [-18.9377,   5.9316,   1.6117,   9.5664, -18.4597],
        [ -9.0737,  -6.6596,  -6.6331, -16.6215,   4.6489],
        [ -6.4054,  20.9490,  -5.2327, -13.8070,  -9.7035]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 4, 1]
target tensor([0, 1, 4, 1])
<class 'torch.Tensor'>
loss
tensor(0.9153, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 14.4955,  -3.8878,  -5.0279,   1.2882, -22.3342],
        [ -5.2266,  -1.6361,  -7.1306,  21.0528,  -6.2765],
        [-22.8258,  -4.6531,  -5.9580,  23.1326,  -8.4205],
        [ -4.4864,   2.4750,   8.1317,  -1.7838,  -8.2734]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 3, 2]
target tensor([0, 3, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0009, grad_fn=<NllLossBackward0>)
train
input tensor([[[  0,   0,  -2,  ...,  -4,   5,  -5],
         [  1,  -1,  -1,  ...,   0,   2,   0],
         [  1,   0,  -2,  ...,   1,   1,  -5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,  -1,  ...,  -1,  -3,   3],
         [  3,  -1,  -2,  ...,   0,   3,   4],
         [  1,   1,   0,  ...,   0,   6,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  1,  -1,  -1,  ...,  -4,   1,   6],
         [  4,   2,   0,  ...,  -1,  -3,   8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-13.4357,  -7.5872,  -4.2434,   6.8503,   6.6834],
        [ -8.0486,  -6.6130,   6.6381,  -0.6708, -20.8383],
        [-19.6908,  -3.7233, -11.1248,  34.3536, -18.7954],
        [-30.1521,  -0.2830,  -7.5493,  40.3184, -19.8875]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 3, 3]
target tensor([4, 2, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.1952, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.8697, -13.6865, -19.5401,  33.4562, -26.2363],
        [-12.8871,   0.5984,  32.3696,  -2.8261, -11.4289],
        [ -7.1919,  -6.7472,  33.3003, -18.9942, -19.4193],
        [ -2.6092,  10.5844,   1.4905,  -1.6506,  -9.9958]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 2, 1]
target tensor([3, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(2.9801e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-14.5815,  37.1024, -11.7961,  -8.8812, -13.2024],
        [-11.5519,  15.0389,  -9.1681, -14.6841,   8.2226],
        [ -1.3233,   6.9046,  -2.5207,   0.3280,   2.4771],
        [-14.3728,   1.2748,  -4.9525,  10.4439, -17.6034]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 1, 3]
target tensor([1, 4, 4, 3])
<class 'torch.Tensor'>
loss
tensor(2.8147, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.9280,  -6.0237,  20.9976,  -8.0347, -15.0485],
        [-13.2823,  -1.5642, -17.0223,  19.4728, -16.0408],
        [-13.2955,  21.2323,   6.4475,  -2.9889, -11.2626],
        [-11.0374,  -3.5227,  -1.2328,  10.7183, -19.6324]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 1, 3]
target tensor([2, 3, 1, 3])
<class 'torch.Tensor'>
loss
tensor(1.8775e-06, grad_fn=<NllLossBackward0>)
Epoch: [31][20/25]	Time 1.640 (1.798)	Data 0.023 (0.023)	Loss 0.0000 (0.2543)	Accuracy 100.000 (92.857)
train
input tensor([[[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.3792,  -1.1275,   9.1609,  -5.9847,  -8.5325],
        [ 14.6143, -14.4903, -12.7466,  -8.9936, -11.9838],
        [-14.6474,  -3.2263,  14.2973,  -7.9018,  -6.8814],
        [ -3.3953,  -0.7631,   4.8195,  -2.9432,  -5.2432]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 2]
target tensor([2, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0011, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  4.2400,  -3.6621,   1.0419,  -2.5197,  -5.9684],
        [ -2.2786, -10.8917,  19.1188,  -7.5479,  -0.3064],
        [ -3.3483,  -5.4875,   2.4346,  -4.2214,  -2.7059],
        [-13.0706,  13.3962,  -2.5465, -11.9446,  -2.8485]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 1]
target tensor([0, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0130, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-19.9343,  14.0281,   3.2541,  -9.7247,  -7.5769],
        [-20.9663,   7.6041,   2.7805, -20.2365,   0.4296],
        [ -3.6380,  -4.4055,  12.4110,  -6.4425,  -1.0874],
        [-11.3272,  -8.1860,  15.7776, -17.1821,  -7.0339]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 2]
target tensor([1, 1, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0022, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.8191,  -7.2318,  -6.3508,  -1.9917,  -2.6383],
        [ -7.2484, -11.1190,  10.4143,  -9.8394,  -1.3002],
        [ -8.6404,  11.0280,  -7.9946,  -5.1036,   1.6172],
        [-13.7860,  26.8239,  -5.0891, -14.1498,   3.8960]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 1, 1]
target tensor([3, 2, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.1096, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.1714,  -2.3500,   2.8510,  -7.1618,  -0.8009],
        [ -5.8998,  -5.2728,   4.2151, -11.1988,   0.4517],
        [ -9.0062,  -2.6122,  -0.3889,  -9.0352,   0.0460],
        [ -4.1162,  -0.7719,  -0.4438,  -9.4450,   2.8722]])
<class 'torch.Tensor'>
[2, 2, 4, 4]
target tensor([2., 1., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.4744)
Test: [0/13]	Time 0.501 (0.501)	Loss 3.4744 (3.4744)	Accuracy 25.000 (25.000)
evaluate
input tensor([[[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.2160,  -2.5819,   2.9100, -10.2968,   2.0344],
        [ -4.4760,  -2.9465,   4.6125,  -8.5665,   1.1811],
        [ -8.3660,  -1.0288,   2.0880, -13.1726,   4.9182],
        [ -8.6044,  -0.2317,   2.6744,  -4.6260,   4.9629]])
<class 'torch.Tensor'>
[2, 2, 4, 4]
target tensor([1., 3., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(9.8999)
evaluate
input tensor([[[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [  7,  -1,  -1,  ...,   0,   5,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[ 10,  -6,   2,  ...,   2,   0,  -1],
         [  2,   3,   3,  ...,   0,   1,  -1],
         [  0,   0,   0,  ...,   0,   0,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,  -1,  ...,   1,   1,   3],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,   0,   0,  ...,   0,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -3.5376,  -1.7320,  -0.4519,  -8.1730,   4.5457],
        [ -3.9827,  -5.6496,   1.1355, -11.6727,   6.3747],
        [-10.8233,  -2.6791,   1.9300,  -9.7210,   2.8078],
        [ -6.2405,  -1.3873,  -0.2756, -11.2293,   4.2534]])
<class 'torch.Tensor'>
[4, 4, 4, 4]
target tensor([1., 3., 3., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(10.7184)
evaluate
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.8398,  -3.1152,   1.2589,  -9.5035,   8.5779],
        [ -6.1993,  -4.2016,   1.5622, -12.5953,   4.6207],
        [ -8.6106,  -1.7494,   1.0821, -13.4098,   6.8815],
        [ -9.8747,  -4.4444,   3.2192,  -7.6901,   3.7747]])
<class 'torch.Tensor'>
[4, 4, 4, 4]
target tensor([0., 0., 0., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(11.3083)
evaluate
input tensor([[[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.1495,  -4.8435,   1.5655, -11.1018,   3.3733],
        [ -8.0522,  -3.5155,   5.0051,  -9.7829,   2.4106],
        [ -2.9884,  -2.4985,   0.0437,  -6.0788,  -0.2874],
        [ -2.3081,  -3.6091,   0.8917,  -8.7096,  -0.4661]])
<class 'torch.Tensor'>
[4, 2, 2, 2]
target tensor([0., 1., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.9233)
evaluate
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.6617,  -1.9863,   1.4552,  -4.4897,  -1.4662],
        [ -2.6006,  -2.5317,   0.3637, -11.9751,   2.2383],
        [ -5.2945,  -4.3341,   4.9750,  -5.3019,   1.0626],
        [ -2.8967,  -3.2209,   2.5470,  -6.2077,  -0.2552]])
<class 'torch.Tensor'>
[2, 4, 2, 2]
target tensor([1., 0., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.1620)
evaluate
input tensor([[[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.0803, -4.4118,  3.8305, -8.8006,  5.8562],
        [-4.8487, -7.8292,  2.4412, -6.8841, -2.5797],
        [-5.3976, -1.4268,  2.3680, -4.0659, -0.2131],
        [-7.2009, -2.2182,  3.7285, -9.9288,  2.0349]])
<class 'torch.Tensor'>
[4, 2, 2, 2]
target tensor([4., 2., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.0408)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.4659,  -1.2120,   0.2624, -11.7325,   6.2234],
        [ -4.0095,   1.8281,   0.5258,  -5.9006,   3.3254],
        [ -3.4159,  -4.3779,   3.6896,  -8.0094,   2.7585],
        [ -5.2370,  -1.6119,   2.0982,  -8.6318,   3.2597]])
<class 'torch.Tensor'>
[4, 4, 2, 4]
target tensor([2., 2., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.6217)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.1706,  -2.4739,  -1.5099, -11.6051,   5.5234],
        [-11.2731,  -6.6311,   2.6380, -12.7066,   4.1555],
        [ -8.3357,  -1.9238,  -0.0235, -10.5135,   6.9335],
        [ -3.3012,  -3.4538,   1.3568, -10.9128,   5.3267]])
<class 'torch.Tensor'>
[4, 4, 4, 4]
target tensor([2., 2., 1., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(8.4668)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.7030,  -0.7325,  -0.4736, -10.2294,   0.0450],
        [ -7.1318,  -0.9303,   4.7736, -11.8366,   2.8629],
        [ -2.9124,  -3.1834,   4.1324,  -8.9938,   1.6841],
        [ -3.5454,  -0.5613,   2.5665,  -8.9982,   4.1370]])
<class 'torch.Tensor'>
[0, 2, 2, 4]
target tensor([0., 2., 4., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.1928)
evaluate
input tensor([[[  0,   0,   0,  ...,   3,   1,  -6],
         [  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   0,   0,  ...,   3,   0,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[ 10,  -6,   1,  ...,   2,  -5,   4],
         [  4,  -3,  -3,  ...,  -2,   1,   3],
         [  1,  -1,  -2,  ...,   3,   3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,  -1,   0,  ...,   7,   3,   0],
         [  2,  -1,  -1,  ...,   2,   6,  -2],
         [  0,   0,  -2,  ...,  -1,   0,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -0.1539,  -2.2662,   2.2562,  -6.3077,   0.2171],
        [ -2.4944,   0.2268,   3.9480,  -8.0674,   2.0438],
        [ -2.5942,  -3.9926,   0.8033,  -6.3487,  -0.0574],
        [-12.2862,  -1.5001,  -0.4498, -14.0053,   7.3759]])
<class 'torch.Tensor'>
[2, 2, 2, 4]
target tensor([0., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.7468)
Test: [10/13]	Time 0.524 (0.518)	Loss 2.7468 (5.6868)	Accuracy 50.000 (27.273)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.2151,  -4.9448,  -0.7042, -11.0512,   4.6779],
        [ -6.2341,  -4.0992,   4.7007,  -8.8841,   3.5163],
        [ -7.8608,  -3.3381,  -0.3819,  -7.4345,   5.1243],
        [ -0.8214,  -4.2077,   1.9694, -11.4417,   0.4972]])
<class 'torch.Tensor'>
[4, 2, 4, 2]
target tensor([2., 0., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.2867)
evaluate
input tensor([[[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.1782,  -7.6044,   0.3986, -12.2274,   3.8304],
        [-11.2504,  -0.8098,  -0.0603,  -8.1958,   2.8408]])
<class 'torch.Tensor'>
[4, 4]
target tensor([0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(10.6052)
epoch: 32
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.7900,   8.3924,   2.4214, -11.6069,  -4.8842],
        [  5.4215,  -3.9501,  -0.6405,  -6.4230,  -1.6737],
        [ 10.0317,  -8.6765,  -2.9106, -25.7874,  -8.8071],
        [  7.1191, -11.5503,  -4.0649, -12.5075,  -1.7950]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 0, 0]
target tensor([1, 0, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.0015, grad_fn=<NllLossBackward0>)
Epoch: [32][0/25]	Time 1.880 (1.880)	Data 0.024 (0.024)	Loss 0.0015 (0.0015)	Accuracy 100.000 (100.000)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.0583,  10.0897,  -6.7732, -18.7306,   8.6480],
        [ 14.3371, -11.5859, -17.9108, -30.8183,  16.2152],
        [-15.0360,  -5.6042,   9.3521, -13.9544,   5.2926],
        [  2.8368,   0.7977,  -5.2896,  -7.5830,  10.0843]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 4, 2, 4]
target tensor([1, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(2.3745, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.3249,  -5.6003,  -2.7992,   5.6470,  -3.7987],
        [ -4.7122,  -4.1485,  10.2906, -10.8582,  -0.6032],
        [ -1.5902,  -4.1417,  -3.3381, -27.8907,  39.5654],
        [-20.7184,  -8.9085,  -4.4701,  15.1320,  -5.5273]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 4, 3]
target tensor([3, 2, 4, 3])
<class 'torch.Tensor'>
loss
tensor(8.1766e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.4488, -12.2865,  14.6948, -18.0945,   0.1071],
        [  7.7879,  -6.6106,  -1.0971,  -6.8448,  -5.1603],
        [ -2.5320,  -5.1630,  -1.5896,   5.1287,  -5.3206],
        [ 16.0359,  -5.1614,  -7.0608, -10.7790,   1.3226]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 3, 0]
target tensor([2, 0, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0005, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 10.2415,  -8.2161,   3.1776, -10.8571,  -1.6947],
        [  0.4949,  12.6816,  -1.5162, -13.5349,   2.2183],
        [-15.5649, -15.2096,  -7.2156,  18.1525,  -5.0309],
        [ -4.7494,  -7.2713,   5.1639,   7.7559,  -7.3435]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 3, 3]
target tensor([0, 1, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.0183, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.6388, -10.2811,  11.5197, -12.4064,  -6.8178],
        [ -1.0192, -11.2575,  19.9469, -28.0929, -10.4725],
        [-11.0427, -21.9100,  -4.9824, -28.9902,  50.2679],
        [ -0.2251, -13.0674,  15.7666, -15.4119,  -6.4380]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 4, 2]
target tensor([2, 2, 4, 2])
<class 'torch.Tensor'>
loss
tensor(8.9407e-08, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  5.4802, -13.7824,   9.7737, -11.3473,  -0.6966],
        [  2.1717,   1.2433,  -3.3994, -10.9578, -11.8284],
        [ -0.9804, -10.8875,  14.3831, -14.9324,  -5.0964],
        [  3.1474,  -5.0189,   6.8298,  -9.0373,  -1.4620]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 2]
target tensor([2, 1, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.3257, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  6,   0,   0,  ...,  -3,   4,   2],
         [  2,   0,  -1,  ...,  -1,   2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   1,  -3,  ...,   1,  -3,   2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,  -1,  -1,  ...,  -2,   0,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,  -1,  -2,  ...,   0,   3,   4],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  7,  -3,  -1,  ...,   4,   1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  1.3779,  12.4769,  -1.6485, -12.8408,  -1.3687],
        [  1.5354, -21.8152,  20.7859, -17.2583,   0.7441],
        [ 16.5099, -13.5863, -28.3212, -17.3254,  48.3581],
        [ 25.3765, -11.7237,  -1.9873, -20.3837,  -3.8274]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 4, 0]
target tensor([1, 2, 4, 0])
<class 'torch.Tensor'>
loss
tensor(4.2021e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[  0,   0,   0,  ...,  -1,   8,  -4],
         [  1,   0,   1,  ...,   6,   4,  -2],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   1,  -1,  ...,  -5,   4,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -1,  -1,  ...,   0,   5,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  0.2076,  31.7623,   1.2840, -13.9094, -28.4763],
        [  2.8512, -14.9647,  10.8739, -17.8347, -14.2239],
        [ -2.8209,  12.9708,   5.7608, -16.8845,  -1.8387],
        [  5.0180,   8.9079,  -4.2087,  -5.2440,  -2.0965]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 1, 1]
target tensor([1, 2, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0053, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.7107,  -7.2628,  17.4877, -11.4181,  -8.5572],
        [ 19.9562,  -3.8302,  -1.7188, -24.2361,  -6.9658],
        [ -2.8437, -11.3215,  13.2629,  -7.2172, -17.1809],
        [ -3.6827,  -7.8187,   9.7391,  -9.5292,  -5.9338]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 2]
target tensor([2, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(5.3644e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  7.2493,  -2.7530,   6.9301, -11.5612,  -4.3589],
        [  4.5978,   8.2114,  -2.4674, -10.2869, -12.3544],
        [-11.0087,  -9.8987,   0.7871,   9.2775, -12.1661],
        [ -0.0452,   9.3683,   3.7315, -12.4725,  -5.5350]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 3, 1]
target tensor([2, 1, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.2240, grad_fn=<NllLossBackward0>)
Epoch: [32][10/25]	Time 1.668 (1.745)	Data 0.012 (0.022)	Loss 0.2240 (0.2682)	Accuracy 75.000 (90.909)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 15.4480, -14.5414,  -8.9047, -17.8628, -19.2617],
        [  2.4596, -17.8345,  30.8148, -10.9822, -13.1872],
        [ 19.7040, -27.2247, -12.2920, -22.7159,  28.2421],
        [ -5.6400,  13.0349,  -5.8471, -14.0986,  -7.8723]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 4, 1]
target tensor([0, 2, 4, 1])
<class 'torch.Tensor'>
loss
tensor(4.8960e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[  7,  -4,   0,  ...,  -1,   1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,  -2,   0,  ...,  -3,  -1,   8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,  -1,  ...,  -1,  -3,   3],
         [  2,   0,   0,  ...,  -1,  -2,   2],
         [  2,   0,  -1,  ...,   1,  -2,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -1,  ...,   0,   0,   0],
         [  2,  -1,  -2,  ...,   2,   4,  -2],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  1.2149,  23.9396,   2.4637, -26.0702,  -6.9741],
        [ 14.5085, -13.2751,  -1.4222, -13.1067,  -4.1797],
        [-11.6072,  37.3507,   6.1313, -39.0518, -14.3752],
        [  1.3043,  -2.5839,   6.9547,  -4.8963,  -1.6195]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 1, 2]
target tensor([1, 0, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0009, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  7.4854,  -7.7198,   7.7220, -28.6312,   4.0797],
        [ 10.8939,  -7.5906,  -2.9371, -17.3224,  -5.9753],
        [  7.6620, -10.6617,  21.3862, -14.2617,  -3.3746],
        [  0.1818,  -6.0405,  15.1064, -13.1443,  -8.2705]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 2]
target tensor([4, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(1.0597, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.7168,   2.1134,  10.3465, -16.5875,  -9.8802],
        [  0.4847,  10.2927,   1.3433,  -6.9560,  -4.0442],
        [ -8.3863,  11.1081,  -0.1614, -16.6842,  -7.0298],
        [  0.3587,   3.6176,   1.1822,  -6.6428, -12.7247]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 1, 1]
target tensor([2, 1, 1, 3])
<class 'torch.Tensor'>
loss
tensor(2.5949, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.4464,  -9.0677,  14.4546, -13.9854,   0.2815],
        [ 17.3151, -16.4745,  -5.2189, -22.0360, -27.9844],
        [ -0.1864,  27.5469, -11.1292, -17.5893, -28.0218],
        [ -1.1945, -18.7965,  21.5497, -19.1641, -15.5491]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 1, 2]
target tensor([2, 0, 1, 2])
<class 'torch.Tensor'>
loss
tensor(7.4506e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.4612, -11.8146,   0.3908,  23.1881,  -1.4957],
        [ -4.7017,   3.9308,  -7.5028, -11.6802,  -4.1598],
        [ -2.8736,  -6.8749,  12.7696, -10.8154,  -4.6158],
        [ -1.4129,  -0.5351,  12.0200, -14.2462,  -6.4519]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 2, 2]
target tensor([3, 1, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0001, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.5365,  -6.9895,  -6.2327,  12.0226, -13.1425],
        [ -1.0792,  23.1323,  -4.9498, -12.6025,   5.8591],
        [  8.2652, -18.0611,  -3.7974, -12.1310,  -1.0273],
        [ -5.3861,  -1.1264,  12.2204,  -7.2441,  -5.2741]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 0, 2]
target tensor([3, 1, 0, 2])
<class 'torch.Tensor'>
loss
tensor(2.4884e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.7096, -12.3911,  20.3785, -17.7133,  -1.2805],
        [ -4.0862,  -3.6169,  -9.1560,  -9.8945,  17.2123],
        [ 21.6910, -17.4796, -17.2309, -16.2108,  -7.5691],
        [ -3.7050,  14.4267,   2.2079,  -8.3116,  -0.4671]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 4, 0, 1]
target tensor([2, 4, 0, 1])
<class 'torch.Tensor'>
loss
tensor(1.3113e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.0860,  15.7462, -13.9651,  -7.6156,   0.6135],
        [ -6.5158, -15.5780,  13.4904, -11.1587,  -9.7590],
        [ -7.7493, -12.3112,  13.2204, -11.0158,  -0.5572],
        [ -5.8206,  -9.9407,  -3.2969,  10.1621,  -4.1497]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 3]
target tensor([1, 2, 2, 3])
<class 'torch.Tensor'>
loss
tensor(8.6427e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.7948, -22.6894, -12.8239,  21.3882,  -9.0098],
        [-17.4787, -13.6388,  -3.9511,  24.1119,  -5.5269],
        [  4.8920, -16.8356, -14.7129,  -8.4344,  12.7566],
        [ -0.3948, -13.0594,  -8.3083,   7.4107,  -3.9786]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 4, 3]
target tensor([3, 3, 0, 3])
<class 'torch.Tensor'>
loss
tensor(1.9663, grad_fn=<NllLossBackward0>)
Epoch: [32][20/25]	Time 1.700 (1.741)	Data 0.023 (0.021)	Loss 1.9663 (0.4082)	Accuracy 75.000 (91.667)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.1555, -24.6655, -12.7974,  26.7671, -15.3284],
        [  0.7594,   3.1086,   0.4226,  -0.2023,  -7.0124],
        [-12.3349, -10.8567,  -3.7329,  13.5353,  -0.2118],
        [ -0.7023, -20.1864,   4.2798,  -9.4074,  -0.8718]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 3, 2]
target tensor([3, 1, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0487, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-21.0462, -12.7304,  -6.8805, -10.6640,  41.1794],
        [ -1.7831, -15.7354,  -5.8088, -24.0969,  33.3179],
        [ 14.3875,  -9.4352,  -3.3109,  -5.0366,   0.7397],
        [ -6.4557, -16.3573, -15.4192,  11.4400,  -7.1347]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 4, 0, 3]
target tensor([4, 4, 0, 3])
<class 'torch.Tensor'>
loss
tensor(2.9802e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 11.7491, -18.0530,  -7.1839,  -2.3999, -14.1914],
        [-16.1191,  11.0995,  -2.9654, -10.2073,  -3.7525],
        [ -2.0959,  -6.6350,  11.5483,  -1.8758,  -1.2150],
        [-10.5911, -22.3537,  25.0693,  -8.3311,  -6.1448]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 2, 2]
target tensor([0, 1, 2, 2])
<class 'torch.Tensor'>
loss
tensor(1.8477e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 28.3154, -17.3640, -18.6783,  -2.8955, -16.2670],
        [  1.0198,  -5.6908,   5.6819,   2.8558,  -7.4696],
        [ -2.0933,  -8.2536,  -2.1154,  21.0318, -19.7961],
        [ -0.9582, -25.1937,  11.3439,  -4.1097, -13.4871]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 3, 2]
target tensor([0, 2, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0166, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.3215,  -7.1966,   0.3406,  -0.9595,  -4.3337],
        [  1.5157, -13.3531,  -0.3467,  -3.3807, -12.0761],
        [  2.2223,  -9.6488,   1.1983,  -1.1038,  -7.7230],
        [  2.7875, -14.6333,  -0.7434,   0.2032, -11.8317]])
<class 'torch.Tensor'>
[0, 0, 0, 0]
target tensor([2., 1., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.9207)
Test: [0/13]	Time 0.590 (0.590)	Loss 5.9207 (5.9207)	Accuracy 0.000 (0.000)
evaluate
input tensor([[[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.6823,  -8.1242,  -5.1208,  -1.4566,  -5.5657],
        [ -0.9972,  -9.8921,  -6.1218,  -2.2072,  -4.4943],
        [  1.4734, -13.7944,  -1.4245,  -4.9101,  -6.4978],
        [ -0.7115,  -8.9608,  -1.1638,  -2.0495,  -9.3196]])
<class 'torch.Tensor'>
[0, 0, 0, 0]
target tensor([1., 1., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.5418)
evaluate
input tensor([[[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.5978,  -7.4214,   2.6806,  -2.2287,  -6.9187],
        [ -0.6612,  -9.7959,   1.3109,  -1.6046,  -5.6989],
        [  5.6411, -14.8154,  -4.4193,  -6.2800,  -6.0041],
        [  1.4178,  -5.8519,   0.4716,   0.9341,  -8.7928]])
<class 'torch.Tensor'>
[2, 2, 0, 0]
target tensor([2., 0., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.5398)
evaluate
input tensor([[[  0,   0,   2,  ...,   5,  -7,  -4],
         [  1,   0,   0,  ...,   2,  -3,  -1],
         [  1,  -3,  -1,  ...,   3,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  7,  -4,   0,  ...,  -1,   1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,  -3,  -1,  ...,   0,  -4,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[ -1,   2,  -2,  ...,  -2,   4,   1],
         [  0,   0,  -2,  ...,  -4,   5,  -5],
         [  1,  -1,  -1,  ...,   0,   2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-0.0852, -6.0540,  0.2370,  1.9513, -6.4536],
        [ 1.4444, -7.2113, -1.7658, -3.3014, -4.2528],
        [-3.1049, -9.9659, -3.8980, -5.3172, -6.3650],
        [ 0.5571, -7.9168,  0.6792, -2.8421, -5.1880]])
<class 'torch.Tensor'>
[3, 0, 0, 2]
target tensor([0., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.8710)
evaluate
input tensor([[[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.4110,  -8.9528,   0.3204,  -3.6235,  -4.7038],
        [  2.6198,  -9.2477,   1.2408,  -3.1623,  -6.6968],
        [  1.5110,  -3.9060,   1.4952,  -3.4509,  -3.8018],
        [  1.9254, -11.4626,  -4.2229,  -4.4230,  -7.2965]])
<class 'torch.Tensor'>
[0, 0, 0, 0]
target tensor([1., 4., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.4311)
evaluate
input tensor([[[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.2880, -10.0013,  -0.9424,  -3.8684,  -4.6454],
        [  1.6674,  -6.3362,   0.8159,  -0.2603,  -9.2047],
        [ -2.0496, -11.6816,  -4.8881,   0.7608,  -3.7534],
        [ -2.6471, -10.5252,  -2.9341,  -1.4918,  -6.3751]])
<class 'torch.Tensor'>
[0, 0, 3, 3]
target tensor([3., 2., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.6603)
evaluate
input tensor([[[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.5860, -11.1440,   0.1607,   1.5504,  -6.4359],
        [  3.2042, -13.3789,  -1.7727,  -3.1397,  -4.3384],
        [ -0.5249, -10.5444,  -6.5165,  -1.0795, -10.9620],
        [ -1.2561, -11.9159,  -4.4105,  -0.0258,  -2.5955]])
<class 'torch.Tensor'>
[3, 0, 0, 3]
target tensor([4., 0., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.0578)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.6189, -14.4267,  -3.7442,  -1.8163,  -9.3954],
        [ -1.4302,  -2.0751,  -1.7630,  -0.6908,  -3.5124],
        [  1.7432,  -9.4761,  -4.0481,  -3.9979,  -5.6945],
        [ -0.5429,  -9.6113,  -3.1354,  -4.2343,  -6.2123]])
<class 'torch.Tensor'>
[0, 3, 0, 0]
target tensor([2., 2., 0., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.1033)
evaluate
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.3541,  -7.4404,  -4.8380,   0.9604,  -8.6304],
        [  3.0155, -13.2112,  -3.2053,  -2.0927,  -6.3501],
        [  4.9207,  -5.1005,  -2.7829,  -3.7399,  -6.6064],
        [ -0.1805, -10.4840,  -6.9617,  -2.6057,  -8.5843]])
<class 'torch.Tensor'>
[3, 0, 0, 0]
target tensor([0., 3., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.0788)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.3411, -10.5393,   0.1953,  -2.7303,  -7.4707],
        [ -0.1880,  -9.9365,  -1.4480,  -2.6943,  -3.6630],
        [  1.0178,  -5.8065,   1.7790,  -1.0669,  -5.6300],
        [ -1.8516,  -6.9109,  -4.2944,  -3.9836,  -1.4129]])
<class 'torch.Tensor'>
[2, 0, 2, 4]
target tensor([1., 4., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.6263)
evaluate
input tensor([[[  0,   2,  -2,  ...,   0,   1,  -6],
         [  0,   0,   0,  ...,  -9,  -2,   3],
         [  2,   0,  -2,  ...,   2,  -2,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   2,  -2,  ...,  -3,  -1,   0],
         [  2,  -2,  -1,  ...,   2,  -3,   4],
         [  0,  -2,  -5,  ...,   0,   4,   7],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -3,  ...,  -2,   0,  -6],
         [  7,  -4,   0,  ...,   0,   1,   1],
         [ 11,  -5,   2,  ...,  -3,   6,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  2.3377,  -9.3517,  -1.3511,  -1.7971,  -7.3037],
        [  0.8573,  -5.3192,   0.7393,  -0.9352,  -8.0525],
        [  2.2436,  -8.6058,  -3.7201,  -3.2289,  -4.3022],
        [  4.5767, -10.4206,  -0.1431,  -5.4074,  -8.4611]])
<class 'torch.Tensor'>
[0, 0, 0, 0]
target tensor([2., 2., 1., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.8588)
Test: [10/13]	Time 0.515 (0.518)	Loss 3.8588 (3.8809)	Accuracy 25.000 (27.273)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.9060, -15.2306,  -6.8511,  -0.2869,  -8.6746],
        [  0.4437,  -9.7574,  -0.6403,  -0.1226,  -7.1779],
        [ -4.2428,  -5.4811,   1.0493,   1.8026,  -2.4533],
        [  1.0030,  -5.9871,  -1.0990,  -1.1650,  -5.5237]])
<class 'torch.Tensor'>
[0, 0, 3, 0]
target tensor([2., 2., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.5267)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.4313,  -8.9146,   2.5120,   0.7749,  -9.2337],
        [  1.6055, -11.2721,   1.6957,   0.2375,  -5.8054]])
<class 'torch.Tensor'>
[2, 2]
target tensor([2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.3190)
epoch: 33
train
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.1025,   1.7470,  -9.3976, -11.8818,   1.1113],
        [ -2.0185,  11.6007,  -1.0498,  -4.4144,  -4.4830],
        [-14.9854,  19.7990,  -8.0341,  -2.2228, -14.8370],
        [ 19.8753, -16.7071, -14.2692,  -3.6071,  -3.2263]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 1, 0]
target tensor([1, 1, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.1062, grad_fn=<NllLossBackward0>)
Epoch: [33][0/25]	Time 1.810 (1.810)	Data 0.024 (0.024)	Loss 0.1062 (0.1062)	Accuracy 100.000 (100.000)
train
input tensor([[[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.1476,   6.7504, -12.0400,  -9.3823,  -4.0488],
        [  4.1644, -12.1425,   1.0345, -17.7690,  22.6806],
        [ -3.1821,  -9.0827,  -0.3154,  10.0097,  -5.8310],
        [ -1.0439, -11.6056,   5.6091,   1.1842,  -7.9688]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 4, 3, 2]
target tensor([1, 4, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0042, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.6569, -16.9814,   8.5845,  -3.1625, -16.0914],
        [ 27.8903, -18.2252, -15.3982,  -8.7232, -15.8652],
        [ -6.8723,  -7.6659,  14.1944,  -1.0923, -11.1560],
        [ -9.2345, -16.1694,  -3.8770,  27.1487, -22.9330]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 3]
target tensor([2, 0, 2, 3])
<class 'torch.Tensor'>
loss
tensor(2.0862e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.6936,  -7.3361,   9.7487,  -2.6583, -10.8544],
        [ -6.4483, -10.3408,  -3.5177,  17.8937,  -8.6084],
        [ 12.0118, -21.5588, -13.0082, -17.2124,  34.2321],
        [  3.9762,   5.3411,  -5.2249,  -1.9619, -18.3823]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 4, 1]
target tensor([2, 3, 4, 1])
<class 'torch.Tensor'>
loss
tensor(0.0576, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 13.3101, -13.3156,  -3.5382,  -8.6572,  -7.0592],
        [ -1.1804, -23.6735, -14.8858,  31.1106, -18.2317],
        [ 16.6687, -13.0139,  -6.2848,  -0.6541, -11.2986],
        [  9.1541, -15.2008,  -7.1588,  -4.4116, -10.6619]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 0, 0]
target tensor([0, 3, 0, 0])
<class 'torch.Tensor'>
loss
tensor(3.5763e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.3541,  -7.5054,  -2.8006,  11.3567,  -6.7311],
        [  4.1120,  -2.3164,   5.6218,  -3.8955,  -6.9072],
        [  2.5112,  10.8207,  -1.0179,  -1.7677, -11.5643],
        [ -2.5758, -11.2098,   8.0867,  -6.8633,  -6.2010]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 1, 2]
target tensor([3, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0501, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,  -1,  -2,  ...,   3,   3,   0],
         [  2,  -1,  -2,  ...,   2,   4,  -2],
         [  1,  -1,  -1,  ...,  -2,   0,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   4,   0,  ...,   0,   0,   0],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,  -1,  ...,  -3,   2,   3],
         [  2,  -1,  -1,  ...,   0,   1,  -2],
         [  1,   0,   0,  ...,   1,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -4.5224, -10.7098,  18.1334,   4.4188, -14.9068],
        [ 14.6674, -20.6643, -11.5736,  -2.5857, -28.0780],
        [ -3.1994, -18.9837,  26.3649,  -2.8753, -15.1941],
        [ -6.5371, -15.4027,   8.3201,  -6.8348, -13.6675]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 2]
target tensor([2, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(4.1723e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.4448, -12.1608,  22.6219,  -5.6781, -24.6463],
        [ -7.9604, -15.2265, -20.4003,  23.7990, -29.8484],
        [  7.6958,  21.0758,   0.6471, -27.8982,  -7.8080],
        [-14.4030, -16.5139, -10.3294,  26.5996, -31.0985]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 1, 3]
target tensor([2, 3, 1, 3])
<class 'torch.Tensor'>
loss
tensor(3.8743e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.8745,  17.1221,  -7.4090,  -7.0548, -15.6835],
        [  0.8699,   8.6347,   1.0849,   1.2317, -11.1221],
        [ 13.6510,  -5.0386,  -2.9236,  -9.0954, -10.0791],
        [ -2.8980,  15.9658, -10.1177,  -3.9619,  -8.8441]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 0, 1]
target tensor([1, 1, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.0004, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,   1,  -4,  ...,  -4,   2,   1],
         [  2,   3,   1,  ...,  -3,  -4,   0],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  1,  -1,  -1,  ...,  -4,   1,   6],
         [  4,   2,   0,  ...,  -1,  -3,   8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -2,  ...,   0,  -3,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [  4,  -3,   5,  ...,   7,  -2,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -7.2780,   8.4519,   1.3675,  -2.5802, -13.7223],
        [-18.7694, -10.8428,  -1.7983,  28.9562, -19.1627],
        [ -0.1177,  -6.7999,  -1.8781,   6.0929, -10.6496],
        [ -0.5244,  -1.3099,   7.0552,  -0.7309,  -1.8156]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 3, 2]
target tensor([1, 3, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0011, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.2825,  35.3890,  -9.0178,  -4.4205, -37.8942],
        [-12.4658, -14.6104,  -8.6706,  28.7043, -41.4372],
        [ -9.7486, -19.0108,  19.4873,  -4.5684, -13.7576],
        [  7.5545,  -5.1086,  -5.9476,  -1.4143, -10.4037]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 2, 0]
target tensor([1, 3, 2, 0])
<class 'torch.Tensor'>
loss
tensor(3.2959e-05, grad_fn=<NllLossBackward0>)
Epoch: [33][10/25]	Time 1.790 (1.760)	Data 0.027 (0.025)	Loss 0.0000 (0.0200)	Accuracy 100.000 (100.000)
train
input tensor([[[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 19.4090, -30.8415,  -8.4945,  -5.2597,  32.3811],
        [ -6.1034,  14.4571,  -9.5827,  -3.5870, -16.6446],
        [  2.8517,   1.9401,   1.6769,  -3.9961, -16.3605],
        [  4.3129,  18.8357,  -7.6268,  -4.3062, -12.8627]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 0, 1]
target tensor([4, 1, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.3623, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.6165, -10.2846,  -9.9462,  17.5515, -19.4693],
        [  1.1432, -31.8364, -12.7931,  36.8355, -31.3832],
        [ 17.7009, -14.1090, -18.2069,  -9.8111, -38.8299],
        [  0.3299, -10.4302,   6.3177,   5.9464, -14.5960]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 0, 2]
target tensor([3, 3, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.1315, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.6901,   6.7496,  -7.7397,  -4.0866, -17.2886],
        [ -1.3824,  -8.0502, -10.4539,  15.4363, -15.7290],
        [ -2.0496,  -9.8118,  14.6810,  -0.8020, -20.3127],
        [ 20.7615, -12.6085,  -6.8635,  -7.0366, -15.7182]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 2, 0]
target tensor([1, 3, 2, 0])
<class 'torch.Tensor'>
loss
tensor(7.7783e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.9395,  -1.9137,  -7.5961,   9.0713, -21.7448],
        [  5.1623, -13.0883,  -2.9338,  -4.9431, -20.4431],
        [ -3.9203,  -7.2060,  -8.8331,  27.8187, -23.1733],
        [  0.0803, -20.3970, -26.2501,  -2.3025,  16.7718]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 3, 4]
target tensor([3, 0, 3, 4])
<class 'torch.Tensor'>
loss
tensor(9.0674e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.7216,  -1.8425, -19.5111,   2.4261,  13.5192],
        [ 14.8213,  -7.2602,  -2.5870, -14.4420, -11.0622],
        [ -7.6837,  -7.2443,  12.4094,   0.9626, -27.2969],
        [ -9.7565,  -5.7420, -17.1308, -18.2216,  18.2090]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 0, 2, 4]
target tensor([4, 0, 2, 4])
<class 'torch.Tensor'>
loss
tensor(6.5267e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.2327,   3.1582,   0.4646,  -2.1114, -13.7781],
        [ -2.7474,  15.7899,  -5.0215, -14.9896, -13.1943],
        [ -7.8239,  -5.1499,  11.2836,  -3.0086, -15.6833],
        [ 11.2454,  -4.1718,  -3.3727,  -8.0500, -23.1913]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 0]
target tensor([1, 1, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0177, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.0706, -18.7707, -18.8481,  -2.2660,  11.3112],
        [ -4.9120,   0.6117,  11.7092,  -0.1046, -10.3882],
        [ -2.8104,  -7.5450,   8.5774,  -2.3127, -16.3607],
        [ -1.1783,  -8.1088,  23.3061, -16.3662, -27.4450]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 2, 2]
target tensor([4, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(1.3530e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,  -1,   0,  ...,   0,  -6,  -4],
         [  5,  -1,   0,  ...,   7,   3,   0],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  1,   0,  -1,  ...,   4,   4,   1],
         [  2,   0,  -1,  ...,  -1,   2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,  -1,  ...,  -1,  -1,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [ -1,   1,   0,  ...,   2,  -3,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ 13.0042,  -5.2491, -10.0550, -12.1939, -14.7768],
        [  8.2666,  -5.4802,   4.1333,  -4.9245, -12.5016],
        [ -0.6800, -18.9279,  11.2396,   3.1111, -21.8171],
        [ 11.4919,   0.3162, -11.5855,   0.3778, -35.5308]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 2, 0]
target tensor([0, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0041, grad_fn=<NllLossBackward0>)
train
input tensor([[[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 4.9900e+00, -1.4107e+00,  1.3029e-02, -2.4451e+00, -7.2615e+00],
        [-3.7937e+00, -6.5087e+00,  1.9345e+01, -1.4546e+00, -2.2633e+01],
        [-6.2264e+00, -1.6580e+01,  9.8409e+00,  2.0780e+00, -2.5943e+01],
        [-7.9875e+00,  2.3025e+01, -8.6254e+00, -4.0159e+00, -2.2000e+01]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 1]
target tensor([0, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0024, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.4513,  -2.3829,   6.1534,   3.0620, -24.9615],
        [ -7.5889,  -2.0152,  15.7860,  -2.7131, -14.4540],
        [ -1.8825,  -5.2042,  11.3668,  -2.8487, -18.8373],
        [ -2.7723,   5.6123,  13.2943,  -2.6188, -10.8373]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0113, grad_fn=<NllLossBackward0>)
Epoch: [33][20/25]	Time 1.741 (1.904)	Data 0.053 (0.032)	Loss 0.0113 (0.0357)	Accuracy 100.000 (98.810)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.0696,  -2.4820,  11.3543,  -3.1639, -21.4755],
        [-20.4283,   5.4052,  27.9218,  -3.1152, -11.2192],
        [ -9.6511,  29.1059,  -5.5795,  -6.7835, -35.8362],
        [ 24.3545, -13.3447, -19.7848, -24.3089, -40.2559]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 0]
target tensor([2, 2, 1, 0])
<class 'torch.Tensor'>
loss
tensor(5.0664e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 7.7800e+00, -7.9443e+00, -8.2308e+00, -1.1719e-02, -1.1867e+01],
        [-1.0252e+00, -4.0050e+00,  7.5934e+00, -4.3637e+00, -1.7356e+01],
        [-1.7863e+00,  1.0073e+01, -2.8491e-01, -2.3185e+00, -5.2798e+00],
        [ 1.4344e+00,  1.6098e+00,  5.7588e+00, -9.9000e+00, -2.7317e+01]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 1, 2]
target tensor([0, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0073, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.5145, -34.6021, -16.2680, -17.3375,  27.8057],
        [  3.3663,  -7.9164, -11.3818,  18.4404, -25.7899],
        [ -7.2078,  -2.4944,  12.5672,  -4.7398, -20.3600],
        [ -5.5349,  -8.8636,   9.0328,   0.4133, -16.8446]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 3, 2, 2]
target tensor([4, 3, 2, 2])
<class 'torch.Tensor'>
loss
tensor(4.5385e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 15.8166,   4.5508,  -2.9140,  -6.0643, -27.3674],
        [  2.0667,  26.5739,  -9.6816, -10.9033, -28.7876],
        [-16.5457,   0.6887,  -6.2764,  32.9579, -26.6348],
        [ -5.8825, -12.2187,   3.3757, -10.7244, -20.1349]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 3, 2]
target tensor([0, 1, 3, 2])
<class 'torch.Tensor'>
loss
tensor(2.7238e-05, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   3,   1,  -6],
         [  1,  -1,  -1,  ...,  -2,   0,   1],
         [  1,  -1,  -1,  ...,  -1,  -3,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   3,  -2,  ...,   1,   3,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -3,  ...,  -2,   0,  -6],
         [  7,  -4,   0,  ...,   0,   1,   1],
         [ 11,  -5,   2,  ...,  -3,   6,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -1.1918,   1.4032,  -2.5401,  -4.1747, -16.1867],
        [ -2.5950,   1.7848,  -2.9505,  -3.9019, -17.2834],
        [ -4.0990,   3.3017,   4.5711,  -2.2829, -17.6035],
        [  0.6834,  -1.1691,   1.1804,  -6.0215, -17.6143]])
<class 'torch.Tensor'>
[1, 1, 2, 2]
target tensor([1., 0., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.4441)
Test: [0/13]	Time 0.495 (0.495)	Loss 1.4441 (1.4441)	Accuracy 50.000 (50.000)
evaluate
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.1261,   1.9632,   0.2032,  -1.8888, -12.8898],
        [ -1.5433,  -0.1265,  -0.4447,  -1.3471, -15.9868],
        [ -1.3163,  -1.1197,  -1.3568,  -1.5015, -19.1459],
        [ -2.5095,  -0.4992,   4.4068,   0.2211, -16.7296]])
<class 'torch.Tensor'>
[1, 1, 1, 2]
target tensor([1., 2., 3., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.7772)
evaluate
input tensor([[[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.9373,   2.9889,   1.6378,   1.0971, -15.7635],
        [ -3.0872,   0.2516,  -0.2912,  -1.1397, -17.1579],
        [ -7.0312,   1.5449,   1.1335,  -2.7258, -20.6568],
        [ -5.2997,   5.6502,  -4.4840,   1.5842, -27.2988]])
<class 'torch.Tensor'>
[1, 1, 1, 1]
target tensor([0., 4., 1., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(8.9471)
evaluate
input tensor([[[  5,  -2,  -2,  ...,   0,   0,  -3],
         [  1,  -2,  -1,  ...,   2,  -4,  -5],
         [  2,   0,  -2,  ...,  -3,   4,  -5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,   0,  ...,   0,  -6,  -4],
         [  5,  -1,   0,  ...,   7,   3,   0],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  6,  -2,   0,  ...,   1,   0,   2],
         [  1,  -1,   0,  ...,   0,  -6,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -1.6520,  -0.5710,   0.3072,  -2.5266, -17.5682],
        [ -5.7651,   2.4089,  -1.9411,  -5.2409, -25.2422],
        [ -1.0435,  -1.7475,   0.5180,  -4.9408, -20.5689],
        [ -4.0852,   2.7487,  -4.8657,  -0.9189, -22.7402]])
<class 'torch.Tensor'>
[2, 1, 2, 1]
target tensor([0., 2., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.1666)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.2503,  -0.6530,   1.4349,  -0.0550, -27.3364],
        [ -3.8294,   2.7557,   2.5036,  -2.8656, -15.7367],
        [ -4.3673,   4.4254,  -3.2971,  -0.9948, -21.3470],
        [ -3.1556,  -1.5461,  -4.2939,  -0.2570, -25.6525]])
<class 'torch.Tensor'>
[2, 1, 1, 3]
target tensor([2., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.3799)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.7210,   2.3101,   2.5078,  -1.7513, -18.4389],
        [ -2.8505,  -1.0714,   1.9649,  -0.5115, -15.8209],
        [ -1.6221,   1.3613,   3.0759,  -2.2916, -18.7328],
        [ -2.7701,   3.4853,   3.1546,  -2.5679, -13.4483]])
<class 'torch.Tensor'>
[2, 2, 2, 1]
target tensor([0., 2., 4., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.9569)
evaluate
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.7833,   2.1468,  -5.4004,  -1.3338, -25.7869],
        [ -5.0356,  -0.5697,  -2.4467,  -1.5642, -28.0136],
        [ -0.7586,  -0.4283,   0.9867,  -3.4298, -16.1555],
        [ -4.1373,   4.8875,   0.0524,  -1.0626, -10.9459]])
<class 'torch.Tensor'>
[1, 1, 2, 1]
target tensor([2., 2., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.8759)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.2952,   4.1598,  -1.3767,  -3.4179, -15.8815],
        [ -1.0907,   0.7421,   2.2078,  -4.1413, -14.5840],
        [ -2.1970,   2.1134,   2.4854,  -0.3476, -17.1044],
        [ -4.7773,   4.3241,  -1.9654,  -4.3677, -15.2473]])
<class 'torch.Tensor'>
[1, 2, 2, 1]
target tensor([0., 1., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.1124)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.0131,   2.2613,  -4.9448,  -2.3886, -27.2912],
        [ -0.3619,   0.4968,   1.6358,  -3.8684,  -8.8931],
        [ -2.3988,   1.6299,   4.2537,   0.3111, -20.8309],
        [ -1.2968,   0.7650,   1.8151,   0.5367, -15.2446]])
<class 'torch.Tensor'>
[1, 2, 2, 2]
target tensor([2., 0., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.8120)
evaluate
input tensor([[[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.1167,   4.2748,   3.0130,  -1.2606, -17.9404],
        [ -2.7860,  -1.8492,   1.4551,  -3.0537, -26.4761],
        [ -2.0935,   3.2345,   0.3011,  -3.6879, -14.6760],
        [ -5.1681,   2.9272,   1.1279,  -2.0891, -24.9585]])
<class 'torch.Tensor'>
[1, 2, 1, 1]
target tensor([2., 1., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.4573)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.2270,   1.9756,   1.9558,  -0.4368, -14.1379],
        [ -6.7859,   1.7966,   1.2870,   2.3494, -20.4717],
        [ -8.3471,   3.9244,   3.3833,   2.2049, -13.2496],
        [  1.2869,  -2.3496,  -3.1480,  -7.0025, -18.4436]])
<class 'torch.Tensor'>
[1, 3, 1, 0]
target tensor([2., 4., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.3434)
Test: [10/13]	Time 0.536 (0.521)	Loss 6.3434 (3.9339)	Accuracy 25.000 (25.000)
evaluate
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.2941,  -0.5308,  -2.6978,   1.2019, -16.6788],
        [ -6.0654,   0.8994,  -1.1540,  -0.7726, -21.4574],
        [ -1.3873,   1.0587,   2.4782,  -1.3915, -19.8705],
        [ -3.6956,   1.2916,  -2.5337,   1.3489, -20.7188]])
<class 'torch.Tensor'>
[3, 1, 2, 3]
target tensor([2., 3., 3., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.9677)
evaluate
input tensor([[[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.0217,   3.2201,  -1.3635,  -3.1585, -23.9715],
        [ -3.1818,   1.1715,  -2.0054,  -2.7877, -24.1209]])
<class 'torch.Tensor'>
[1, 1]
target tensor([3., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.4078)
epoch: 34
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.6212,  20.4016,   3.1633, -16.5670, -12.9786],
        [-20.2655,  -0.3300,  22.2789,  -9.6115, -13.6305],
        [-13.7717,  21.3035,  -0.4673,  -7.0743, -29.3088],
        [ -3.4376,  -7.0807,  -1.8023,   5.3594, -13.8876]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 1, 3]
target tensor([1, 2, 1, 3])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
Epoch: [34][0/25]	Time 1.915 (1.915)	Data 0.024 (0.024)	Loss 0.0002 (0.0002)	Accuracy 100.000 (100.000)
train
input tensor([[[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.2601,   2.5815,   9.2315,  -4.9634, -15.0230],
        [-13.9674,   7.4507, -17.5712, -13.5826,  29.6552],
        [-10.2504,  -7.4359,  12.8155,  -5.5294, -27.7918],
        [ 14.5694,  -3.9553,   1.3810,  -3.9649, -13.7604]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 4, 2, 0]
target tensor([2, 4, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 17.2729,  -7.4560, -12.3639,  -1.5307, -24.7019],
        [ -8.4293,  -7.4638,  29.5875, -15.1411, -25.8797],
        [ -2.1273,  -0.6763,   8.0646,  -2.9347, -19.1105],
        [ -6.8870,  29.3694, -11.5162,  -1.9945, -21.3852]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 1]
target tensor([0, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(5.3519e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.2292e+00, -8.2021e+00, -1.4095e+01,  2.1441e+01, -2.2907e+01],
        [-5.1912e+00,  7.0866e-02, -4.3138e+00,  1.1064e+01, -2.6917e+01],
        [-1.2426e+00,  8.4402e+00,  1.4243e+01,  1.9811e-02, -2.0792e+01],
        [-6.0237e+00, -5.4406e+00, -9.5600e+00,  1.5187e+01, -2.7940e+01]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 2, 3]
target tensor([3, 3, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0008, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.4994,   1.0893,   4.7226,   1.3001, -14.6087],
        [ 42.6220,  -9.1277, -29.2751, -12.4131, -41.3087],
        [-10.2858,  14.7072,  14.2208, -10.3006, -14.7582],
        [  6.6105,  -6.3074,   0.4767,  -2.6382, -42.4287]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 1, 0]
target tensor([2, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.2563, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.5902,  -0.8515,   8.8458,  -6.8339, -19.6712],
        [-10.2377,   7.5778,  21.2530, -10.5062, -27.4794],
        [-11.1142,  -8.6921, -14.9595,  34.5209, -33.6019],
        [ 18.2785,  -2.1424,  -3.6287, -11.1936, -24.0690]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 3, 0]
target tensor([2, 2, 3, 0])
<class 'torch.Tensor'>
loss
tensor(1.5705e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  7.4470,  -9.6826,  -4.7026,  -7.2012, -13.3863],
        [ -8.5349,  -3.8953,  13.5348,  -4.6134, -18.2278],
        [ -3.9358,  17.5561,  -5.0109,  -6.5096, -18.0679],
        [-14.1992,   0.0609,  -8.6142, -13.2628,  -3.0252]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 1, 1]
target tensor([0, 2, 1, 4])
<class 'torch.Tensor'>
loss
tensor(0.7827, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.6024,  -1.3083,  10.8468,  -2.4101, -17.6273],
        [-30.6704,  -6.3618, -14.8731,  26.9198, -26.9681],
        [ -6.4182, -11.3495,  13.1737,  -1.5842, -11.7657],
        [ -3.9568,  -2.9953,   1.9627,   6.9585, -13.4027]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 2, 3]
target tensor([2, 3, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0017, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  2,   0,  -3,  ...,   0,   3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   0,   0,  ...,   2,   0,  -8],
         [  0,   2,  -2,  ...,  -3,   4,  -2],
         [  2,  -2,  -1,  ...,   2,  -3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   0,   2],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -6.1609, -15.8052,  17.0717, -13.2077, -20.8662],
        [  1.8071, -10.3478,  17.9827,  -2.3552,  -9.7764],
        [ -8.0093, -14.3411, -11.5363,  -9.2265,   8.0365],
        [ -9.9468,  -0.9946,  21.3692, -13.4759, -13.9721]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 4, 2]
target tensor([2, 2, 4, 2])
<class 'torch.Tensor'>
loss
tensor(5.9605e-08, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.1840,  -0.7555,  15.4938,   1.6070,  -6.5739],
        [ -7.9985,  -0.9024,   8.8065,  -0.3688, -13.0871],
        [ -4.5660,   9.2713,  -1.2262,  -7.8800, -14.7167],
        [ -7.7573, -17.8832,  28.6224, -13.9854, -19.0959]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 2]
target tensor([2, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(4.8515e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,   1,   0,  ...,   0,   6,  -2],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         [  0,   0,   2,  ...,   4,   1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -2,  ...,   0,  -3,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [ 13,  -6,   0,  ...,  -1,  -3,   9],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   0,   0,  ...,  -4,   3,  -1],
         [  0,   1,   1,  ...,   6,   1,  -1],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -1.3720,  -3.8834,  14.6355,   1.0146, -21.8116],
        [  4.7665,  -1.7613,   0.1589,  -2.3090, -13.1827],
        [ -9.5721,  -1.1304,  -3.3148,  -2.9567,   8.0167],
        [-16.5593, -11.4796,  17.0941, -14.3923,  -9.6429]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 4, 2]
target tensor([2, 0, 4, 2])
<class 'torch.Tensor'>
loss
tensor(0.0031, grad_fn=<NllLossBackward0>)
Epoch: [34][10/25]	Time 1.670 (1.744)	Data 0.027 (0.025)	Loss 0.0031 (0.0950)	Accuracy 100.000 (95.455)
train
input tensor([[[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 27.8422, -14.9795, -10.7014,  -6.6900, -28.5201],
        [-15.5530,  -2.9464, -11.5164,  24.9399,  -8.6205],
        [ 12.3045,  -7.8795,  -3.3585, -18.0443,  -5.7112],
        [-11.0062,  21.4788,  -4.8418,  -6.1288, -13.5104]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 0, 1]
target tensor([0, 3, 0, 1])
<class 'torch.Tensor'>
loss
tensor(2.9802e-08, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-15.2143,  14.4471,   1.0635,  -7.5244,  -2.6544],
        [ -1.5619,  30.8379,   4.9557, -34.8101,  -6.2545],
        [ -7.2233, -36.6808,  -3.6647, -10.0544,  31.3434],
        [  8.7923,  -9.8606,   2.4101,  -1.0766,  -9.3772]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 4, 0]
target tensor([1, 1, 4, 0])
<class 'torch.Tensor'>
loss
tensor(0.0004, grad_fn=<NllLossBackward0>)
train
input tensor([[[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  5.5225,  -2.5165,   0.3107,  -3.7414,  -5.6172],
        [-14.7732,  -9.7919,   2.9340,  12.9887, -20.2485],
        [ -4.0778, -11.1997,  12.5139,  -3.7892,  -8.6681],
        [ 20.3102,  -1.8506,  -6.5840,  -5.5279, -19.4395]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 2, 0]
target tensor([0, 3, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0015, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  7.3727,  -7.0367,  -0.3315,  -4.0182,  -6.7675],
        [-10.2039,  -8.6384,  -5.1009,  13.2958,  -7.6496],
        [ -7.8387, -19.8086,  29.4697, -21.2140,  -7.5338],
        [ -6.3129,   7.3581,   0.4547,  -1.3786,  -0.4251]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 2, 1]
target tensor([0, 3, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0005, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.6550,  -9.0556,   0.9564,  16.9103, -16.4430],
        [ -0.1780, -15.9353,   5.6573, -21.7052,  16.1011],
        [ 17.1637,  -5.9469,  -4.2284, -11.2458, -19.3137],
        [ 12.0082, -20.4557,   4.6080, -17.6196,  -7.0707]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 4, 0, 0]
target tensor([3, 4, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.4578, -10.5110,  19.4070,  -5.0599, -15.3961],
        [-11.1990, -12.0657,   2.5897,  20.0734, -18.6533],
        [-14.1338,   7.0850,   8.5531,  -4.3530, -28.9042],
        [ -4.3170, -14.4062, -15.5284,  -4.0068,  22.2169]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 2, 4]
target tensor([2, 3, 1, 4])
<class 'torch.Tensor'>
loss
tensor(0.4189, grad_fn=<NllLossBackward0>)
train
input tensor([[[  3,   0,   0,  ...,   1,  -3,   0],
         [  1,  -1,  -1,  ...,  -1,  -3,   3],
         [  0,   1,   0,  ...,  -1,   8,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   1,   0,  ...,   0,  -1,   0],
         [  1,   0,   0,  ...,   2,   1,   3],
         [  3,   0,   1,  ...,   2,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,  -1,  ...,  -1,  -3,   3],
         [  3,  -1,  -2,  ...,   0,   3,   4],
         [  1,   1,   0,  ...,   0,   6,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -9.1170, -11.9137,  18.0589, -13.3069,  -6.0343],
        [ -2.0108,  -5.1203,  12.3611,  -2.2375,  -1.0088],
        [ -9.0303, -17.6157,  12.9876,  -5.0069,  -9.4446],
        [-16.5241, -15.0107,  -6.1536,  20.0695,  -7.1243]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 3]
target tensor([2, 2, 2, 3])
<class 'torch.Tensor'>
loss
tensor(6.5565e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.6890, -11.9999,  14.3223,   0.6875, -16.5123],
        [ -2.5727,   6.6502,   2.1161,  -2.3334,  -4.2688],
        [ -6.6985,   8.2548,  -5.2132, -15.9627,  -2.2174],
        [  8.3934, -29.7763,  -3.8592,  -3.5033,  46.1316]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 1, 4]
target tensor([2, 1, 1, 4])
<class 'torch.Tensor'>
loss
tensor(0.0027, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.8843,  -6.6107,   8.5192,  -5.6238,  -6.1742],
        [  7.4593,  -9.2230,   0.3822,  -7.4078,  -6.7846],
        [ -8.7070,  19.2631,  -7.2347, -12.8927,  -0.4220],
        [ -9.8352, -12.6336,  13.6567,  -5.9278, -11.9272]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 1, 2]
target tensor([2, 0, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.7156, -24.8671,   4.8319,  41.0656, -26.2104],
        [-25.6351, -14.4285,  -4.0583,  34.9481, -19.9252],
        [-13.7273,  28.1084,  -5.9186, -12.1584, -33.2126],
        [ -5.6206,   4.0383,   3.8405,  -2.9938,  -1.1109]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 1, 1]
target tensor([3, 3, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.1507, grad_fn=<NllLossBackward0>)
Epoch: [34][20/25]	Time 1.789 (1.733)	Data 0.012 (0.025)	Loss 0.1507 (0.0772)	Accuracy 100.000 (96.429)
train
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.9224,  11.0890,  -5.0322, -16.7169,  -1.6264],
        [ -9.4539, -18.1149,   8.7616,   2.0165,  -4.9153],
        [ -4.1479,  -6.3150,   9.7764,  -3.7149,  -4.3515],
        [ -8.9920,  15.4547,  -6.1422,   2.1823, -11.2476]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 1]
target tensor([1, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.3609,  17.7218,  -1.5706,  -3.5787,  -5.3767],
        [-12.0883,  -1.9817,  -1.3951,   8.9162,  -5.0715],
        [ 12.2052,  -6.0955, -10.8475, -10.9682,  -6.1836],
        [-21.4044,  21.6929,  -4.9303,  -3.9204, -12.8476]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 0, 1]
target tensor([1, 3, 0, 1])
<class 'torch.Tensor'>
loss
tensor(1.3142e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-14.1312,  19.3728,  -0.7205,  -1.9826,  -0.5582],
        [-14.5586,  -9.8216, -12.4528,  11.4768, -13.2884],
        [ -8.4500,  15.7039,  -9.9610,  -9.3928,  -5.0727],
        [ 14.9773, -15.3450,  -6.2234, -13.3902,  -3.4399]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 1, 0]
target tensor([1, 3, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 11.6272,  -6.8814,  -5.2350,  -2.2493,  -8.2325],
        [ -5.2087, -22.2068,  29.0970, -10.4042,  -7.1446],
        [ 10.9421,  -8.2563,  -3.1869,  -4.0490, -13.2249],
        [ -8.0503,  18.0964,  -9.6782,  -7.9402,  -6.7673]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 0, 1]
target tensor([0, 2, 0, 1])
<class 'torch.Tensor'>
loss
tensor(5.0664e-07, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.0990,  -0.6165,  -0.0234,  -5.1659,  -2.8079],
        [ -6.2574,  -0.2453, -13.8929,  -3.7921,  -8.3838],
        [ -5.3560,   0.3075,  -5.3899,  -4.7389,  -6.8979],
        [ -1.4049,  -4.6379,  -6.6899,  -2.2096, -10.6413]])
<class 'torch.Tensor'>
[0, 1, 1, 0]
target tensor([0., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.4911)
Test: [0/13]	Time 0.464 (0.464)	Loss 6.4911 (6.4911)	Accuracy 25.000 (25.000)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.2872, -1.7459, -3.1930, -3.9380, -7.0488],
        [-3.8674, -2.0960, -6.8799, -6.0092, -3.3930],
        [-7.1644, -3.2467, -4.8106,  0.2965, -1.8816],
        [-3.4396,  2.3593, -0.3653, -4.2085, -3.2309]])
<class 'torch.Tensor'>
[1, 1, 3, 1]
target tensor([3., 0., 4., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.4778)
evaluate
input tensor([[[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.6752, -0.3839, -1.5278, -4.2607, -3.5069],
        [-0.0738, -3.7949, -2.8989, -8.2959, -6.0603],
        [-1.8217, -4.2302, -4.9967, -7.0261, -4.5263],
        [-5.2975, -3.3645, -7.2122, -5.3030, -4.6426]])
<class 'torch.Tensor'>
[1, 0, 0, 1]
target tensor([2., 0., 0., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.0370)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.0952,  -7.4452,  -9.7287,  -5.0990,  -7.4985],
        [ -2.6785,  -5.1782,   0.7475,  -1.8283,  -3.2957],
        [ -1.3280,  -2.2107,  -2.6807,  -4.4400,  -5.0617],
        [ -6.0461,  -0.3383, -12.0828,  -1.0302,  -5.5376]])
<class 'torch.Tensor'>
[3, 2, 0, 1]
target tensor([2., 3., 4., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.5456)
evaluate
input tensor([[[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.7129,  -4.5165,  -4.6216,  -5.3260,  -1.8064],
        [ -4.1819,   1.1895,  -3.6585,  -5.3628,  -3.5321],
        [ -5.0226,  -5.3328, -10.0684,  -1.6314,  -1.1653],
        [ -1.6107,  -1.9148,  -2.1741,  -6.0819,  -1.9295]])
<class 'torch.Tensor'>
[0, 1, 4, 0]
target tensor([3., 2., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.7468)
evaluate
input tensor([[[  2,   0,  -1,  ...,   1,   1,   3],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,   0,   0,  ...,   0,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   2,  -2,  ...,   0,   1,  -6],
         [  0,   0,   0,  ...,  -9,  -2,   3],
         [  2,   0,  -2,  ...,   2,  -2,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   4,   0,  ...,   0,   0,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-4.9461, -1.8246, -7.7400, -4.1262, -2.4077],
        [-1.9091, -1.4973, -4.6553, -2.9097, -5.8228],
        [-5.6998,  0.0105, -7.6715, -6.2569, -0.3577],
        [-6.1682, -4.1050, -8.1784, -6.9728, -3.9370]])
<class 'torch.Tensor'>
[1, 1, 1, 4]
target tensor([1., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.3797)
evaluate
input tensor([[[  1,   0,  -2,  ...,   2,  -4,   0],
         [  2,  -2,  -2,  ...,   6,   1,  -6],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  1,   0,  -1,  ...,   4,   4,   1],
         [  1,   2,  -2,  ...,  -4,   3,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,   0,  ...,  -1,  -2,  -1],
         [  0,   2,  -2,  ...,  -3,   4,  -2],
         [  2,  -1,  -1,  ...,   0,   1,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -6.6626,  -3.3168,  -9.3241,  -1.1182,  -0.4763],
        [ -1.7771,  -1.2618,  -7.4582,  -5.8006,  -4.1723],
        [ -3.0093,  -1.7498,  -0.7852,  -1.4228,  -7.5664],
        [ -4.3650,  -6.3435, -12.3852,  -2.9631,  -5.3995]])
<class 'torch.Tensor'>
[4, 1, 2, 3]
target tensor([2., 1., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.0642)
evaluate
input tensor([[[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.8276,  0.7956, -1.9662,  0.0827, -4.2481],
        [-4.5925,  2.3106, -1.7563, -1.8635, -3.7449],
        [-0.2410,  2.3678, -5.1478, -5.5287, -5.5635],
        [-2.5540, -1.5330, -1.8501, -2.6502, -2.7777]])
<class 'torch.Tensor'>
[1, 1, 1, 1]
target tensor([0., 2., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.2922)
evaluate
input tensor([[[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.2381,  -2.9136,  -1.7432,  -2.1720,  -5.0142],
        [ -5.1466,  -2.6676, -10.4185,  -5.1258,  -5.7875],
        [ -2.0335,  -3.4544,  -6.5474,  -3.8600,  -4.8247],
        [ -3.5685,  -4.7972,  -4.2294,  -4.3553, -10.5636]])
<class 'torch.Tensor'>
[2, 1, 0, 0]
target tensor([2., 0., 3., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.9334)
evaluate
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-8.1556, -1.3589, -0.0973,  0.6208, -0.7071],
        [-2.5652,  0.7446,  0.0180, -3.6458, -6.4292],
        [-7.2059, -1.6235, -2.8894, -3.2596, -3.8624],
        [-2.3772, -0.3125, -1.4957, -0.2824, -7.1176]])
<class 'torch.Tensor'>
[3, 1, 1, 3]
target tensor([2., 2., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.3639)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.8147,  -4.0296, -11.2355,  -3.1888,  -2.4040],
        [ -4.7274,  -3.2864, -12.3492,  -4.9259,  -6.4736],
        [ -7.2570,  -1.5845,  -4.7044,  -4.8634,  -3.7136],
        [ -2.3357,  -1.1245,  -0.7115,  -1.7086,  -7.1621]])
<class 'torch.Tensor'>
[4, 1, 1, 2]
target tensor([1., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.1545)
Test: [10/13]	Time 0.577 (0.505)	Loss 3.1545 (3.4988)	Accuracy 50.000 (20.455)
evaluate
input tensor([[[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.6612, -3.3838, -5.9773, -5.3873, -2.0542],
        [-6.5745, -3.8483, -8.4050, -3.7553, -3.5952],
        [-3.2562, -0.2349, -1.9288, -3.2617, -3.5294],
        [-4.1144, -3.5406, -5.5564, -2.1631, -1.9443]])
<class 'torch.Tensor'>
[0, 4, 1, 4]
target tensor([0., 3., 1., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.7066)
evaluate
input tensor([[[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.1189, -0.7749,  0.1282, -4.7741, -4.2159],
        [-0.4731, -5.2162, -9.6408, -9.0518, -4.1653]])
<class 'torch.Tensor'>
[2, 0]
target tensor([2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.1959)
epoch: 35
train
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.8840, -18.2460, -15.4971,  10.0541, -12.4130],
        [-13.9663,  -3.6474,   6.0524,  -9.2294,  -3.0157],
        [-15.5100,  24.3620,  -3.2424, -16.7516,  -2.8107],
        [ -7.3935,  -8.5148,   7.2138,  -0.7669,  -7.4276]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 1, 2]
target tensor([3, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0001, grad_fn=<NllLossBackward0>)
Epoch: [35][0/25]	Time 1.660 (1.660)	Data 0.009 (0.009)	Loss 0.0001 (0.0001)	Accuracy 100.000 (100.000)
train
input tensor([[[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  8.1580,  -6.1793, -14.1189,   0.2503,  -2.1515],
        [-14.8619,  18.1918, -10.4141,  -3.1159,  -5.5055],
        [  8.8469,  -6.3784,  -6.2463,  -6.2826,  -9.8707],
        [ -4.7779,  14.9369,  -3.8847,  -7.9376,  -2.3117]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 0, 1]
target tensor([0, 1, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.0001, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.0732, -11.7494,  -6.5859,  25.4797,   1.8796],
        [  0.7514,  -3.6741,  -5.0290,   3.6356, -10.0081],
        [  9.7234,  -0.5869,  -7.5582, -15.0025,  -4.8724],
        [ -2.4291,  -1.5744,   7.6736,  -5.3680,  -3.9230]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 0, 2]
target tensor([3, 3, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0138, grad_fn=<NllLossBackward0>)
train
input tensor([[[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  4,  -2,   0,  ...,  -4,   2,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,  -1,  ...,  -3,   2,   3],
         [  2,  -1,  -1,  ...,   0,   1,  -2],
         [  1,   0,   0,  ...,   1,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   0,   0,  ...,   2,   0,  -8],
         [  0,   2,  -2,  ...,  -3,   4,  -2],
         [  2,  -2,  -1,  ...,   2,  -3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -4.0010,  -7.4989,   8.0025,  -5.8704,  -3.6999],
        [ -5.6399, -12.0659,  20.5097,  -3.0481, -11.1316],
        [-13.4982, -12.9396,  -0.7256, -12.3072,  -8.0000],
        [-14.6943,  -0.6172, -16.9623,  -4.6111,  27.5350]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 4]
target tensor([2, 2, 2, 4])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.2500,  -8.4537,  15.5212, -15.8553,  -6.4296],
        [ -4.0945,   1.6170,   2.5569,  -7.0182,  -0.0428],
        [ -3.2264,  -4.0010,  15.7872,  -9.6838,  -2.9665],
        [ -5.6969,  -1.8187,   3.7804,  -7.0359,  -4.2379]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0967, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.3987, -10.9791,  14.6487, -19.1733,  -4.4421],
        [-14.2151,  41.1332, -14.9861, -13.1587, -20.5875],
        [ 23.3329, -10.9048, -22.0670, -16.3093, -11.2973],
        [ -7.7692,   0.4253,  22.6700,  -5.4942,  -4.4335]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 0, 2]
target tensor([2, 1, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 10.9820,  -0.0631, -11.5522,  -5.8524,  -6.3541],
        [ -2.0328,  -4.7956,  -2.7646,  -0.8121, -11.2153],
        [-10.8793,  -9.1705,  14.9206, -11.8464, -10.7624],
        [ -1.3922,  19.8377, -12.2289,  -5.1714,   0.9895]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 2, 1]
target tensor([0, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.5820, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  8.3313,  -2.4610, -11.0438,  -8.7912,  -1.4606],
        [ -9.2367,  24.2707, -13.0514, -11.8548,  -0.8998],
        [ 30.8159, -13.5758, -40.1471, -17.3824, -33.1476],
        [-12.4511,   1.1270, -15.5469,  17.7512,  -5.5817]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 0, 3]
target tensor([0, 1, 0, 3])
<class 'torch.Tensor'>
loss
tensor(1.9132e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.6715,  -4.3005,  17.7760,  -3.3584,  -9.5242],
        [-30.8540,   3.4843, -20.0046,  18.6510, -17.7788],
        [ -1.1912,  26.1837,  -9.2944, -12.6538,  -3.6527],
        [ -8.7861,  10.9707, -19.9250,  -4.7291,  -5.5055]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 1, 1]
target tensor([2, 3, 1, 1])
<class 'torch.Tensor'>
loss
tensor(1.1921e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-15.6358,  -1.5818,   0.6365,   5.6539,   2.0339],
        [ -7.8902,  -1.7229,   2.3633, -14.1010,  -1.6226],
        [ -0.0647,  -7.4332, -30.4408,  10.4761,  -6.1716],
        [  7.5623,  -7.2515,  -4.3372, -10.6563,  -6.7674]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 3, 0]
target tensor([3, 2, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0171, grad_fn=<NllLossBackward0>)
train
input tensor([[[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.0456,  -0.1453,  -1.6595,  -5.7118,  -2.5811],
        [ -4.6201,   4.7323,  10.5611,  -3.8391,  -8.0006],
        [ -7.9869,  -2.1355,   9.6760,  -9.4346,  -9.3675],
        [ -6.8970,  -5.4625,  -7.1264, -25.9829,  23.5573]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 4]
target tensor([0, 2, 2, 4])
<class 'torch.Tensor'>
loss
tensor(0.0139, grad_fn=<NllLossBackward0>)
Epoch: [35][10/25]	Time 1.646 (1.706)	Data 0.023 (0.019)	Loss 0.0139 (0.0658)	Accuracy 100.000 (97.727)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  5.5482,  -1.4688,  -3.5341,  -1.5233,  -5.8308],
        [-11.3030,  27.0748, -17.6098, -13.0538,  -4.7814],
        [-10.0736,  11.4825,  -2.6083,  -4.8184,  -4.9758],
        [ -7.0256,  -5.8714,   6.5947, -11.1557,   0.2605]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 1, 2]
target tensor([0, 1, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0009, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.0780e+00,  1.2000e+01, -3.4701e+00, -4.3607e+00,  1.6584e+00],
        [-1.7108e+01, -8.7716e+00, -7.2075e+00, -4.7415e-03,  1.5140e+00],
        [-1.4268e+01, -5.1472e+00, -1.7646e+01,  1.7139e+01, -6.5931e+00],
        [-2.1167e+01, -1.1419e+01, -3.4235e+01, -2.3404e+01,  4.6902e+01]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 4, 3, 4]
target tensor([1, 3, 3, 4])
<class 'torch.Tensor'>
loss
tensor(0.4292, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.1203,  -4.3324,  -0.2569,   8.4355, -11.6787],
        [-10.1865,  56.5910, -37.6028, -21.6180,  -8.2943],
        [ -9.6043,   4.3741,  16.7064,  -9.5268,  -4.5070],
        [ -6.3174,  -4.5817,  13.7158,  -8.3227,  -6.1130]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 2, 2]
target tensor([3, 1, 2, 2])
<class 'torch.Tensor'>
loss
tensor(4.3806e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 12.5861,  -0.0805,  -3.7183, -16.5720, -15.7270],
        [  9.8297, -17.0488,  -6.7131, -13.8655,  34.2801],
        [  1.7823,  -3.2227,   4.8255, -10.6051,  -8.4346],
        [  1.2146,  -4.3598, -19.6710, -20.2071, -19.9589]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 4, 2, 0]
target tensor([0, 4, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0127, grad_fn=<NllLossBackward0>)
train
input tensor([[[  0,   2,  -2,  ...,   0,   1,  -6],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [ 13,  -6,   0,  ...,  -1,  -3,   9],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,  -3,   0,  ...,   1,   2,  -1],
         [  4,   0,   0,  ...,   0,  -3,  -1],
         [  1,  -1,   0,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,  -1,   0,  ...,  -1,   0,   4],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -5.6174,  -3.9835,  -0.6804,   6.7799,  -9.6841],
        [ -5.2837,  -0.3732,   6.8502,  -2.6547,  -2.1967],
        [-11.7060,  -7.6417,  -6.8055,   1.4592,  -8.7547],
        [  8.5018,   1.4160,  -5.6339, -22.5329,  -4.2492]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 3, 0]
target tensor([3, 2, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0007, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 10.8392,  -3.1302,  -8.5038,   0.3253, -19.2539],
        [-12.3098,   7.0564,   8.5568,  -6.8506, -13.3130],
        [-14.0645,  23.8636,  -6.1684,  -8.6446,  -4.3059],
        [ 14.7370,   2.4898, -20.5623, -23.2543, -25.1726]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 1, 0]
target tensor([0, 2, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0503, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-20.7850,  19.4497,  -4.4016,  -5.6250, -31.1504],
        [-11.9854,  -5.1616,  10.8596,  -8.4029,  -7.0479],
        [-22.7531,  28.5651,  -3.9918,  -5.8632,  -9.9970],
        [-11.2248,  20.4681, -10.4739,  -6.0566, -13.2666]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 1, 1]
target tensor([1, 2, 1, 1])
<class 'torch.Tensor'>
loss
tensor(2.9802e-08, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.2602,   7.8099,  -8.3473,  10.3807, -17.8067],
        [  8.3777,  -2.8014, -11.2888, -13.1084, -24.8801],
        [ -5.2735,  19.8171,  -3.3768,  -5.0451,  -8.1291],
        [ 12.6718,  -5.3843,  -5.4819, -13.5359,  -6.0580]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 1, 0]
target tensor([3, 0, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0184, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.4526,   9.0475,  14.7733,  -8.8380, -14.4396],
        [ -9.0740,  18.5301,  -1.1634, -10.0351, -12.8954],
        [  8.0419,   1.9447,   5.4968,  -9.1717,  -7.5874],
        [-10.2654, -25.7734, -10.3301, -11.8117,  26.2616]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 0, 4]
target tensor([2, 1, 0, 4])
<class 'torch.Tensor'>
loss
tensor(0.0202, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.6364,  21.5265,  -1.3030, -18.0621, -12.1715],
        [ -4.3773,  -6.7630, -20.2013, -14.0320,  31.2438],
        [-12.0622,   8.9606,  -8.4998,  -7.0753, -11.2089],
        [ -8.7566,   2.4946,  -2.5006,   8.9550, -11.6076]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 4, 1, 3]
target tensor([1, 4, 1, 3])
<class 'torch.Tensor'>
loss
tensor(0.0004, grad_fn=<NllLossBackward0>)
Epoch: [35][20/25]	Time 1.691 (1.724)	Data 0.027 (0.022)	Loss 0.0004 (0.0599)	Accuracy 100.000 (97.619)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.9041,   6.2979,   2.8055,  -2.1082,  -8.8902],
        [  5.7422,  -6.6591,  -6.7906, -17.2322, -14.6876],
        [ -6.4693,   4.7257,  13.2618, -15.0593, -11.5570],
        [-11.3755,  -2.2586,  14.8148,  -1.9503, -16.2961]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 2, 2]
target tensor([1, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0076, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.4046,   5.4005,  -8.5684,  18.0063, -14.1970],
        [-10.7273,  -2.6859,  12.9589,  -4.0919, -12.3457],
        [-13.2015,   0.4001, -16.7306,  -9.0279,  16.5666],
        [-26.2069,   0.1172,  15.9239, -11.1655, -10.4414]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 4, 2]
target tensor([3, 2, 4, 2])
<class 'torch.Tensor'>
loss
tensor(9.2387e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.3630,  -7.0585,   4.2072,  -6.3427, -12.1133],
        [-23.9426,  -4.4907,   2.7523,  30.7352, -19.0009],
        [ -8.6853,  -5.3659,  14.3595,  -6.9107,  -6.7985],
        [-20.8463,  39.9028,   7.9575, -28.9657, -13.6441]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 2, 1]
target tensor([0, 3, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.3005, grad_fn=<NllLossBackward0>)
train
input tensor([[[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,  -1,  ...,  -1,  -3,   3],
         [  0,   0,   0,  ...,   0,  10,  -2],
         [  2,   0,  -2,  ...,   2,   4,  -8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -2,  ...,  -4,   5,  -5],
         [  1,  -1,  -1,  ...,   0,   2,   0],
         [  1,   0,  -2,  ...,   1,   1,  -5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,   0,  ...,  -1,  -2,  -1],
         [  1,   2,  -2,  ...,  -6,  -5,   0],
         [  1,   0,  -3,  ...,   4,  -4,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-11.3683,   1.4635,   1.0691,   2.4416, -14.4656],
        [-11.1102,  -3.1551,  -5.0909,  13.1090,  -8.0357],
        [ -9.5293, -11.6213,  -8.6633,  -8.1286,  28.7565],
        [ -5.4351,  -5.4770,   9.2850,  -6.5669, -12.2501]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 4, 2]
target tensor([2, 3, 4, 2])
<class 'torch.Tensor'>
loss
tensor(0.4652, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.4018,   2.7949,   2.4868,  -2.2855,  -9.4865],
        [ -8.0846,   3.4159,  -2.6908,  -0.1329, -16.5801],
        [ -6.0048,  -0.5495,   0.3783,  -4.8053, -13.2758],
        [ -7.8837,   0.6533,   7.3986,  -5.5509, -11.5420]])
<class 'torch.Tensor'>
[1, 1, 2, 2]
target tensor([2., 0., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.7791)
Test: [0/13]	Time 0.467 (0.467)	Loss 4.7791 (4.7791)	Accuracy 25.000 (25.000)
evaluate
input tensor([[[  1,   2,  -1,  ...,   3,   1,  -6],
         [  1,   1,  -4,  ...,  -4,   2,   1],
         [  1,   0,  -2,  ...,  -1,  -1,  -9],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   2,  ...,   5,  -7,  -4],
         [  1,   0,   0,  ...,   2,  -3,  -1],
         [  1,  -3,  -1,  ...,   3,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -7.3262,  -2.0671,  -0.8608,  -2.1355, -12.7137],
        [ -5.8151,   2.3669,   3.4663,   0.1405, -12.0190],
        [ -4.7480,  -1.1293,   2.0644,  -1.5698, -21.7566],
        [ -8.8243,  -0.8274,   1.8692,  -6.3587, -15.5362]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 0., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.1626)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.3603,   0.2715,   3.2785,  -2.1905,  -9.3818],
        [ -5.5566,  -1.8635,   5.2481,  -3.7740, -19.6818],
        [ -3.7436,  -1.6332,   0.5196,  -4.4645, -12.2684],
        [ -3.8154,  -1.3059,   1.4132,  -6.2818, -13.2217]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 1., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.2137)
evaluate
input tensor([[[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.6699,  -0.4683,   2.8405,   0.7562, -13.1409],
        [ -3.7171,  -2.3429,   2.7260,  -4.2785, -11.8525],
        [ -7.5682,   0.1931,  -2.2643,  -4.6648, -19.1308],
        [ -9.7235,  -0.1124,   5.7498,   1.9839,  -9.3691]])
<class 'torch.Tensor'>
[2, 2, 1, 2]
target tensor([4., 3., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.4292)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-7.8656e+00,  4.2146e+00,  2.4121e+00, -4.3720e+00, -1.7708e+01],
        [-7.3605e+00,  3.4208e+00, -3.4099e-01, -4.9843e+00, -1.0127e+01],
        [-3.3497e+00,  9.7750e-03,  1.6840e+00, -3.8593e-01, -1.2131e+01],
        [-5.7908e+00,  1.0094e+00,  3.8312e+00, -4.1637e+00, -1.0731e+01]])
<class 'torch.Tensor'>
[1, 1, 2, 2]
target tensor([2., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.9376)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.1677,   0.7759,   3.2514,  -4.3798, -14.3357],
        [ -3.1368,  -3.5881,   5.8018,  -1.5602, -10.7732],
        [ -8.5760,   0.3610,  -1.0802,  -4.7527, -17.5124],
        [ -0.0402,  -0.2472,   2.8259,  -4.7096,  -5.7600]])
<class 'torch.Tensor'>
[2, 2, 1, 2]
target tensor([1., 3., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.5097)
evaluate
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.9640,   3.0741,  -5.4917,  -3.6776, -18.2795],
        [ -3.9290,   2.7235,   6.8176,  -3.5000, -13.6159],
        [ -9.5869,  -0.2289,  -1.0127,  -0.3257, -11.5225],
        [ -9.4056,  -5.2439,  -0.5043,  -4.5556, -20.0007]])
<class 'torch.Tensor'>
[1, 2, 1, 2]
target tensor([2., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.5635)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.9301,   0.0269,   3.8395,  -4.4532, -16.3761],
        [ -7.0598,   0.5415,   0.6605,  -3.5443, -12.0516],
        [ -7.9735,  -2.3341,  -3.1280,  -2.1151, -17.8646],
        [ -4.1534,  -0.6595,   4.5464,  -3.7112, -13.4803]])
<class 'torch.Tensor'>
[2, 2, 3, 2]
target tensor([3., 1., 2., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.2243)
evaluate
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.9413,   2.8089,   3.5733,  -4.4259, -11.7538],
        [ -8.7786,  -0.4900,   0.9444,  -4.4835, -15.8243],
        [ -1.4642,   2.8628,  -0.3368,  -6.5861, -10.3799],
        [ -4.7153,   3.7499,   4.6861,  -4.0695,  -8.2773]])
<class 'torch.Tensor'>
[2, 2, 1, 2]
target tensor([2., 3., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.6846)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.6396,  -1.1484,  -0.7325,  -3.1511, -12.4900],
        [ -5.1154,  -0.6630,   5.9723,  -0.8570, -16.2710],
        [ -3.3787,  -0.3995,   3.6462,  -5.1304, -10.5096],
        [ -4.8502,  -2.1298,   3.1733,  -1.6346, -12.0090]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.2638)
evaluate
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.2082,  -0.1764,   0.8854,  -2.2965, -12.7704],
        [ -6.2372,  -2.4844,   2.1409,  -2.7621, -10.5908],
        [ -9.1392,  -0.5611,   3.7755,  -3.2891, -12.3860],
        [ -2.8181,  -1.8793,  -0.4956,  -9.7996, -13.6702]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 4., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.1597)
Test: [10/13]	Time 0.556 (0.493)	Loss 7.1597 (4.3571)	Accuracy 25.000 (29.545)
evaluate
input tensor([[[  0,   0,  -3,  ...,  -2,   0,  -6],
         [  7,  -4,   0,  ...,   0,   1,   1],
         [ 11,  -5,   2,  ...,  -3,   6,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [  7,  -1,  -1,  ...,   0,   5,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   0,  -2,  ...,   2,  -4,   0],
         [  2,  -2,  -2,  ...,   6,   1,  -6],
         [  3,   0,  -1,  ...,   0,  -3,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -1.6478,  -3.4148,   3.3836,  -8.6167, -12.2260],
        [ -3.0788,   1.0949,  -2.1519,  -4.6431, -12.4572],
        [ -3.6760,  -0.8355,   2.1167,  -4.7091, -13.6263],
        [ -4.9428,   0.5892,   1.8593,  -3.5264,  -9.1497]])
<class 'torch.Tensor'>
[2, 1, 2, 2]
target tensor([0., 1., 3., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.3744)
evaluate
input tensor([[[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.7526,  -1.5012,  -0.0464,  -2.1585, -15.3720],
        [ -3.0393,  -0.3979,   4.0405,  -1.4908, -12.7741]])
<class 'torch.Tensor'>
[2, 2]
target tensor([3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.2160)
epoch: 36
train
input tensor([[[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.3821,  -8.0448,   9.2939,  -2.1156, -10.9413],
        [-14.2717,  -0.7815,  17.5389,  -2.9532, -16.1278],
        [-16.8231,  49.4665, -28.3048,  -9.9811, -27.3559],
        [ -9.0161,  26.8689, -21.5209,   4.1885, -11.5620]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 1]
target tensor([2, 2, 1, 1])
<class 'torch.Tensor'>
loss
tensor(2.8014e-06, grad_fn=<NllLossBackward0>)
Epoch: [36][0/25]	Time 1.807 (1.807)	Data 0.008 (0.008)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  8.9129,  -3.0468,   2.6772,  -5.5198, -10.8124],
        [ -8.8416,  -6.9986,  16.4575,  -3.4478, -13.5025],
        [ -6.8359, -11.1741,  17.5603, -18.8434,  -7.7945],
        [ -7.3116,  -7.2514,  15.2089,  -3.9465,  -8.8040]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 2]
target tensor([0, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0005, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.5830,  -4.7973, -21.6370,  12.2083, -17.4467],
        [ -0.4512,  -1.4543,   7.8422,  -3.7397, -10.9861],
        [ -9.6224,  -9.5307,   1.4045,  10.4299, -20.3265],
        [-27.1335,  -8.5690,   4.1814,  32.5265, -25.2834]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 3, 3]
target tensor([3, 2, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.0001, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.1800, -15.7931,  26.5022, -11.2404, -28.4077],
        [ -9.7402, -14.8014,  36.0351, -27.1115, -21.7603],
        [ -4.0657,  -8.2188,  22.3996,  -3.7410, -11.2727],
        [ -3.8535,  -1.9350,   4.7349,   2.1396, -10.3098]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2, 2, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.6672, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.4897,  20.2354,  -0.9034,  -6.9572, -18.1126],
        [ -3.8395,  11.9088,  -0.7259,  -5.9661,  -3.7753],
        [  5.8449,  -3.0701,   1.5696,  -5.5451,  -5.1020],
        [ -4.3251,  -7.2399,   9.5856,   1.1016, -22.0792]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 0, 2]
target tensor([1, 1, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0035, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.4649,  -2.0410,   7.5555,   1.6287, -22.4873],
        [ 12.3744, -14.3526,  -9.2274, -22.0019, -15.7839],
        [-17.7802,  -8.0667, -21.5864, -18.4788,  13.2208],
        [ -6.2496, -16.9406,   3.1977,  13.2910, -23.8191]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 4, 3]
target tensor([2, 0, 4, 3])
<class 'torch.Tensor'>
loss
tensor(0.0009, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.7398,  -5.4281,  12.2539,  -5.6860, -14.0377],
        [ -9.2479,  12.7533,  -2.8338,  -6.4275, -12.5663],
        [ -6.3045,  -6.0933,  -6.1783,  12.1120, -17.2319],
        [-13.4014,  -2.4344,   3.5355,   7.4567,  -7.7472]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 3, 3]
target tensor([2, 1, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.0049, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 25.5083,  -9.6961, -14.0540,  -0.8224, -27.6714],
        [ -6.0612,  -5.6159,  14.1712, -14.8446, -18.0344],
        [ -6.8388,   3.6039,  15.7051, -13.0472,  -5.8745],
        [  5.5881,  -4.1519,  -1.7641,  -1.4454, -10.8957]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 0]
target tensor([0, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0004, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 18.2001, -15.4167,  -3.8765, -10.2296, -23.0749],
        [-23.5252,  -0.8457, -13.4070,  30.9963, -30.4071],
        [  0.8107,  -0.0946,  -0.1397, -16.5781,   4.8829],
        [ 18.0185,   1.4062,   3.5532,  -7.6884, -14.4979]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 4, 0]
target tensor([0, 3, 4, 0])
<class 'torch.Tensor'>
loss
tensor(0.0075, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.2424,  -2.9851,  -9.4891,  29.0455,  -8.7316],
        [ -3.3815, -14.5659,  21.9021,  -5.3080,  -9.1565],
        [-11.5010,  -7.6770,  18.0844, -13.7466, -21.2508],
        [ -5.7308,   7.6434,   3.2869,  -6.1895, -13.8611]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 2, 1]
target tensor([3, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0032, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-15.9236,  17.3903,   2.5352, -13.4564, -21.8721],
        [-10.3388,  16.2128,  -9.2671,  -8.4010,  -9.7034],
        [-15.1577,  16.2576,  -4.5470,   0.9170, -18.6885],
        [ -4.3739, -14.3405,   5.4013,  17.0290, -34.4100]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 1, 3]
target tensor([1, 1, 1, 3])
<class 'torch.Tensor'>
loss
tensor(2.3842e-06, grad_fn=<NllLossBackward0>)
Epoch: [36][10/25]	Time 1.745 (1.710)	Data 0.027 (0.020)	Loss 0.0000 (0.0626)	Accuracy 100.000 (97.727)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.7546,  -7.1058,  15.8224,  -0.2617, -24.9975],
        [-11.9532,  -5.4423,  24.9937,  -4.8892,  -9.2160],
        [  7.6198,  -5.8202,  -4.8444,  -0.4277, -12.3611],
        [ -3.8686,  -9.8886, -10.3065, -21.2641,  16.1726]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 0, 4]
target tensor([2, 2, 0, 4])
<class 'torch.Tensor'>
loss
tensor(8.1288e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.0754,  -8.9787,  13.1157,  -1.8754,  -9.0618],
        [ -3.8734,  18.6385,  -6.5181,   2.6864, -16.5667],
        [ -5.0551, -22.0014,   9.6779,  -0.4078, -17.3734],
        [ -3.6557, -29.3976,  -6.4956, -14.9392,  20.2373]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 2, 4]
target tensor([2, 1, 2, 4])
<class 'torch.Tensor'>
loss
tensor(1.0639e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  6,   0,   0,  ...,  -3,   4,   2],
         [  2,   0,  -1,  ...,  -1,   2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  7,  -4,   0,  ...,  -1,   1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,  -2,   0,  ...,  -3,  -1,   8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,  -1,  ...,  -1,  -1,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [ -1,   1,   0,  ...,   2,  -3,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-15.4481,  -9.4550,  32.6185, -17.9916, -18.3888],
        [-13.6029,  16.4078,  -0.3459,  -8.1788, -17.5402],
        [ -4.0851,  23.0383,  -0.5351, -15.5038, -11.9157],
        [ 22.0523,  -1.8059,  -4.8735,  -4.6395, -28.2925]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 1, 0]
target tensor([2, 1, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  5.9950, -26.1264, -20.9186, -11.9150,  34.5959],
        [ -7.2462, -13.3548,  27.7953,  -5.7147, -31.2415],
        [ 30.1797, -16.1172, -18.2298,  -1.9960, -18.2325],
        [ 18.6044, -11.2647, -13.9613, -18.7287, -27.3757]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 0, 0]
target tensor([4, 2, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.2202, -14.0255,  -5.1560,  30.5764, -54.1035],
        [ 16.5948, -10.5812,  -8.3534,  -8.7963, -17.8176],
        [  8.5200, -10.1571,  -4.1727,  -6.2355, -12.2200],
        [ -3.8553,  -1.1892,  -1.3346,  14.8349, -24.0980]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 0, 3]
target tensor([3, 0, 0, 3])
<class 'torch.Tensor'>
loss
tensor(9.2387e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.2286, -15.7162,  -2.9441,   7.6497, -12.3427],
        [ -3.9966,  13.3524,  -0.2539,  -1.0817, -17.9314],
        [ -2.5235,  -9.6683,  12.3206,  -6.1411, -13.3902],
        [ 23.8457, -17.8672,  -3.3580, -22.0232, -44.1781]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 2, 0]
target tensor([3, 1, 2, 0])
<class 'torch.Tensor'>
loss
tensor(7.0333e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.4349,  16.6612,  -7.6787,  -2.8053, -15.5249],
        [-18.9520,  -6.3767,  -0.2607,  25.7150, -25.2252],
        [ 11.8247,  -7.9760,   1.2264,  -4.3794, -26.6859],
        [ 13.0530,  -7.4360,  -1.2184,  -3.5176, -20.9194]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 0, 0]
target tensor([1, 3, 0, 0])
<class 'torch.Tensor'>
loss
tensor(6.4372e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.6332,  -6.6263,  -1.5684,   4.0724, -13.9921],
        [  8.3184, -17.5554,  -0.5368,  -0.7330,  24.6565],
        [-13.1106,  20.5346,   1.5637,  -2.3396, -14.0023],
        [ 10.2182,  -6.5503,  -2.8989, -14.3038, -10.6334]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 4, 1, 0]
target tensor([3, 4, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0017, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,   0,  ...,  -1,  -2,  -1],
         [  1,   2,  -2,  ...,  -6,  -5,   0],
         [  1,   0,  -3,  ...,   4,  -4,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   0,   3,  ...,   2,   2,   2],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   4,   0,  ...,   2,   5,   1],
         [  3,   0,   0,  ...,   1,  -3,   0],
         [  1,  -1,   0,  ...,   0,  -6,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -0.2174, -18.9399,  16.6567,  -8.3643, -13.6007],
        [ -1.4392,  -5.4602,  13.2729,  -1.7664, -19.7991],
        [ 27.9191,  -7.7031,  -1.9359,  -9.9851, -41.8984],
        [-10.4110,  15.7966,   1.8532, -12.4304,  -5.7236]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 0, 1]
target tensor([2, 2, 0, 1])
<class 'torch.Tensor'>
loss
tensor(3.5763e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -1,  ...,   0,   0,   0],
         [  2,  -1,  -2,  ...,   2,   4,  -2],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,  -1,   0,  ...,  -1,   0,   4],
         [  0,   4,  -2,  ...,   0,   3,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -1.8869,  -2.6545,   5.6844,  -0.7025,  -5.4999],
        [ -1.4482,  12.2361,  -6.1231, -12.2730, -21.0592],
        [  1.0471,  35.9588,   0.4516, -23.9760, -17.1350],
        [ -3.2997, -10.9271,   8.9512,  -3.5820, -11.5355]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 1, 2]
target tensor([2, 1, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0006, grad_fn=<NllLossBackward0>)
Epoch: [36][20/25]	Time 1.722 (1.707)	Data 0.012 (0.021)	Loss 0.0006 (0.0329)	Accuracy 100.000 (98.810)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.8897,   6.3883,  -5.3147,  -4.8749, -19.5821],
        [ -4.4889, -19.6069,   9.6059,  -6.2342, -12.6190],
        [ -5.9347, -11.1247,   8.2717,  -4.7542, -17.7058],
        [ -3.2072, -17.6686,  11.7219,  -5.4329, -20.5996]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 2]
target tensor([1, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(6.4372e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.5606,  -5.6055,  11.3540,  -5.1463, -16.7588],
        [-10.2559, -16.9786, -13.3291, -10.2480,  15.2605],
        [ -7.5743,  29.1505,  -9.9082,  -5.6821, -17.1122],
        [ 14.8758,  -6.0660,  -4.9889, -20.4739, -13.9351]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 4, 1, 0]
target tensor([2, 4, 1, 0])
<class 'torch.Tensor'>
loss
tensor(2.6822e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.9671,  30.8467,  -2.5495,  -7.5782, -47.5334],
        [ -0.4769,  14.4414,  -6.5419,   0.4629, -22.3481],
        [ -2.7170, -11.7433,  24.2930, -10.6179, -26.3280],
        [ -0.5970, -17.3869, -13.7605,  28.8538, -29.1219]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 3]
target tensor([1, 1, 2, 3])
<class 'torch.Tensor'>
loss
tensor(2.9802e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.9325, -14.3276,  -8.2217,  -6.9432,   1.2520],
        [ -0.5803,  -3.1032,   0.5478,   9.3036, -22.1700],
        [  6.2805,  -7.2990,  -0.6313,  -8.1631, -13.4784],
        [ -7.3700, -16.2549,  31.5009, -12.9620, -14.3082]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 3, 0, 2]
target tensor([4, 3, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0005, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.9152,  -3.9128,   3.4127,  -2.5865, -20.4142],
        [ -2.3956,  -2.8031,   0.2762,  -1.7184, -11.1542],
        [ -1.0734,  -6.9989,   0.1038,  -4.6911, -22.4376],
        [  0.9984,  -4.3213,   2.8621,  -3.4708, -15.2280]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([3., 1., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.5253)
Test: [0/13]	Time 0.497 (0.497)	Loss 4.5253 (4.5253)	Accuracy 0.000 (0.000)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.1306,  -0.7200,   3.2070,  -3.8830, -22.1020],
        [  0.4954,  -7.3832,   2.4043,  -0.7331, -25.4571],
        [ -0.8327,  -1.0916,   1.8878,  -2.4922, -14.3453],
        [ -1.2971,  -5.7878,   0.5338,  -2.5294, -16.4377]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 2., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.7083)
evaluate
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.1458,  -3.4484,  -0.1605,  -0.6137, -14.5522],
        [ -3.3606,  -7.1632,   0.8124,  -0.8292, -19.0758],
        [  0.4440,  -1.1596,   6.2269,  -2.8121, -16.4219],
        [ -0.3145,  -2.3811,   1.5036,  -0.4049, -14.0525]])
<class 'torch.Tensor'>
[0, 2, 2, 2]
target tensor([1., 3., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.5996)
evaluate
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.0706,  -4.4487,  -0.6761,  -0.9320, -15.3716],
        [  1.6204,  -7.1919,   0.9753,  -4.0596, -16.5442],
        [  2.2785,  -5.2012,   2.1517,  -4.1768, -17.1889],
        [  0.8259,  -6.0915,   1.1152,  -2.2317, -16.8823]])
<class 'torch.Tensor'>
[0, 0, 0, 2]
target tensor([2., 0., 3., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.3644)
evaluate
input tensor([[[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.1821,  -5.3280,  -0.2189,  -4.0865, -17.5244],
        [ -2.7887,  -3.2910,   6.2231,  -3.8493, -14.7752],
        [ -1.2629,  -2.6167,   3.2239,  -3.4364, -13.0528],
        [ -2.4732,  -0.4083,   1.2227,  -0.8387, -12.1540]])
<class 'torch.Tensor'>
[0, 2, 2, 2]
target tensor([0., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.2094)
evaluate
input tensor([[[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.4725,  -8.0534,   7.4608,  -4.5616, -22.5768],
        [ -1.1069,  -7.7318,   1.2659,  -3.0443, -17.3688],
        [  0.3187,  -4.5178,   3.9771,  -2.4949, -17.2857],
        [ -1.5331,  -5.9628,   3.0754,  -5.7497, -20.3415]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 0., 4., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(12.0287)
evaluate
input tensor([[[  0,   0,  -3,  ...,  -2,   0,  -6],
         [  7,  -4,   0,  ...,   0,   1,   1],
         [ 11,  -5,   2,  ...,  -3,   6,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,   0,  ...,  -1,  -2,  -1],
         [  0,   2,  -2,  ...,  -3,   4,  -2],
         [  2,  -1,  -1,  ...,   0,   1,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   0,   1,  ...,   0,  -2,   4],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         [  5,   0,  -1,  ...,  -2,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  3.3431,  -7.9498,   1.7580,  -5.4260, -15.3185],
        [ -0.6176,  -8.1707,  -1.9453,  -1.9847, -22.4625],
        [ -3.6070,  -6.2417,   3.1672,  -6.0257, -19.2172],
        [ -0.1379,  -7.3761,   5.3834,  -0.4489, -14.3933]])
<class 'torch.Tensor'>
[0, 0, 2, 2]
target tensor([0., 2., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.9434)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.4093,  -4.8006,   5.4260,  -0.4547, -20.0450],
        [ -3.1489,  -4.2112,   3.5429,  -3.1116, -17.5819],
        [ -3.9530,  -4.8948,  -0.6392,   0.0646, -15.8490],
        [  1.3151,  -5.9654,   0.6535,  -5.3985, -17.9821]])
<class 'torch.Tensor'>
[2, 2, 3, 0]
target tensor([2., 1., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.3251)
evaluate
input tensor([[[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.4802,  -7.6315,   3.4720,  -2.5275, -13.5131],
        [ -2.4589,  -5.7260,   2.7407,   1.0282, -17.4150],
        [ -2.8591,  -1.2819,   3.1529,   0.7102, -15.4339],
        [ -5.4997,  -3.4324,   5.8129,   2.3228, -11.9702]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([4., 4., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(10.8649)
evaluate
input tensor([[[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   1,  -3,  ...,   1,  -3,   2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  2,  -2,  -1,  ...,   2,  -3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,  -1,  ...,   1,   1,   3],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,   0,   0,  ...,   0,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[ 10,  -6,   1,  ...,   2,  -5,   4],
         [  4,  -3,  -3,  ...,  -2,   1,   3],
         [  1,  -1,  -2,  ...,   3,   3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  0.8965,  -3.0069,  -1.4596,  -3.5487, -15.1950],
        [ -2.6802,  -3.3782,  -3.9782,  -4.4036, -22.7441],
        [ -0.8780,  -4.6352,   0.3497,  -2.8995, -15.9524],
        [ -0.7262,   0.1676,   2.9550,  -3.2365, -10.2486]])
<class 'torch.Tensor'>
[0, 0, 2, 2]
target tensor([1., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.8374)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.5831,  -0.6560,  -3.2913,  -4.9217, -13.2296],
        [  1.7039,  -2.3289,   2.0394,  -3.7341,  -7.8827],
        [ -2.1552, -11.3146,   1.8426,  -5.1917, -25.1937],
        [ -1.7216,  -5.4872,   1.8492,  -0.5862, -14.9029]])
<class 'torch.Tensor'>
[0, 2, 2, 2]
target tensor([0., 0., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.2637)
Test: [10/13]	Time 0.496 (0.512)	Loss 0.2637 (3.7882)	Accuracy 75.000 (43.182)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.2127,  -2.1541,   0.1964,  -3.7386, -13.7274],
        [ -0.6126,  -5.5029,  -0.4641,  -4.7375, -23.8945],
        [  0.5306,  -3.3430,   2.9618,  -0.8616, -15.7367],
        [ -3.2115,  -2.7252,  -0.4887,   0.8531, -22.0703]])
<class 'torch.Tensor'>
[2, 2, 2, 3]
target tensor([2., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.3142)
evaluate
input tensor([[[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.8120,  -6.8409,   0.1054,  -8.8212, -17.2136],
        [ -2.8006,  -4.1940,   3.0640,  -2.9187, -16.5474]])
<class 'torch.Tensor'>
[0, 2]
target tensor([0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.9676)
epoch: 37
train
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.2353, -10.5132,  15.2161,   6.8725, -27.1064],
        [  9.9190,  -9.8699,   0.4823,  -1.2985, -25.5259],
        [ 21.2197,  -8.7710,  -7.4739,  -8.9210, -28.0246],
        [  0.0767,  -2.1485,  -4.8881,  10.8968, -13.0417]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 0, 3]
target tensor([2, 0, 0, 3])
<class 'torch.Tensor'>
loss
tensor(8.8356e-05, grad_fn=<NllLossBackward0>)
Epoch: [37][0/25]	Time 1.890 (1.890)	Data 0.024 (0.024)	Loss 0.0001 (0.0001)	Accuracy 100.000 (100.000)
train
input tensor([[[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -2,  ...,   0,  -3,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [ 13,  -6,   0,  ...,  -1,  -3,   9],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  1,   1,  -4,  ...,  -4,   2,   1],
         [  4,  -1,   0,  ...,  -1,   2,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  6,  -3,   0,  ...,   0,   1,   0],
         [  7,  -2,   0,  ...,  -3,   7,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-2.5602e+00, -2.3940e+01,  4.3035e+01, -2.1686e+01, -2.9811e+01],
        [ 9.8052e+00, -3.8261e+00, -5.6876e+00,  3.1217e-02, -1.3523e+01],
        [-4.0803e+00, -1.5472e+01, -3.5972e+00,  2.3150e+01, -3.2307e+01],
        [-6.4264e+00, -9.1698e+00,  5.2976e-01,  2.2133e+01, -2.0428e+01]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 3, 3]
target tensor([2, 0, 3, 3])
<class 'torch.Tensor'>
loss
tensor(1.4573e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-14.1502, -30.6901,  -1.1342,  -0.6987,  15.5433],
        [-18.4273,  34.3017,   2.5900, -37.2343, -23.7238],
        [ -2.2024, -17.8461,  28.3697, -11.1814, -23.2511],
        [  8.6939,  -5.1017,  -1.9443,  -7.3897, -13.2756]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 2, 0]
target tensor([4, 1, 2, 0])
<class 'torch.Tensor'>
loss
tensor(6.3180e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  4.0352, -10.1280,  24.5694,  -3.1818, -18.3568],
        [  6.5106,   0.2188,  -3.6768,  -2.9360,  -7.5585],
        [ -6.7597,   9.7029,   2.3134,  -9.1150, -37.6364],
        [  1.1926,  19.0956,  -2.9650,  -3.2456, -16.9289]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 1, 1]
target tensor([2, 0, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0006, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.7154,   7.0687,   5.0926,  -8.5641, -16.7886],
        [-11.0214, -10.3383,  -9.5341,  29.0424, -39.4305],
        [  0.3075,  -8.6965,  14.5876,  -7.6896, -28.7989],
        [  2.8784, -45.3143, -13.6894, -22.2613,  33.2256]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 2, 4]
target tensor([1, 3, 2, 4])
<class 'torch.Tensor'>
loss
tensor(0.0325, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.9435, -14.6539,  -8.9172, -16.0515,  20.7823],
        [ -2.4368,  -7.0065,   8.5300,  -4.3443, -18.5558],
        [ -7.4235,  -6.5502,   8.9361,  -2.1170, -27.3479],
        [ -3.6272, -24.5690,  14.5336, -14.5833, -22.9360]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 2, 2]
target tensor([4, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(9.0002e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.7902,   6.9524,  -0.9570,  -1.6730, -16.5084],
        [ -9.3454, -14.6834,   1.4536,  25.3675, -29.4315],
        [  0.1460,  15.3913,  -9.0311,  -9.3148, -10.7056],
        [ -5.6694, -10.6594,  27.2607,  -7.2746, -24.2617]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 1, 2]
target tensor([1, 3, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.6661, -12.6671,  13.8575,  -8.9793, -25.6153],
        [ 10.1653,  -3.0976,  -4.9999,  -7.6910, -11.4134],
        [ -6.5007,  -4.8572,  13.6826,  -2.8412, -10.7349],
        [ 10.1484,  -7.1174,  -4.3927,  -2.9113, -15.4283]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 0]
target tensor([2, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(1.1921e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   5,   1,  ...,   1,   2,   0],
         [  2,   3,   0,  ...,   2,  -1,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   0,   0,  ...,  -4,   3,  -1],
         [  3,   0,   0,  ...,   0,  -1,   5],
         [  2,   0,  -1,  ...,   2,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,  -1,   8,  -4],
         [  1,   0,   1,  ...,   6,   4,  -2],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  5.4938,  -4.6894, -11.7780,  -7.9943, -25.6598],
        [ -6.5083,  -4.2650,   9.1810, -10.9733, -23.0158],
        [ -0.5075,  -2.9935,   5.6651,  -0.6909,  -4.7791],
        [-12.8747,  30.7090,  -7.2868,  -8.1681, -34.7697]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 1]
target tensor([0, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0010, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.2412,   0.3512,  12.7247,  -4.2328, -15.5015],
        [ -7.9286, -30.5410,  -1.6224,  32.9899, -36.4599],
        [ -4.8617, -11.2754, -16.9069,  -5.4746,   2.8340],
        [ -1.2227,  15.3727,  -9.1202,  -7.7905, -28.1447]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 4, 1]
target tensor([2, 3, 4, 1])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 20.0399,  -7.6535,  -2.6795, -14.8079, -18.9297],
        [ -1.3678,  18.6645,  -1.7266,  -8.9121, -21.4815],
        [ -0.3133,  16.0805,  -2.4880,  -6.2041, -13.7797],
        [ 32.4441, -11.3302, -14.7374,  -9.5356, -43.3745]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 1, 0]
target tensor([0, 1, 1, 0])
<class 'torch.Tensor'>
loss
tensor(2.9802e-08, grad_fn=<NllLossBackward0>)
Epoch: [37][10/25]	Time 1.668 (1.794)	Data 0.027 (0.026)	Loss 0.0000 (0.0031)	Accuracy 100.000 (100.000)
train
input tensor([[[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.9783,  -2.8402,  -2.0330,  12.7783, -16.6182],
        [ -7.8138,  33.5153, -31.1868, -12.3052, -32.4330],
        [ -3.4949,  -7.2659,   7.3546,  -7.2149, -19.9905],
        [ -5.6673,  14.8742,  -0.5978,  -0.8280, -20.6487]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 2, 1]
target tensor([3, 1, 2, 1])
<class 'torch.Tensor'>
loss
tensor(5.3048e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.6223,   9.8159,  -4.2065,   2.6628,  -9.2789],
        [ -7.2813,  -1.1724,  -7.3237,   5.7360, -33.0758],
        [-11.2133,   0.2254,  -3.7223,  18.3727, -28.5701],
        [-17.8079, -12.9389,  -2.6309,  27.5047, -47.3249]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 3, 3]
target tensor([1, 3, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.0004, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 28.1462, -18.5295,  -9.7870,  -8.3366, -29.9297],
        [-22.1051,  -4.9890,  -2.7507,  32.8463, -25.8809],
        [-16.9353,  14.9840,  -3.6624,  -8.8178, -18.8249],
        [-12.0108,  20.7692,  -4.9782,  -5.1090, -20.8013]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 1, 1]
target tensor([0, 3, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.5140,  10.0574,  -4.0054,  -6.3703, -14.7527],
        [  8.1933,  -3.3500,   0.3478,  -2.7490,  -5.1801],
        [ 10.7909, -12.3590, -19.1191,  18.2361, -13.8646],
        [ -0.4132,  -9.0038,   5.3082,  -0.4557, -11.5131]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 3, 2]
target tensor([1, 0, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0018, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.7108,  -2.6130,   6.2268,  -0.2457, -22.6854],
        [ 36.8672, -14.6346, -20.8372, -23.1636, -49.4328],
        [ 28.2149, -19.1877, -16.4502,  -8.7192, -20.4336],
        [ -7.1167,  -2.6328,  16.6625, -13.6962, -17.9962]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 0, 2]
target tensor([2, 0, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0014, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 25.9514,  -4.4408, -17.1638,  -6.8100, -15.5342],
        [ -6.2898,  -8.4441,  -8.6183,  11.4133, -19.6158],
        [-11.7894,  -4.5623, -12.1326,  18.7842,  -5.1011],
        [ -1.3921,  -8.0084,   7.8373,  -4.5175, -11.4567]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 3, 2]
target tensor([0, 3, 3, 2])
<class 'torch.Tensor'>
loss
tensor(2.5629e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.4588,   9.3751,   2.2380,  -2.4219, -11.8396],
        [ -8.2390,  -7.1896,   7.8896,   4.6208, -23.2344],
        [-11.6828,  -9.2114,  19.2175,  -1.4011, -18.9992],
        [ -2.3582,  17.9622,  -8.9808, -14.8173, -13.9174]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 1]
target tensor([1, 3, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.8267, grad_fn=<NllLossBackward0>)
train
input tensor([[[  5,   0,  -2,  ...,   0,  -3,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [  2,   2,   3,  ...,  -4,   2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   1,   0,  ...,   0,  -1,   0],
         [  1,   0,   0,  ...,   2,   1,   3],
         [  3,   0,   1,  ...,   2,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,  -1,  ...,  -1,  -3,   3],
         [  0,  -1,  -6,  ...,  -4,   0,  -8],
         [  4,  -1,   1,  ...,   6,  -4,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -0.3475,  -9.8068, -34.3411, -12.2840,  23.3708],
        [ -5.0267,  -4.8637,   9.3544,  -1.4560, -16.9545],
        [ -2.8631, -10.7768,  13.6352,  -8.9043, -17.5840],
        [  4.0600, -20.2980,  17.6652,  -4.0419, -24.8660]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 2, 2]
target tensor([4, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(5.6624e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.5691,  -5.3612,  11.2898,  -0.4401, -21.9134],
        [ -2.2584,  -8.6687,   7.3639,   0.0858, -23.9348],
        [  1.1857,   6.8763,  -1.5727,  -0.8165,  -6.8993],
        [  3.5051,  -5.5254, -19.8113, -11.5410,  12.6829]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 4]
target tensor([2, 2, 1, 4])
<class 'torch.Tensor'>
loss
tensor(0.0013, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.3975, -19.1686,  26.5611,  -4.6123, -32.4062],
        [ -7.1092,  20.5249, -31.3565,   6.5718, -11.3655],
        [-11.6720,  13.1672,  -7.5863,   8.6696, -21.2411],
        [  1.2527, -10.4090,   2.8663,  -5.0209, -11.2937]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 1, 2]
target tensor([2, 1, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0483, grad_fn=<NllLossBackward0>)
Epoch: [37][20/25]	Time 1.769 (1.752)	Data 0.013 (0.023)	Loss 0.0483 (0.0436)	Accuracy 100.000 (98.810)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.5498,  -4.4084,  -6.0194,  12.8656, -10.0402],
        [ 16.2514,  -0.6434, -14.0463,  -0.4863, -25.8474],
        [-14.2838, -13.0700,  18.2120,   0.9841, -19.5440],
        [ -2.5242,  -9.3461,   0.4550,   2.8245, -21.9976]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 2, 3]
target tensor([3, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.6158, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.1233,  -8.3049, -21.1077,  33.9598, -23.9623],
        [ -0.8990,  -0.6358,  -5.9467, -12.4081,  11.5076],
        [ -5.3492,  -9.2825,   8.4085,  -2.4539,  -9.5927],
        [ 21.1081,  -3.5936, -16.9909,  -3.9024, -32.7430]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 4, 2, 0]
target tensor([3, 4, 2, 0])
<class 'torch.Tensor'>
loss
tensor(7.4207e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  7.7494,  -5.6870,   2.5216,  -7.1274,  -9.6578],
        [ 10.2322,  -2.3193, -12.3492,  -6.8154, -25.9160],
        [ -2.0294,  15.3573,  -6.7443,  -0.8355,  -9.3712],
        [ 14.4896, -15.7211, -10.5716,   3.2319,  21.5354]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 1, 4]
target tensor([0, 0, 1, 4])
<class 'torch.Tensor'>
loss
tensor(0.0016, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.0514,  -9.1458,  16.8945,   2.4837, -17.5344],
        [-10.1304, -10.9496,   7.9858,  -3.8407, -15.6119],
        [  7.0917,  -8.7105,  -7.4086,   0.8309, -17.4560],
        [-10.9596,  -7.9179,   1.5457,  -2.5628, -18.6874]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 0, 2]
target tensor([2, 2, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0046, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[  1,   1,  -4,  ...,  -4,   2,   1],
         [  2,   3,   1,  ...,  -3,  -4,   0],
         [  1,   1,   0,  ...,   0,   6,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,   0,  ...,  -1,  -2,  -1],
         [  0,   2,  -2,  ...,  -3,   4,  -2],
         [  2,  -1,  -1,  ...,   0,   1,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   3,  -2,  ...,   1,   3,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -0.6594,  -2.4299,  -5.4041,   0.8287, -22.9872],
        [  0.8028,  -1.4144,  -4.2472,  -0.8721, -14.5437],
        [ -1.0390,  -5.8269,  -6.7511,   3.5728, -21.8744],
        [ -3.0267,  -1.4959,   2.4816,   0.3178, -14.2277]])
<class 'torch.Tensor'>
[3, 0, 3, 2]
target tensor([2., 1., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.8533)
Test: [0/13]	Time 0.471 (0.471)	Loss 4.8533 (4.8533)	Accuracy 25.000 (25.000)
evaluate
input tensor([[[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.6056,  -4.8264,  -3.3322,   4.2297, -18.8349],
        [  0.4558,  -3.7086,  -4.2755,  -0.1441, -17.9281],
        [  1.4796,  -5.1835,  -2.8643,   0.5745, -15.9450],
        [  0.9959,  -1.3676,   0.9955,   1.4531, -14.9403]])
<class 'torch.Tensor'>
[3, 0, 0, 3]
target tensor([3., 0., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.5264)
evaluate
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.8512,  -3.8066,  -3.6268,  -0.8649, -17.5148],
        [  1.6478,  -1.8996,   0.5840,  -2.2491,  -7.6186],
        [  0.0518,  -5.5996,   2.8296,   0.1569, -21.7252],
        [  1.9425,  -3.5201,  -2.5524,   1.2208, -16.9297]])
<class 'torch.Tensor'>
[0, 0, 2, 0]
target tensor([0., 0., 1., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.5211)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.5879,   0.4519,  -6.6864,  -1.4241, -12.9933],
        [ -2.8374,  -2.4875,  -1.4520,   1.7433, -17.5046],
        [ -0.8747,  -1.8804,  -0.5712,   2.0085, -20.2413],
        [ -3.1532,   0.1791,   0.2061,   3.9536, -15.1326]])
<class 'torch.Tensor'>
[0, 3, 3, 3]
target tensor([0., 1., 3., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.9292)
evaluate
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.6835,  -2.0632,   2.5663,   5.6793, -11.5268],
        [ -0.3923,   1.0968,   0.7731,  -0.6010,  -9.5887],
        [  0.4956,  -2.5803,   0.1069,   1.8941, -16.7922],
        [  0.3471,   0.7991,   3.4778,   0.3327, -15.9224]])
<class 'torch.Tensor'>
[3, 1, 3, 2]
target tensor([2., 2., 4., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.8558)
evaluate
input tensor([[[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  2,  -1,  -1,  ...,   0,   1,  -2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   3,   1,  ...,  -3,  -4,   0],
         [  2,  -2,  -2,  ...,   6,   1,  -6],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  7,  -4,   0,  ...,  -1,   1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,  -3,  -1,  ...,   0,  -4,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-3.3441e+00, -3.4332e+00, -2.8851e+00,  1.5533e-02, -1.8559e+01],
        [-4.2561e+00, -5.8509e-02, -6.4738e+00,  7.2402e+00, -2.1608e+01],
        [ 2.5387e+00, -5.0657e+00, -4.1707e+00, -4.0942e+00, -1.7138e+01],
        [-8.5830e-01,  2.2450e-01, -1.0565e+00,  1.3406e+00, -1.4015e+01]])
<class 'torch.Tensor'>
[3, 3, 0, 3]
target tensor([2., 0., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.3343)
evaluate
input tensor([[[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 9.5443e-01, -3.9270e+00, -2.5299e+00,  1.4601e+00, -1.7348e+01],
        [-1.5216e-01, -5.9183e+00,  2.1543e+00,  3.4996e+00, -1.3728e+01],
        [ 1.0981e-02, -9.9281e-01, -1.2351e+00,  3.0994e+00, -1.3834e+01],
        [-1.7698e+00, -4.0168e+00, -8.6645e-01,  1.9438e+00, -1.4666e+01]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([3., 3., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.0098)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.0753,   1.1738,  -1.0104,   1.2234, -21.6570],
        [ -1.5029,  -2.6568,   1.9434,   3.5272, -19.6609],
        [ -2.0380,  -1.1697,  -2.1867,   1.5569, -11.5640],
        [  0.6812,  -3.5375,  -3.3483,   1.7577, -15.0406]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([2., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.2489)
evaluate
input tensor([[[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.3107,  -6.0528,  -0.0889,   1.4484, -12.7519],
        [ -3.6317,  -2.6029,  -4.8135,   4.1686, -15.5647],
        [ -1.2345,  -4.6109,  -5.6265,   1.1758, -22.2034],
        [ -3.0651,  -3.2058,  -1.8120,   6.1474, -17.0333]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([4., 2., 0., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(12.2779)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.9639,   0.3191,  -4.4141,   0.3978, -13.5932],
        [ -1.4393,  -5.0047,  -4.4401,   2.5545, -17.1507],
        [ -1.6219,  -2.9521,  -5.3830,   3.2280, -16.3064],
        [ -0.2196,  -4.7064,  -2.4993,   4.3461, -25.3273]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([2., 0., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.6373)
evaluate
input tensor([[[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.8480,  -2.9255,  -1.5874,  -0.2787, -19.4616],
        [  3.6609,  -6.5553,  -1.5695,  -1.7366, -15.1288],
        [  0.2084,  -2.4946,  -2.1579,   1.2723, -14.2985],
        [ -1.6396,  -1.2269,   0.3876,  -0.2897, -11.4573]])
<class 'torch.Tensor'>
[3, 0, 3, 2]
target tensor([3., 0., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.2901)
Test: [10/13]	Time 0.593 (0.518)	Loss 1.2901 (4.1349)	Accuracy 75.000 (34.091)
evaluate
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.3243,   0.6572,  -0.9417,   1.2239, -11.8334],
        [ -2.0429,  -8.6860,  -3.4200,   0.4061, -23.8792],
        [ -2.7298,  -2.3944,  -1.7037,   2.3698, -16.7399],
        [ -0.9353,  -1.9177,  -3.9244,   1.7660, -15.8769]])
<class 'torch.Tensor'>
[3, 3, 3, 3]
target tensor([2., 2., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.8843)
evaluate
input tensor([[[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.7757,  -2.9444,  -0.7796,  -0.0627, -15.4997],
        [ -2.9687,  -1.4775,  -8.9422,   0.6617, -22.9336]])
<class 'torch.Tensor'>
[0, 3]
target tensor([1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.9852)
epoch: 38
train
input tensor([[[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-18.6607,  -0.7432,  -8.5948,  35.9608, -30.6938],
        [ -1.1655,  -1.0943,   9.1942,  -1.3867,  -8.9163],
        [  0.1066, -12.5337,  -6.9633,  13.6955, -29.7427],
        [ 34.8310,  -6.4761, -14.8461,  -4.3442, -17.9824]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 3, 0]
target tensor([3, 2, 3, 0])
<class 'torch.Tensor'>
loss
tensor(2.3096e-05, grad_fn=<NllLossBackward0>)
Epoch: [38][0/25]	Time 1.673 (1.673)	Data 0.024 (0.024)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
train
input tensor([[[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.9552,  12.0703, -12.0205,  -2.4772, -22.5759],
        [ 12.4638,  -5.8274,  -3.6047,   0.6468, -15.6305],
        [ 23.9895, -15.4873,  -5.5784,  -5.7028, -16.7301],
        [ -6.2632,  11.0746,  -3.8448,  -0.7643, -12.4831]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 0, 1]
target tensor([1, 0, 0, 1])
<class 'torch.Tensor'>
loss
tensor(3.9041e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.4096, -14.5106,  24.3265,  -6.0971, -20.6094],
        [ -3.7405,  -2.9172,  -1.5584,  -4.0199, -24.1283],
        [ 41.3937, -26.4636, -23.2953,  -2.7032, -46.7580],
        [ -0.1012,  -8.7835,   8.9337,   4.2239, -12.1779]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 0, 2]
target tensor([2, 2, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0960, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.9575,  42.4525,  -1.5280,  -5.6061, -27.7587],
        [  9.7787, -22.7065,  -5.5659,  -6.2331,  24.4662],
        [ -7.9607,  -6.0109, -12.5408,   1.6764,   9.8545],
        [ -3.8296, -37.4906,  -5.1269,  -0.8975,  21.9110]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 4, 4, 4]
target tensor([1, 4, 4, 4])
<class 'torch.Tensor'>
loss
tensor(7.0324e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  9.8312,  -5.4078,  -2.7936,  -6.5966, -26.1774],
        [ -8.7846,  18.9345,  -0.1101,   0.6997, -15.3128],
        [ -0.1719,  -6.1759,   7.3624,  -1.5805, -16.3029],
        [ -3.3346, -10.1219,  12.0554,  -3.3345, -21.8349]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 2, 2]
target tensor([0, 1, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.7155,  -0.4547,  10.0504,  -4.2918, -21.0474],
        [ -4.4330,   8.2724,  -3.3979,  -7.6262, -15.4920],
        [-17.6206,  41.6110, -25.7273, -14.1289, -40.2796],
        [  8.4364,  -1.2549,   0.3227,  -5.3154, -19.2693]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 1, 0]
target tensor([2, 1, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0001, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.4092,  12.0442,  -3.8603,   4.7692, -14.6901],
        [  5.3355,  -6.9256,  -7.4337,   0.3606, -13.5016],
        [ 17.6054,  -9.2092, -11.1804,  -4.9463, -26.8064],
        [ -6.4000, -10.0499, -24.6653, -29.9849,  25.2287]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 0, 4]
target tensor([1, 0, 0, 4])
<class 'torch.Tensor'>
loss
tensor(0.0019, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.9934, -15.6314,  -4.4885,  13.8174, -23.8243],
        [ -6.0348,   6.5752,   0.6007,   0.2026, -13.8505],
        [  6.1035, -23.1613, -10.3538,  -5.5877,  14.5084],
        [  8.6493, -11.1589,   2.1117,  -8.7415, -14.1939]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 4, 0]
target tensor([3, 1, 4, 0])
<class 'torch.Tensor'>
loss
tensor(0.0015, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,  -1,  -1,  ...,  -1,  -3,   3],
         [  0,  -1,  -6,  ...,  -4,   0,  -8],
         [  4,  -1,   1,  ...,   6,  -4,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   1,  -3,  ...,   1,  -3,   2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,  -1,  -1,  ...,  -2,   0,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  2,   0,  -3,  ...,   0,   3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  2.2539, -17.2249,  12.8587, -10.3245, -13.7644],
        [ -6.3430, -19.9346,  25.6217, -13.7505, -27.1306],
        [  8.5118,  -5.1083, -11.9553,   0.6662,  19.7850],
        [ -2.6798,  -3.8135,  18.8037,  -3.0309, -16.6230]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 4, 2]
target tensor([2, 2, 4, 2])
<class 'torch.Tensor'>
loss
tensor(9.3876e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.5312,  -7.4783,   2.6252,  13.8285, -21.9271],
        [ -4.7076,  15.7319, -17.1979,  -2.2629, -15.4378],
        [ -7.0351,  -7.7503,  10.2567,   1.5127, -17.0408],
        [  2.4612,  -5.9658,   0.1506, -18.9047,  12.4353]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 2, 4]
target tensor([3, 1, 2, 4])
<class 'torch.Tensor'>
loss
tensor(5.6084e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -1,  -1,  ...,   0,   5,   1],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  4,  -2,   0,  ...,  -4,   2,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [  5,  -1,  -1,  ...,  -1,   2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ 13.7157,  -5.0696,   2.0933,  -2.7754, -14.3722],
        [ -0.7545,  -3.1279,   5.6714,  -1.2553,  -4.5081],
        [ -1.6314, -10.4951,  15.4059,  -2.7424,  -7.9003],
        [ -9.5138, -23.0410,  -5.1468,  30.6327, -34.6332]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 3]
target tensor([0, 2, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0007, grad_fn=<NllLossBackward0>)
Epoch: [38][10/25]	Time 1.658 (1.707)	Data 0.027 (0.025)	Loss 0.0007 (0.0091)	Accuracy 100.000 (100.000)
train
input tensor([[[  1,  -1,  -1,  ...,  -1,  -3,   3],
         [  3,  -1,  -2,  ...,   0,   3,   4],
         [  1,   1,   0,  ...,   0,   6,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,  -1,  ...,  -1,  -1,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [ -1,   1,   0,  ...,   2,  -3,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,   2,  ...,   4,   0,  -2],
         [  2,   1,   1,  ...,   0,  -1,   0],
         [  1,  -2,  -1,  ...,   0,  -5,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-10.4964, -16.8980,  -2.4378,  27.3572, -22.5354],
        [ -3.9510, -11.7046,  21.4811,  -9.6102, -12.3740],
        [ 16.5140,  -8.0163,  -5.8477,   0.4788, -28.8546],
        [ -5.9937,  -3.4779,  11.5919,  -0.7981, -12.8093]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 0, 2]
target tensor([3, 2, 0, 2])
<class 'torch.Tensor'>
loss
tensor(1.1623e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-13.3412,   2.8720,  19.2343,  -7.7992,  -7.2347],
        [  9.0570,  -3.3980,   5.6147,  -5.0311, -21.2158],
        [ -8.8300,  -9.7400,  26.0448,  -2.9428, -35.1884],
        [ 30.2596, -33.6898, -14.3959,   2.7188, -54.1996]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 0]
target tensor([2, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0079, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.2847,  17.5125,   1.3238, -13.4245, -11.0986],
        [-12.3210,  -3.4215,   2.2763,  14.5356,  -9.5564],
        [-19.7882, -15.2518,   3.6779,  36.7349, -48.6284],
        [ -4.4291, -16.3688,  -4.7028,  11.7353,  -9.0769]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 3, 3]
target tensor([1, 3, 3, 3])
<class 'torch.Tensor'>
loss
tensor(1.2517e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.4150,  -3.5317,  14.7611,  -0.9341, -15.0370],
        [ -8.4624,  -6.8220,  19.6047,   5.1800, -23.4590],
        [ -2.1394,  -5.7796,  24.5630,  -6.4963, -22.3515],
        [ -6.5707, -14.8217, -20.6014,  33.6924,  -9.4784]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 3]
target tensor([2, 2, 2, 3])
<class 'torch.Tensor'>
loss
tensor(1.7881e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.5698,  33.2089,  -1.5751, -12.4429, -25.1246],
        [ -9.7993,  12.6298,  -0.8357,  -0.9681, -12.6655],
        [ -6.7350,  -9.3778,  -5.1264,  14.6031, -13.5346],
        [ -6.0274,  12.9149,  -6.0076,  -7.1788, -10.6362]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 3, 1]
target tensor([1, 1, 3, 1])
<class 'torch.Tensor'>
loss
tensor(6.5565e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-13.5057,  17.3836,  -7.9508,   9.1499, -28.7600],
        [ -6.8098,  -9.9255,  40.7074, -20.3903, -21.0922],
        [  5.2684,  -5.8382,  -0.2706,  -1.6620, -13.5972],
        [  2.5579, -10.8324,  38.0716, -10.4545, -26.7868]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 0, 2]
target tensor([1, 2, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0013, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  4.8045, -15.0343,  12.8270,  -1.5254, -13.4370],
        [ -4.3420,  -4.6164,  16.5477,  -5.7026,  -9.6726],
        [ -0.3707,   6.0943,   3.5508,  -4.0970,  -6.9473],
        [ -3.8556,  -7.7964,  12.1888,  -5.7571,  -9.7959]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 2]
target tensor([2, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0194, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.3870,   0.1486,   9.0116,   5.3843, -22.6851],
        [ -0.3066, -13.4977,  29.2613,   1.3328, -10.3102],
        [  5.2262,  -2.9763,   0.8966,  -4.1084,  -4.2920],
        [  1.3384,  23.4099,  -3.5645,  -8.9838, -22.1906]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 0, 1]
target tensor([2, 2, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.0100, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-18.8101,  18.4147,   4.8372,  -1.8791, -18.3117],
        [ -7.3764,  14.9695,  -6.9281,  -5.6452, -11.9231],
        [ -4.1607,  -6.6998, -17.9597,  28.1706, -17.6521],
        [  9.8433,  -8.8271,   1.0602, -11.2591, -10.9133]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 3, 0]
target tensor([1, 1, 3, 0])
<class 'torch.Tensor'>
loss
tensor(3.8651e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.9848,  -7.9559,  21.0871,   0.4089, -26.2983],
        [-14.3965,  -7.0267,   3.8424,  23.2895, -32.5903],
        [-16.2333,  -6.3696,  44.3506, -17.1748, -24.8872],
        [ -3.5620, -21.7426,  -5.1235,  -4.9743,  21.0348]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 2, 4]
target tensor([2, 3, 2, 4])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
Epoch: [38][20/25]	Time 1.642 (1.712)	Data 0.027 (0.025)	Loss 0.0000 (0.0066)	Accuracy 100.000 (100.000)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.4561,  10.6397,  -4.0500,  -6.6929, -17.6690],
        [  5.7339,  -6.9889,   0.4068, -10.2650,  -9.6058],
        [-14.6739,  -7.0637,   8.8757, -10.1167, -28.3118],
        [ -5.7055,  -9.7085,   7.9700,  -4.3026,  -9.5948]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 2, 2]
target tensor([1, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0012, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-19.6119, -15.4321,  12.1762,  22.1576, -17.9052],
        [  8.3524,   0.8592,  -0.3583,  -3.5084, -15.5495],
        [-13.4122,  20.1482,   1.7694,  -7.3687, -14.1083],
        [-10.6548,  -7.9827,  32.9533,  -9.2696, -15.4318]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 1, 2]
target tensor([3, 0, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-22.1802,  28.9692,   4.4517,  -7.1929, -21.9039],
        [ -7.7326, -16.8247,   0.7484,  33.4367, -30.5245],
        [ -5.5691,  -2.8005,  -2.8523,  11.4887, -16.8808],
        [ 10.9450,  -4.6334,   6.9568,  -8.6809, -17.8455]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 3, 0]
target tensor([1, 3, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0046, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-18.2961, -10.4433,   0.7641,  33.2612, -27.0005],
        [ 19.0768, -10.8478,  -6.3759,  -7.7423, -33.8790],
        [ -3.9644,  15.5368,  -2.3843, -10.8223, -24.0919],
        [ -3.4348, -10.1955,  19.2202,  -3.1572,  -6.9594]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 1, 2]
target tensor([3, 0, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  2,  -1,  -1,  ...,   0,   1,  -2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   3,   1,  -6],
         [  1,  -1,  -1,  ...,  -2,   0,   1],
         [  1,  -1,  -1,  ...,  -1,  -3,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   1,  -1,  ...,   2,  -3,  -2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,   0,   1,  ...,   2,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -5.1927,  -5.3583,   6.6867,  -5.4688, -17.4300],
        [ -6.6961,  -2.7045,   3.2461,   2.2014, -21.2825],
        [ -0.8633,  -5.2945,   3.4252,  -3.6346, -17.5418],
        [ -2.9238,  -8.2949,   7.9408,  -2.8923, -12.3508]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 0., 0., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(8.7101)
Test: [0/13]	Time 0.505 (0.505)	Loss 8.7101 (8.7101)	Accuracy 25.000 (25.000)
evaluate
input tensor([[[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.4848,  -7.2297,   4.1313,  -7.9008, -16.7889],
        [ -3.7112,  -0.6403,   8.8423,  -3.0208, -21.3003],
        [ -5.5776,  -6.5760,   6.7824,  -0.3510, -17.5187],
        [ -0.7551,  -2.2604,   5.0390,   0.1378, -13.4875]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 2., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.7044)
evaluate
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.6495,  -1.8852,   3.5515,  -0.6918, -11.6388],
        [ -0.9305,  -4.1309,   7.8705,  -1.5033, -15.9945],
        [ -4.5251,  -4.6438,   6.1799,  -1.1372, -16.1709],
        [ -0.0355,  -2.8442,   2.5053,  -1.5651, -14.3807]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 4., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(11.3684)
evaluate
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.5560,  -5.1517,   3.0697,  -1.8717, -14.9011],
        [ -2.3344,  -7.6413,  10.8091,  -3.7224, -21.0459],
        [ -4.1240,  -0.9855,   4.5479,  -4.3812, -12.9936],
        [ -4.1707,  -0.8561,   6.5448,   0.7392, -14.6308]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 1., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.3018)
evaluate
input tensor([[[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.8000,  -4.6311,   8.5279,  -4.7927, -18.5138],
        [ -4.7612,  -4.4088,   4.3964,  -0.0839, -15.2538],
        [ -2.1109,  -4.7601,   4.9973,  -1.4884, -14.4280],
        [ -0.2087,  -5.5042,   5.0746,  -2.3803, -17.4054]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([3., 2., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.1988)
evaluate
input tensor([[[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.0086,  -8.4749,   4.8860,  -4.6629, -14.7202],
        [ -1.3750,  -0.2459,   6.9032,  -3.7381,  -9.0192],
        [ -3.8220,  -4.6958,   6.7445,  -2.7812, -17.6261],
        [ -2.1810,  -6.4441,   7.1879,   0.0341, -24.5869]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.3655)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.7864,  -6.3005,   5.4043,  -2.4408, -15.9213],
        [ -0.4472,  -4.3111,   6.0834,  -3.0122, -15.3973],
        [ -2.8406,   0.2291,   3.5679,  -1.1118, -11.3924],
        [  1.4158,  -1.1294,  -0.4067,  -4.6533, -12.3855]])
<class 'torch.Tensor'>
[2, 2, 2, 0]
target tensor([1., 1., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.5909)
evaluate
input tensor([[[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.9977,  -2.9570,   4.1784,  -3.7626,  -7.0832],
        [ -5.1840,  -5.4118,   7.4552,   1.4330, -16.3553],
        [ -7.1178,  -4.6423,   9.8380,   1.7921, -11.7295],
        [ -5.4640,  -4.4202,  -0.1455,  -3.2536, -23.1835]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 4., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.7743)
evaluate
input tensor([[[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.3625,  -0.0489,   9.5502,  -2.4653, -15.5526],
        [ -2.5693,  -5.5559,   6.0455,  -4.3982, -22.3297],
        [ -2.8506,  -4.1365,   9.7676,  -0.4586, -19.0059],
        [ -3.0655,  -7.1406,   4.1443,  -2.8834, -21.4348]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.8030)
evaluate
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.3316,  -5.8432,   4.5218,  -5.1475, -16.9777],
        [ -4.2274,  -2.6500,   9.5913,  -3.4461, -13.4971],
        [ -2.7530,  -3.0593,   7.2872,  -4.0550,  -9.8069],
        [  0.8942,  -1.5659,   7.0205,  -1.0315, -14.2221]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.0520)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.1024,  -5.4417,   5.2204,  -2.0740, -16.2773],
        [ -4.0469,  -7.8055,   5.6174,  -2.0656, -16.8869],
        [ -1.1903,  -7.7913,   9.2527,   0.2118, -13.1938],
        [ -1.6288,  -3.4984,   7.1846,  -1.3579, -19.9209]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([3., 0., 3., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(8.6375)
Test: [10/13]	Time 0.556 (0.512)	Loss 8.6375 (5.6824)	Accuracy 0.000 (43.182)
evaluate
input tensor([[[  7,  -4,   0,  ...,  -1,   1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,  -3,  -1,  ...,   0,  -4,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,  -1,  ...,   1,   1,   3],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,   0,   0,  ...,   0,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,   0,  ...,  -1,  -2,  -1],
         [  0,   2,  -2,  ...,  -3,   4,  -2],
         [  2,  -1,  -1,  ...,   0,   1,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -1.9214,  -1.3518,   6.2768,  -1.3727, -13.4589],
        [ -2.5954,  -3.5896,   5.4511,  -2.9190, -15.4034],
        [ -3.4675,  -7.5207,   4.3267,  -1.2666, -20.8623],
        [ -0.6973,  -2.9945,   3.3177,  -5.2566, -13.5738]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 1., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.8447)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.0584, -10.8843,   7.7122,  -5.6694, -22.5935],
        [ -0.1283,  -7.6182,   5.9073,  -3.6472, -15.3074]])
<class 'torch.Tensor'>
[2, 2]
target tensor([2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.0190)
epoch: 39
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.5326,  -3.7702,  11.1311,  -8.6939, -14.7680],
        [ -8.4597,  -0.5223,  -7.9638,  12.9857, -10.8441],
        [ -9.6727, -33.0199,   3.0792, -12.3220,  35.1647],
        [ -7.2280, -19.7841,  26.7303,  -7.6116, -17.9502]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 4, 2]
target tensor([2, 3, 4, 2])
<class 'torch.Tensor'>
loss
tensor(4.1723e-07, grad_fn=<NllLossBackward0>)
Epoch: [39][0/25]	Time 1.926 (1.926)	Data 0.031 (0.031)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 18.5206, -11.9015,   7.8837,  -4.8131, -18.9130],
        [-11.8608,  18.6500,  -1.2009,  -2.2139, -17.7978],
        [ -4.6898,  -8.6416, -16.6509, -19.6031,  16.0574],
        [ -9.1547,  42.9330, -23.5278, -18.3410, -43.5296]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 4, 1]
target tensor([0, 1, 4, 1])
<class 'torch.Tensor'>
loss
tensor(5.9902e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,   0,  -2,  ...,   0,  -7,   1],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  1,   2,   3,  ...,   0,  -3,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [ -1,   3,   3,  ...,   0,   3,   3],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   5,   1,  ...,   1,   2,   0],
         [  2,   3,   0,  ...,   2,  -1,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-12.9515, -10.3415,  15.9827,  14.0214, -22.7522],
        [ 15.6614,  -5.7217,  10.0117, -14.2670, -28.9912],
        [ 11.3608,  -9.4220,  -6.4760, -15.3632, -27.5574],
        [ -3.3380, -16.8456,  36.3581, -20.0048, -23.3083]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 0, 2]
target tensor([3, 0, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.5241, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.9876,  -6.4856,  -0.5845,  18.5749, -21.9885],
        [ -7.8751, -12.0003, -15.9711,  32.3471, -18.6281],
        [ -2.9854,  -3.7671,  13.3736,  -4.8677, -16.3589],
        [ -4.7021,  -6.4221,  10.1838,  -2.5225, -11.2119]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 2, 2]
target tensor([3, 3, 2, 2])
<class 'torch.Tensor'>
loss
tensor(8.6427e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.3637,  12.7188,  -3.6408,  -5.7402, -24.5075],
        [-17.4323, -20.9821, -11.3436,  37.4678, -34.6416],
        [ -2.9244,  -6.3875,  -0.4950,  11.9620, -16.9554],
        [ -1.1206, -11.1654, -18.0679,  -8.1067,  19.5253]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 3, 4]
target tensor([1, 3, 3, 4])
<class 'torch.Tensor'>
loss
tensor(1.1027e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.0400,  -4.9472,  16.5196,  -9.7304,  -9.8453],
        [ -0.7918,  -8.5264,  10.5794,  -0.8097, -19.1341],
        [-12.2316,  -5.0414,  -2.8594,  11.1429, -10.3874],
        [ -7.3643,   8.1238,  -4.1171,   3.9555, -18.2131]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 3, 1]
target tensor([2, 2, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.0038, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-14.2578,  -7.0845,  -7.7158,  23.4098, -39.1291],
        [  3.2512,  -7.3804,  12.6374,   9.8842, -23.9587],
        [ -5.7658,   7.6629,   0.3680,  -0.5876,  -9.3933],
        [ -5.5970, -11.8061,  19.3506,   0.3967,  -6.6743]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 1, 2]
target tensor([3, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0157, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.0056, -13.8851,   0.7280,  23.0384, -27.5505],
        [ -7.6997,  17.2958,  -6.9509,  -5.6349, -15.0626],
        [  7.0220,  -8.9663,   2.1579,   3.2308, -31.1760],
        [ -3.7374,  -8.4992,   8.6397,  -1.2373, -11.6594]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 0, 2]
target tensor([3, 1, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0075, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 28.0798,  -6.9701, -17.0353,  -0.8465, -16.0782],
        [ -7.8188, -16.5821,   7.0187,  -7.1558, -20.3125],
        [  0.2252,  17.7457,  -3.9905,  -4.7832, -15.6317],
        [ -5.7559,  -3.7612,   3.2178,   9.5237, -20.0082]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 1, 3]
target tensor([0, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(1.5769, grad_fn=<NllLossBackward0>)
train
input tensor([[[  3,   0,   0,  ...,   1,  -3,   0],
         [  2,   0,   0,  ...,  -2,   5,   4],
         [  2,   0,  -2,  ...,   0,   2,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   1,   1,  ...,   6,   1,  -1],
         [  1,   2,   3,  ...,   0,  -3,   1],
         [  1,  -1,  -1,  ...,   2,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -2,  -1,  ...,   2,  -4,  -5],
         [  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   0,   0,  ...,   2,   2,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -3.9191, -15.7293,  13.2681,   2.6699, -28.6629],
        [ -1.0281,  -1.6399,   5.9595,   2.3373,  -5.3961],
        [ -4.5364, -32.6055, -11.5581,  -3.7172,  24.5005],
        [ -6.6537,  20.3708,  -8.0777,  -3.0335, -18.2155]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 4, 1]
target tensor([2, 2, 4, 1])
<class 'torch.Tensor'>
loss
tensor(0.0069, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.0617,  -0.5581,  -8.7683,  22.1331, -16.4793],
        [ -6.0826,  -6.3169,  22.4276,  -2.7019, -28.8848],
        [ 15.2048,  -2.9859,  -3.6494,   3.1532, -24.0848],
        [  4.4623,  -0.3603,   1.4385,   3.2921, -14.5569]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 0, 0]
target tensor([3, 2, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.0782, grad_fn=<NllLossBackward0>)
Epoch: [39][10/25]	Time 1.912 (1.770)	Data 0.028 (0.027)	Loss 0.0782 (0.2012)	Accuracy 100.000 (95.455)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 21.2146,  -3.4810, -12.4201,   0.6182, -32.7968],
        [-19.2953, -12.3946,  -5.2996,  27.3797, -15.7562],
        [ -6.2477, -12.1718, -16.4395,  23.7784, -17.1508],
        [ -7.0586, -13.1422, -18.6420,  10.6646,   6.7002]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 3, 3]
target tensor([0, 3, 3, 4])
<class 'torch.Tensor'>
loss
tensor(0.9958, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.3959, -21.9219,  39.2484, -31.1045, -30.4832],
        [-11.5224,  29.8552,  -4.5860, -11.9274, -12.3776],
        [ -5.8433,  -7.9723,   1.3856,  28.4870, -19.9565],
        [ 18.5575, -15.2745, -30.7682, -16.9810, -38.5636]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 3, 0]
target tensor([2, 1, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[  3,   0,   0,  ...,   1,  -3,   0],
         [  1,  -1,  -1,  ...,  -1,  -3,   3],
         [  0,   1,   0,  ...,  -1,   8,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  6,  -2,   1,  ...,   0,  -1,   0],
         [  3,  -1,  -2,  ...,   0,   3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,  -2,  ...,   3,   3,   0],
         [  2,  -1,  -2,  ...,   2,   4,  -2],
         [  1,  -1,  -1,  ...,  -2,   0,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -7.6299,  -3.3270,  22.0102,  -3.6944, -10.4360],
        [ -3.9724,  -5.8305,  10.3051,  -6.8618, -11.7605],
        [  5.1490, -13.0352,  12.1954, -12.9307,  -6.6489],
        [ -1.5702, -12.6503,  19.1768,  -3.6240, -11.5183]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  7.7997,  -3.9655,  -0.8872, -14.0707,  -7.6992],
        [  7.3009,  -4.7694,  -1.1077,  -4.7204,  -4.7757],
        [ -3.4548, -10.6035,  15.8031, -11.4162, -10.6526],
        [ -2.7399,  -4.2777,   9.9798,  -6.0788, -22.6390]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 2, 2]
target tensor([0, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0001, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 31.3464, -21.6818,   0.0593, -24.3306, -15.3875],
        [-12.2973,  -6.1107,  18.4586, -17.1728, -15.0942],
        [ 15.8328,  -7.6752,  -1.7777,  -9.3244,  -2.0876],
        [-17.8639,  29.0074,  -3.4143, -15.8829,  -8.0035]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 0, 1]
target tensor([0, 2, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 10.0765, -12.2169,   6.7560, -14.8917,  -6.2351],
        [-17.3743, -11.4229,  -2.3461,  29.5309, -38.1006],
        [-19.7514,  -9.4775,   0.6848,   1.7855,   0.0477],
        [ 20.4985, -12.9562,   2.8255, -11.9810, -25.8978]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 3, 0]
target tensor([0, 3, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.1117, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.4985e+00,  1.9013e+01, -2.0661e+01, -1.6216e+01, -5.5374e+00],
        [ 7.9706e+00, -4.7407e+00, -1.0143e+00, -6.5200e+00, -9.0831e+00],
        [ 7.5443e+00, -1.0265e+01,  1.6626e+00, -1.4679e+01, -2.5834e+00],
        [-4.7280e+00,  4.8163e+00, -3.2768e+00, -2.9593e+01, -2.0273e-02]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 0, 1]
target tensor([1, 0, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.0028, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.7782,  -5.9827,   2.0989,   1.1564,  -8.2844],
        [ -5.4293, -10.8963,  17.5975, -12.0596,  -4.1632],
        [  9.8124, -13.2324,   0.6403,  -7.4953,  -3.6395],
        [ -1.3485, -15.7019,  19.9266, -12.9484,  -1.7847]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 0, 2]
target tensor([3, 2, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.3185, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 5.8182e-01, -6.0272e+00,  1.9567e+00, -3.0687e+01,  3.0704e+01],
        [ 2.2043e+00,  1.0419e+01, -1.9822e+00, -7.3968e+00,  1.1385e-02],
        [-2.5253e+00,  8.0823e+00,  1.3853e+00, -1.0705e+01, -3.2531e+00],
        [-1.0024e+01,  2.3700e+01, -8.1643e+00, -3.6977e+01,  4.2993e+00]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 1, 1]
target tensor([4, 1, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0004, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.6227,  18.9983,  -1.7386, -12.5677,  -3.8255],
        [ -1.7683, -16.3590,  21.5482,  -2.7088,  -9.6989],
        [ -4.2700,  -6.9985,   9.6459,  -8.0464, -19.5063],
        [ -4.7725,  16.3840,  -9.3337, -12.4511,  -9.1087]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 1]
target tensor([1, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(2.3842e-07, grad_fn=<NllLossBackward0>)
Epoch: [39][20/25]	Time 1.676 (1.724)	Data 0.027 (0.024)	Loss 0.0000 (0.1735)	Accuracy 100.000 (95.238)
train
input tensor([[[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.1081, -17.4339,  21.6533, -25.0352,  -7.0981],
        [  6.9261,  -5.5618,  -0.3612,  -7.1235,  -1.1156],
        [ 23.2954,  -7.8433,   1.7059, -26.1023,   0.0351],
        [ -8.9507,  17.1038,  -1.5298,  -7.4512,   1.0536]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 0, 1]
target tensor([2, 0, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.9636, -30.4008,  -6.7865,  13.9052, -15.2514],
        [ -0.9754,  15.9627,  -8.5977, -14.1179,  -4.3617],
        [-12.8555,   3.4878,   2.6151, -18.8670,  -0.8847],
        [ -3.8384,  -6.9454,   8.7718,  -5.0983,  -0.0606]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 1, 2]
target tensor([3, 1, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0895, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.4027,  -5.4452,  12.6083,  -4.9987,  -4.9406],
        [-10.1862, -14.1345,  19.0601, -12.1135,  -3.2124],
        [  0.8543,  13.5866,   0.0904,  -9.4333,  -4.5605],
        [ -3.9065,  29.5026,   6.4282, -27.6148, -25.2018]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 1]
target tensor([2, 2, 1, 1])
<class 'torch.Tensor'>
loss
tensor(4.5001e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 11.5369, -23.9762,  -6.0215, -12.6884,  40.6082],
        [-10.3068,  -7.4623,  20.9220, -11.1669,  -7.6077],
        [  7.4634, -19.2077,  16.8478, -10.7980,  -4.9778],
        [  1.5898, -10.3687,  -6.3874, -12.5054,  27.7233]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 2, 4]
target tensor([4, 2, 2, 4])
<class 'torch.Tensor'>
loss
tensor(2.1010e-05, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.0817,  -4.4996,  -0.8119,  -8.6163,  -2.1773],
        [  3.7916,  -5.0644,  -2.2629, -12.5852,   0.4850],
        [  2.2053,  -1.9931,  -0.1886,  -8.9872,   0.5502],
        [  1.5533,  -2.0748,   2.7168, -11.0107,   2.3338]])
<class 'torch.Tensor'>
[0, 0, 0, 2]
target tensor([2., 3., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.6815)
Test: [0/13]	Time 0.475 (0.475)	Loss 5.6815 (5.6815)	Accuracy 25.000 (25.000)
evaluate
input tensor([[[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.2229,  -3.4151,  -5.2696, -13.2113,   2.8200],
        [  3.3966,  -2.0497,  -1.1078,  -7.2043,  -4.0561],
        [ -0.8160,  -4.6270,  -9.1747, -16.3546,  -2.8174],
        [  2.2033,  -6.6937,   2.5071,  -6.7235,  -1.2794]])
<class 'torch.Tensor'>
[4, 0, 0, 2]
target tensor([1., 1., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.6096)
evaluate
input tensor([[[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  4.9111,  -6.8338,  -1.6437, -20.3640,   0.4500],
        [  1.5575,  -1.6078,   3.9591, -12.8668,  -0.1084],
        [  0.7802,  -6.5675,  -5.3942, -15.3647,   0.3826],
        [  2.8524,  -1.1286,   1.6063,  -7.2485,  -3.7457]])
<class 'torch.Tensor'>
[0, 2, 0, 0]
target tensor([0., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.0807)
evaluate
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.9544,  -1.3165,  -8.8594, -10.0626,   0.3598],
        [  0.8691,  -0.1041,  -4.6145, -13.4534,   4.2077],
        [ -3.4888,  -3.6067,   3.1072,  -4.5465,   1.3526],
        [  6.7061,  -7.5856,   0.9597, -14.4336,  -1.8828]])
<class 'torch.Tensor'>
[4, 4, 2, 0]
target tensor([0., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.6814)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.1765,   1.3172,   1.4878, -14.8018,  -4.4573],
        [  3.5915,  -6.0848,  -3.3548, -14.5081,   3.0579],
        [  4.9674,  -4.6963,  -2.3434, -13.3666,  -1.8008],
        [  2.1675,  -3.7073,  -2.3721,  -8.8158,  -3.2648]])
<class 'torch.Tensor'>
[2, 0, 0, 0]
target tensor([2., 0., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.4330)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.4937,  -5.0859,  -5.2931, -16.3960,   6.5993],
        [  2.1868,  -4.3145,  -5.5757, -16.9983,  -0.4002],
        [  4.1326,  -4.1184,  -3.6376, -14.6932,   0.6865],
        [  0.9003,   0.5035,  -0.6374,  -7.3452,   0.6649]])
<class 'torch.Tensor'>
[4, 0, 0, 0]
target tensor([1., 2., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.5207)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.7377,  -7.2196,  -1.1624, -11.1115,  -5.0874],
        [  1.8881,  -3.0337,   2.1317,  -9.8240,  -3.4713],
        [ -1.0743,  -6.2676,  -4.0175, -10.7806,   1.7651],
        [  2.9556,  -8.0596,   1.7159, -11.7117,  -5.0142]])
<class 'torch.Tensor'>
[0, 2, 4, 0]
target tensor([2., 2., 3., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.3418)
evaluate
input tensor([[[  3,  -1,   1,  ...,   4,   5,   0],
         [  3,   6,   0,  ...,  -4,   0,   4],
         [  2,  -2,  -2,  ...,   6,   1,  -6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  5,  -1,   0,  ...,   7,   3,   0],
         [  5,   0,   0,  ...,   6,  -1,   7],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  1,   1,  -4,  ...,  -4,   2,   1],
         [  1,   0,  -2,  ...,  -1,  -1,  -9],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -0.6154,  -4.2637,  -2.0272,  -9.0228,   1.7764],
        [  1.8249,  -3.0144,   0.2829, -12.5100,  -4.8356],
        [ -0.1758,  -6.9312,  -5.9628, -14.1778,   5.9143],
        [  1.5274,  -2.6853,  -4.1453, -12.6859,   0.6747]])
<class 'torch.Tensor'>
[4, 0, 4, 0]
target tensor([4., 3., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.3298)
evaluate
input tensor([[[ 10,  -6,   1,  ...,   2,  -5,   4],
         [  4,  -3,  -3,  ...,  -2,   1,   3],
         [  1,  -1,  -2,  ...,   3,   3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -1,  ...,   2,  -3,   4],
         [  2,  -1,   0,  ...,   0,  -3,   2],
         [  2,  -1,  -4,  ...,   0,  -4,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   1,  -1,  ...,   2,  -3,  -2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,   0,   1,  ...,   2,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  1.8322,   2.0097,   3.2317, -10.7949,   1.0440],
        [  1.4755,  -3.4611,  -1.2471, -16.1098,   0.4770],
        [  0.3885,  -7.5112,  -0.3878, -10.2964,   3.4496],
        [ -0.3155,  -3.3676,  -3.4504, -17.7026,   3.0902]])
<class 'torch.Tensor'>
[2, 0, 4, 4]
target tensor([2., 3., 4., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.2740)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.7776,  -3.1716,  -2.0290, -14.9736,  -0.4276],
        [  1.8836,  -5.7166,  -2.6385, -18.3306,  -0.8540],
        [  2.2783,  -4.2213,  -0.4469,  -9.8287,  -0.8594],
        [ -0.2206,  -4.4783,  -4.5033, -11.5247,   3.4416]])
<class 'torch.Tensor'>
[0, 0, 0, 4]
target tensor([1., 0., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.7299)
evaluate
input tensor([[[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.2581,  -0.4183,   3.6752,  -9.9220,  -3.4346],
        [  0.2664,  -1.9276,   0.3485,  -7.1141,  -3.0077],
        [ -0.7673,  -3.4922,   0.6726, -11.4013,  -0.3774],
        [  2.0063,  -0.8557,   0.8084, -10.7697,   0.1879]])
<class 'torch.Tensor'>
[2, 2, 2, 0]
target tensor([2., 1., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.6896)
Test: [10/13]	Time 0.520 (0.513)	Loss 1.6896 (4.6702)	Accuracy 25.000 (34.091)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  5.3220,   0.7067,  -3.0743, -11.9167,  -0.1887],
        [  4.3340,  -5.7913,  -2.8955, -11.7550,  -0.5205],
        [  3.8411,  -2.3607,   1.0587, -11.0089,  -1.0485],
        [  2.1848,  -9.9647,  -2.4548, -19.6961,   0.7956]])
<class 'torch.Tensor'>
[0, 0, 0, 0]
target tensor([0., 3., 4., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.4850)
evaluate
input tensor([[[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.6346, -0.8481,  0.8775, -7.2365, -3.0802],
        [ 2.2054, -2.4984,  1.2921, -6.8149, -0.4304]])
<class 'torch.Tensor'>
[2, 0]
target tensor([0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.5756)
epoch: 40
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.4010,  -8.0656,  13.9940,  -6.2820,   2.4663],
        [  2.7343,  -6.6602,  10.7400, -10.3998,  -6.5745],
        [ -2.0404,   9.3949,  -4.2186,  -7.3563,  -1.6893],
        [  1.3050, -10.0030,  13.9704,  -8.4874,  -8.3509]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 2]
target tensor([2, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(9.3625e-05, grad_fn=<NllLossBackward0>)
Epoch: [40][0/25]	Time 1.833 (1.833)	Data 0.024 (0.024)	Loss 0.0001 (0.0001)	Accuracy 100.000 (100.000)
train
input tensor([[[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 14.7552,  -8.1491, -11.3343, -18.2401,   4.8801],
        [  9.7609, -29.4440, -15.9864, -22.2574,  57.2109],
        [ -6.5112,  14.5502,   1.0794, -13.6898,  -0.8016],
        [  7.0078,  -4.0437,  -3.2181,  -5.1471,  -2.3476]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 4, 1, 0]
target tensor([0, 4, 1, 0])
<class 'torch.Tensor'>
loss
tensor(4.9260e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.7437,  -1.8189,  -5.3924,   1.9788,  -8.8361],
        [ -4.2123,  -3.5154,   5.7322, -13.0429,   4.6720],
        [ -5.2192,  13.8892, -12.4889, -10.9975,   4.9713],
        [ 11.4493, -10.0564,  -3.1530, -13.4600, -15.7955]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 1, 0]
target tensor([3, 2, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.3630, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.3324,  -5.8334,  18.4464, -19.4070,  -5.2744],
        [  0.8731,  -0.0277,   8.0947,  -7.8196,  -4.4833],
        [  3.9235,  -2.2835,  10.2829,  -3.4211,  -1.6004],
        [  4.8113, -13.2758,  11.7211, -13.4662,  -0.3552]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0009, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,   0,  -2,  ...,   0,  -7,   1],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  1,   2,   3,  ...,   0,  -3,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,  -1,   0,  ...,  -1,   0,   4],
         [  0,  -1,   0,  ...,   0,  -3,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,  -2,  ...,   2,  -2,  -4],
         [  3,  -1,  -2,  ...,   0,   3,   4],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -7.6014,  -7.5955, -23.5718,  18.8640,  -9.0440],
        [-12.7569,  -2.8742,  23.5960, -16.8397,  -4.9700],
        [-13.2418,  -4.5119,   0.9100,   7.8431,   1.7432],
        [ -3.9897, -11.0545,  28.6159, -25.6539,   3.7162]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 3, 2]
target tensor([3, 2, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0008, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.2487,  -7.0540,  -7.9413,  10.3112,  -9.3933],
        [ -9.4910,  -3.3000,   5.7735, -15.6518,  -3.7825],
        [-12.3375, -10.8520,  -6.9249,  12.5394,   6.9166],
        [  8.5462,  -0.3844,  -8.7186,  -2.8597,  -5.0942]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 3, 0]
target tensor([3, 2, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0010, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 23.7058,   1.8072, -16.2288, -20.5907,   0.8060],
        [ -0.5880, -10.1386,  16.4167, -14.3930,   2.5665],
        [  5.0277,  -1.8506,  -5.9700,  -4.4880,  -3.7174],
        [  3.7049,   1.4446,  -3.7397, -24.8740,  29.0064]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 0, 4]
target tensor([0, 2, 0, 4])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.2056,  11.0897,  -6.6660, -14.4765,   1.6689],
        [  2.5367,   1.0504,  21.5463, -15.7211,  -7.9691],
        [ -2.8648,  -2.9135, -13.1357,  -1.7088, -10.7811],
        [ -2.1940,  15.5642,  -7.7485,  -3.5894,  -3.6531]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 3, 1]
target tensor([1, 2, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.1198, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,  -1,  -1,  ...,  -1,  -3,   3],
         [  0,   0,   0,  ...,   0,  10,  -2],
         [  2,   0,  -2,  ...,   2,   4,  -8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,  -1,   8,  -4],
         [  1,   0,   1,  ...,   6,   4,  -2],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -2,  ...,  -6,  -5,   0],
         [  1,   5,  -1,  ...,  -4,  -2,   0],
         [  3,  -2,  -2,  ...,   0,   2,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -0.4474,  -9.8560, -26.6305,  20.8611,  -8.5249],
        [ -7.8644,  31.1808,  -7.0750, -19.2450, -14.7671],
        [  0.5100, -13.4635,   0.9951, -20.3701,  -1.7000],
        [ -2.8158,   4.7207,  -7.6781,  -3.4799,  -6.3110]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 2, 1]
target tensor([3, 1, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.1304, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.2157, -15.5375,  27.5658, -17.7477, -13.1694],
        [ -9.8103,  -8.5669,   3.1456, -15.6263,  -0.3373],
        [ -1.0219,  -4.7880,  11.7710, -11.2795,   0.8348],
        [ -9.7227,  -6.2077,   3.2885,  -9.9796,  -3.4133]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0079, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.7171,   1.1136, -22.1155,  -6.4142,  19.4957],
        [ -1.7883,  13.7621,  -7.8991, -10.3971,  -4.8105],
        [  1.6201,  33.6104, -15.7376, -31.2394,  -0.3122],
        [ -0.6420,  -3.9876,  39.3932, -29.4631, -12.1010]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 1, 2]
target tensor([4, 1, 1, 2])
<class 'torch.Tensor'>
loss
tensor(2.9802e-08, grad_fn=<NllLossBackward0>)
Epoch: [40][10/25]	Time 1.702 (1.757)	Data 0.027 (0.024)	Loss 0.0000 (0.0568)	Accuracy 100.000 (97.727)
train
input tensor([[[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.3691,  -4.5359,   6.5375,   1.1164,  -5.5046],
        [-14.7889,  -0.2169,  -3.9100,  21.5686, -25.4891],
        [  1.2863,  -0.5979, -21.7069,  14.3234,   4.6801],
        [-15.1716,   1.6571,  22.1486, -31.8964,   1.1959]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 3, 2]
target tensor([2, 3, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0011, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.8873, -16.1321,  22.1859,  -6.2226,  -8.6922],
        [ -0.3511,  13.6633,  -9.2544, -12.2627,  -4.9798],
        [-11.4299,  -2.7212, -27.2435,  26.3204,  -1.7421],
        [ -6.9811,   7.8112, -16.9722,  -8.3200,  -0.2632]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 3, 1]
target tensor([2, 1, 3, 1])
<class 'torch.Tensor'>
loss
tensor(7.8159e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-13.4071,  30.9532, -17.9520, -19.9528,  -8.5235],
        [ 23.6340,  -7.3298, -20.2485, -25.5961, -11.2550],
        [ -5.6454,  17.8578,  -3.4634, -19.1129,  -7.7900],
        [ 12.7261,   0.7826,  -1.3811, -17.1204,  -0.1585]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 1, 0]
target tensor([1, 0, 1, 0])
<class 'torch.Tensor'>
loss
tensor(2.4438e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.5603,  -3.1948,  -5.8193,  12.6702, -13.3764],
        [ 14.8210,  -4.5195,  -7.2435, -10.7130, -10.5241],
        [ 18.8700,  -6.6280,  -6.4472, -10.5288,  -2.7649],
        [  6.3377,  -4.0257,  -7.5322, -14.1619, -10.6521]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 0, 0]
target tensor([3, 0, 0, 0])
<class 'torch.Tensor'>
loss
tensor(8.1657e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.7093,  27.8375,  -8.6993, -15.3499,  -8.6851],
        [-31.9795, -11.7873, -30.6265,  31.9935,  -0.5394],
        [ -5.8078,  -4.9690, -21.9349,  20.7292,  -6.1969],
        [ 12.9019, -24.1259, -17.3750, -17.0398, -19.8766]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 3, 0]
target tensor([1, 3, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 29.2516,  -2.9553, -12.8737,  -9.1648,  -3.2532],
        [ -8.9034,  -2.6932,  12.4624,   0.6625,  -7.3829],
        [  1.2555,  -5.4794,  -1.0587, -10.3860, -10.3357],
        [-12.6820,  -8.5638,   9.3633,  -4.1783,   4.1511]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 0, 2]
target tensor([0, 2, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0252, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  2,   3,   1,  ...,  -3,  -4,   0],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   0,   0,  ...,   1,  -3,   0],
         [  2,   0,   0,  ...,  -2,   5,   4],
         [  2,   0,  -2,  ...,   0,   2,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,   0,  ...,   0,  -6,  -4],
         [  5,  -1,   0,  ...,   7,   3,   0],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -1.9086,  -1.6322,   5.5820,  -2.8000,  -1.1339],
        [-13.0725,  13.9013,   0.7986,  -6.0553,  -2.8588],
        [-16.9454, -10.0348,  14.0120, -10.7669, -10.3316],
        [  7.4688,  -7.9356, -10.4058, -28.4200,  -8.8973]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 2, 0]
target tensor([2, 1, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0007, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.6379, -11.5868,  -6.4308, -17.0675,  22.7015],
        [-11.8189,  28.0853, -28.3766,  -8.2428,  -4.1649],
        [ 11.9069,   0.2792, -11.5181,  -9.7153, -29.1332],
        [ -7.4460,   7.1922,   3.5702,   4.6265,  -1.9722]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 0, 1]
target tensor([4, 1, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.0247, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.2364,  18.4882,  -7.4461,   1.0801,   1.9527],
        [ -9.2286,  -7.4628,  -9.7852, -26.3287,  44.4921],
        [-32.3404,   1.3243,  -7.9537,  18.3820, -11.4750],
        [ -1.4054, -16.7319,  -5.8102,  -4.4387,  30.6891]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 4, 3, 4]
target tensor([1, 4, 3, 4])
<class 'torch.Tensor'>
loss
tensor(2.9802e-08, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-16.1719, -14.1159,   7.1067,  -5.3933,  -6.4524],
        [-16.7076, -17.3116, -11.2532, -13.0364,  26.4298],
        [-14.8011, -17.0799,  11.1997,  -0.9036,  -5.4840],
        [-27.6017,  38.4361,  -7.1071,  -6.9160,  -3.4648]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 4, 2, 1]
target tensor([2, 4, 2, 1])
<class 'torch.Tensor'>
loss
tensor(2.6226e-06, grad_fn=<NllLossBackward0>)
Epoch: [40][20/25]	Time 1.700 (1.767)	Data 0.023 (0.023)	Loss 0.0000 (0.0322)	Accuracy 100.000 (98.810)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.3003,  25.5446, -11.7170,  -8.3719,  -5.5109],
        [-11.2092,  22.4556,  -9.4123, -14.4492,   4.5777],
        [ -9.6541,   0.6927,  15.9642,  -6.9929,  -8.9762],
        [ 14.4625, -14.2887, -22.3281, -12.1559,  -6.5026]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 0]
target tensor([1, 1, 2, 0])
<class 'torch.Tensor'>
loss
tensor(5.9605e-08, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.5675,  -7.7490, -13.2292,   4.9399,  -2.4387],
        [ -7.4998, -27.4624, -15.6189,  18.6071,  -3.6087],
        [ 11.7443,  -3.8942,  -3.1449,  -7.3999,  -2.0102],
        [-11.2002,  -5.7460, -28.3260, -19.0693,  50.3516]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 0, 4]
target tensor([3, 3, 0, 4])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-16.6719,  -3.2115,  21.1414,  -9.7723,  -8.4222],
        [ -8.8895,  18.6353, -10.9631,  -9.9153,  -3.5782],
        [ -8.4920, -19.4114, -12.3513,  33.5319, -21.9914],
        [ -2.1859,  -7.6751,   9.5446,  -4.4734,  -2.1045]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 3, 2]
target tensor([2, 1, 3, 2])
<class 'torch.Tensor'>
loss
tensor(4.4107e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.9982,  -5.4322,   7.0275,  -3.8212,  -2.4228],
        [  7.2369,  -8.1227,  -2.7674,  -5.6882,  -4.7844],
        [-15.0232,   3.4943,   9.0319,  -0.5725,  -2.4570],
        [ -1.1453,  -2.9945,  -1.9153, -13.2311,  -2.2780]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 0]
target tensor([2, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.1671, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.1665,   2.9856,   1.6110,  -4.1598,  -6.7250],
        [ -6.6659,  -2.0597,  -0.0693,  -3.4244,  -7.5556],
        [ -5.2118,  -1.8442,   1.6066,  -1.6272,  -6.0455],
        [ -8.8636,  -1.5558,  -2.2884,  -5.2609,  -3.9343]])
<class 'torch.Tensor'>
[1, 2, 2, 1]
target tensor([2., 3., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.3401)
Test: [0/13]	Time 0.480 (0.480)	Loss 2.3401 (2.3401)	Accuracy 25.000 (25.000)
evaluate
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.3188e+00,  1.3696e+00, -9.9066e-01, -2.0242e+00,  9.0888e-02],
        [-1.0828e+01, -4.7137e+00, -3.9948e+00, -8.4133e-03, -1.3339e+00],
        [-3.5602e+00,  2.8933e+00,  3.3357e+00, -4.2470e+00, -1.0826e+00],
        [-8.6033e+00, -4.0072e+00, -3.4630e+00, -6.7572e+00, -4.8154e+00]])
<class 'torch.Tensor'>
[1, 3, 2, 2]
target tensor([2., 3., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.3105)
evaluate
input tensor([[[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.2183, -0.8081,  2.1216, -3.2153, -0.0569],
        [-8.0950, -0.4852, -5.4649, -2.0506, -0.8470],
        [-5.2313, -2.5284, -2.3887,  0.7809, -6.4306],
        [-5.8024, -6.9214,  1.4555, -0.9864, -8.5678]])
<class 'torch.Tensor'>
[2, 1, 3, 2]
target tensor([2., 1., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.1292)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.6179,  -4.3669,  -6.2219,  -3.5461,  -3.8635],
        [ -5.1613,   1.2612,   3.2407,  -1.6119,  -5.0077],
        [ -4.8474,  -0.5811,  -0.6354,  -1.6373,  -2.3311],
        [ -1.1343,   1.9150,  -2.3059,  -4.4963,  -2.3587]])
<class 'torch.Tensor'>
[3, 2, 1, 1]
target tensor([2., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.9264)
evaluate
input tensor([[[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.3037,  -3.2015,  -2.0221,  -4.1061,  -4.6184],
        [ -7.8311,   0.2578,   0.9974,  -0.6658,  -5.0098],
        [ -1.5613,  -1.9428,  -0.8411,  -1.7819,  -5.1131],
        [-10.0609,  -3.2017,  -2.5852,   1.9145,  -1.6100]])
<class 'torch.Tensor'>
[2, 2, 2, 3]
target tensor([0., 0., 1., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.9773)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-8.5430, -1.4711, -3.1950, -4.2163, -3.4353],
        [-9.8622, -2.2421, -7.2657, -2.7047, -5.0598],
        [-4.0915, -5.6664,  1.5285,  1.3487, -4.2658],
        [-1.4879, -2.2382,  1.5108, -2.8639, -1.0015]])
<class 'torch.Tensor'>
[1, 1, 2, 2]
target tensor([1., 2., 3., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.4553)
evaluate
input tensor([[[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-0.7080, -6.2365,  2.2954, -6.6561, -4.4405],
        [-7.1661,  0.2317,  4.2627, -3.6052, -2.9511],
        [-8.6628,  1.1896, -5.2169, -2.1347,  1.2474],
        [-6.8753, -5.9777, -1.7233,  0.4960, -9.3411]])
<class 'torch.Tensor'>
[2, 2, 4, 3]
target tensor([0., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.1359)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.8721,  -2.5340,  -5.4877,  -4.3666,   2.3749],
        [-11.2466,  -3.5430,  -9.7066,  -4.5457,  -5.4753],
        [ -3.5432,  -4.6237,  -2.7484,  -2.2345,  -2.8695],
        [ -6.4954,  -4.6670,  -2.1071,  -2.1114,  -2.9144]])
<class 'torch.Tensor'>
[4, 1, 3, 2]
target tensor([1., 2., 3., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.3354)
evaluate
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.1760,  -2.6610,  -4.5799,  -1.4267,  -0.5943],
        [ -7.2647,  -4.7769,  -3.7911,  -3.1112,  -1.4071],
        [ -4.4638,  -6.6558,  -2.3074, -10.0559,  -3.0797],
        [ -5.1747,  -2.7237,  -3.8615,  -3.9127,  -2.5540]])
<class 'torch.Tensor'>
[4, 4, 2, 4]
target tensor([2., 0., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.1768)
evaluate
input tensor([[[  5,  -1,   0,  ...,   7,   3,   0],
         [  2,  -1,  -1,  ...,   2,   6,  -2],
         [  0,   0,  -2,  ...,  -1,   0,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   0,  -2,  ...,   2,  -4,   0],
         [  2,  -2,  -2,  ...,   6,   1,  -6],
         [  3,   0,  -1,  ...,   0,  -3,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   1,  -1,  ...,   2,  -3,  -2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,   0,   1,  ...,   2,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -3.9515,  -3.4006,  -1.5986,  -0.3041,  -4.4964],
        [-11.8722,  -1.0602,  -4.2135,  -4.5294,  -1.1161],
        [ -5.3162,  -0.7208,   0.1504,  -0.6053,  -4.1438],
        [ -8.1169,  -5.9186,  -0.9297,  -0.3925,  -0.4176]])
<class 'torch.Tensor'>
[3, 1, 2, 3]
target tensor([2., 2., 1., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.9853)
evaluate
input tensor([[[  3,   0,   0,  ...,  -3,   0,  -2],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         [  1,   2,   2,  ...,  -3,   0,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  1,   1,  -4,  ...,  -4,   2,   1],
         [  1,   0,  -2,  ...,  -1,  -1,  -9],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         [  3,  -2,   0,  ...,  -3,  -1,   8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -4.7288,  -2.8097,  -0.9007,  -1.2058,  -2.6992],
        [ -5.7502,  -1.8142,  -4.0487,  -3.5980,  -3.0670],
        [-11.1203,  -5.1562,  -6.4223,  -1.9336,   1.9502],
        [ -9.0522,  -7.4447,  -3.9385,  -7.1200,  -2.4642]])
<class 'torch.Tensor'>
[2, 1, 4, 4]
target tensor([1., 1., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.4705)
Test: [10/13]	Time 0.583 (0.524)	Loss 4.4705 (3.0221)	Accuracy 25.000 (22.727)
evaluate
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.3699,  -1.6987,   0.5181,  -1.0594,  -4.2023],
        [ -6.1306,   0.3635,   0.6706,  -1.9258,  -3.4393],
        [-10.8390,   0.2813, -10.3139,   3.1983,  -3.1200],
        [-10.4400,  -2.0527,   2.0572,   4.1161,  -1.8642]])
<class 'torch.Tensor'>
[2, 2, 3, 3]
target tensor([4., 2., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.4712)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-9.1020, -2.3045,  0.6420, -1.9601, -3.9579],
        [-3.0622, -0.2081,  1.1242, -0.7811, -5.0192]])
<class 'torch.Tensor'>
[2, 2]
target tensor([0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.1149)
epoch: 41
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.3463, -11.3551, -28.8953,  35.1768,  -4.2941],
        [-20.4695,  10.4126,  -8.9939,   8.7248,   1.5331],
        [ -2.4722,  21.0073, -10.0682,  -0.5612, -14.3648],
        [ -8.6265, -14.1672,  25.0413,  -1.6558,   0.6049]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 1, 2]
target tensor([3, 1, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0424, grad_fn=<NllLossBackward0>)
Epoch: [41][0/25]	Time 1.739 (1.739)	Data 0.030 (0.030)	Loss 0.0424 (0.0424)	Accuracy 100.000 (100.000)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.0737,  -7.8325,  14.3295,   0.9646, -18.5641],
        [ -1.8800, -28.9770, -24.2178,  -8.8920,  58.2607],
        [ 20.8473, -22.4464, -21.6109, -22.6535, -19.4677],
        [-10.4008, -15.5777,  -0.8500,  23.4025,  -5.7453]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 4, 0, 3]
target tensor([2, 4, 0, 3])
<class 'torch.Tensor'>
loss
tensor(3.8743e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.1037,  17.0229,  -8.6466,   0.8267,  -3.6845],
        [-29.5981,  25.6542,  -9.6013,  -2.6012,  -1.5611],
        [-18.2592,  38.1133, -13.3038, -26.9102,  -6.3826],
        [-18.9169,   3.6835, -22.3205,  27.7356, -17.0245]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 1, 3]
target tensor([1, 1, 1, 3])
<class 'torch.Tensor'>
loss
tensor(2.9802e-08, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.2714,  19.0899, -14.0878,  -3.8933, -13.4011],
        [-10.7218,  35.3262,  -3.9029, -10.0862, -17.9072],
        [-14.1102,  -2.2134,  -7.3179,  20.1853, -15.1414],
        [-13.6834,  -5.6995,   1.1809,  -6.1062, -21.8873]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 3, 2]
target tensor([1, 1, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0004, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.1563, -26.6711, -11.9587,  -7.5148,  28.7485],
        [ -4.4342,  17.6798,  -9.9220,  -1.7375,  -6.8516],
        [ -5.4127,  -7.6264,   6.6932,  -1.8488,  -4.2543],
        [-10.5474,   0.7315,  14.4516, -10.9079, -11.6220]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 2, 2]
target tensor([4, 1, 2, 2])
<class 'torch.Tensor'>
loss
tensor(5.4979e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.2840,  23.3163,  -4.9148,  -4.3320,  -6.2669],
        [-12.8388,   5.6664,   5.4826, -11.6040,  -7.2566],
        [  7.1038,  -7.9750,  -4.4658,  -2.0002,  -4.7080],
        [-13.2850,   1.6797,  -2.1062,  10.5466,  -3.2160]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 0, 3]
target tensor([1, 2, 0, 3])
<class 'torch.Tensor'>
loss
tensor(0.1974, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  4.7027, -11.3099, -12.4253,  -4.1587, -11.3807],
        [ -5.6419,  -4.0929, -14.4586,  25.1213,  -6.1692],
        [ -4.8924,  -6.9374,  -4.2088,  13.3954, -14.5068],
        [ -1.2381, -10.9218,  13.3786,  -1.5143,  -3.3455]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 3, 2]
target tensor([0, 3, 3, 2])
<class 'torch.Tensor'>
loss
tensor(3.5701e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.9380,  -9.9148,   9.9442,   2.9824, -14.2064],
        [ -0.8336, -13.6536, -17.7318,  -5.1278,  24.8553],
        [-10.2700,  -9.1460, -12.9670,  26.2372, -24.7349],
        [ -0.1062,  -2.7733,  -5.6380, -19.2667,  23.8817]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 4, 3, 4]
target tensor([2, 4, 3, 4])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   1,   1,  ...,   9,   3,  -2],
         [  4,  -1,   0,  ...,  -1,   2,   2],
         [ -1,   0,  -1,  ...,  -3,   8,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  6,  -3,   0,  ...,   0,   1,   0],
         [  7,  -2,   0,  ...,  -3,   7,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  6,   1,   2,  ...,  -1,   0,   1],
         [  2,  -1,  -1,  ...,   2,   6,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -2.9599,  -1.7676,   2.8994,  -1.5484,  -4.4079],
        [-18.8901,  -7.4130,  15.4245,  -1.4071,  -2.5284],
        [-12.3719,  -4.5104,  -4.3953,  16.7709, -19.1524],
        [ -5.9099, -11.6387,  16.1970,  -0.2634,  -2.2368]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 3, 2]
target tensor([2, 2, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0061, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.7654,  -6.7034,  13.6104,  -2.2230, -17.9113],
        [-14.7363,  -9.0319,  22.0751,  -8.1634,  -3.5114],
        [ -9.0006,   3.9689,  -3.9974,  -5.4460,  -9.5353],
        [-12.1274,  -5.4664,  39.5434, -40.9061,  -6.5867]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 2]
target tensor([2, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0001, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  5.6429,  -8.0987,  -5.9040, -11.6837,  -2.4719],
        [-12.1601,  29.5160, -11.9770,  -8.7744,  -9.1552],
        [  5.7256, -13.8742, -19.8151,  -5.5208,  -8.7580],
        [  4.9265,  -9.5115,  -7.0074,  -0.1929, -17.5165]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 0, 0]
target tensor([0, 1, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.0016, grad_fn=<NllLossBackward0>)
Epoch: [41][10/25]	Time 1.647 (1.731)	Data 0.009 (0.023)	Loss 0.0016 (0.0226)	Accuracy 100.000 (97.727)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  4.5312,  -4.2723,  -4.0147,  -4.7992,  21.7665],
        [ -4.6863,   7.6830,   0.5833,  -2.0344,  -8.5703],
        [ 16.3132, -18.3125,  -9.7921, -15.0892, -16.6135],
        [ -6.6325, -18.9624,  19.1443, -10.8716,  -7.4395]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 0, 2]
target tensor([4, 1, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -3,  ...,  -2,  -2,  -4],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -2,  ...,  -6,  -5,   0],
         [  1,   5,  -1,  ...,  -4,  -2,   0],
         [  3,  -2,  -2,  ...,   0,   2,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,  -2,   4,  ...,   1,  -4,   1],
         [  1,   0,   0,  ...,   3,   0,  -6],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-11.1219, -17.0699,  33.1122, -14.2884,  -2.7088],
        [ -1.1989,  -4.5089,  12.9943,  -1.8725,  -8.7482],
        [ -6.5778,  10.8917,  -5.8884,   1.3670,  -7.7912],
        [  9.0642,  -9.3342,  -3.7811, -11.8113,  -5.5522]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 0]
target tensor([2, 2, 1, 0])
<class 'torch.Tensor'>
loss
tensor(1.9311e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-14.1200,  -3.1650, -13.2294, -11.4120,  27.7222],
        [ 11.8196,  -6.3186,  -8.5382, -10.3465, -21.3895],
        [ -1.1053,  -8.5959,   8.9766,  -1.6972,  -3.0175],
        [ -8.1808, -13.2189,  20.9280,  -8.9673,  -4.8105]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 0, 2, 2]
target tensor([4, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(1.7791e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-18.9991,  -9.7231,  -0.1916,  15.0622, -16.0219],
        [ -6.0688,  -7.1485,  10.3615,  -5.2789, -12.2804],
        [  2.6684,  -4.7423,  -0.2034,  -2.3959,  -4.1160],
        [-14.9778, -17.9069,  -1.0272,  24.6456,  -7.3003]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 0, 3]
target tensor([3, 2, 0, 3])
<class 'torch.Tensor'>
loss
tensor(0.0157, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 15.8777, -10.4026,   2.7162, -20.0834, -11.3297],
        [ 17.6337, -14.6274, -13.0935,  -5.0846,  -8.2085],
        [-11.3075,  19.3916, -15.6388, -10.7108,  -6.1509],
        [ -3.4192,  11.3275,  -0.9555,  -4.5375,  -7.0546]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 1, 1]
target tensor([0, 0, 1, 1])
<class 'torch.Tensor'>
loss
tensor(1.7583e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.7251, -13.4849,   8.5609,  -2.3458,  -9.3773],
        [ -2.2045, -18.0741,   3.3238,  -2.5940, -10.9432],
        [ -6.3513,  17.7721, -23.1496, -13.4057, -12.3191],
        [ 11.3578, -19.6894,  -7.6704,  -8.8309, -10.6474]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 0]
target tensor([2, 2, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0017, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.1073, -12.6289,  10.1006, -17.7406,  -4.1673],
        [-20.5623, -26.1605,  -9.4690,  37.0850, -23.8742],
        [ 16.0147,  -6.4842,  -4.7242, -19.7381,  -8.1861],
        [ 21.6022,  -7.3325,  -3.9175, -11.5233,  -8.9629]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 0, 0]
target tensor([2, 3, 0, 0])
<class 'torch.Tensor'>
loss
tensor(1.4901e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,  -1,  -1,  ...,  -1,  -3,   3],
         [  3,  -1,  -2,  ...,   0,   3,   4],
         [  1,   1,   0,  ...,   0,   6,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   3,  -1,  ...,   0,  -3,   5],
         [  1,  -1,  -1,  ...,  -1,  -3,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   0,   2],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-11.9329, -17.0459,  -7.3860,  17.2369,  -6.6960],
        [ -6.9445,  29.3563, -22.4794, -18.8773, -26.6879],
        [ -6.0429,  -5.5122,  16.7182, -11.7685,  -5.7808],
        [-20.5601, -11.7338,  21.5311, -17.1079, -16.6101]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 2, 2]
target tensor([3, 1, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.5817,  10.4284,  -2.5657,  -9.3567,  -9.1570],
        [-10.1688, -14.1058,   6.9073,  -9.8982,  -7.7486],
        [  5.6284,  -4.5528,  -6.5191,  -1.2823,  -2.1495],
        [ -3.6391, -21.6826,  42.3603, -26.4074, -29.5873]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 0, 2]
target tensor([1, 2, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0004, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.5252, -11.0504, -14.9353,  19.5383,  -4.8432],
        [ -0.8594,  14.1104,   1.7234,  -5.3250,  -2.8977],
        [ -3.8710, -11.5012,  -6.2795,   6.6689,   3.8232],
        [ -6.5542, -16.0921, -14.5689,  12.4236, -11.3715]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 3, 3]
target tensor([3, 1, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.0141, grad_fn=<NllLossBackward0>)
Epoch: [41][20/25]	Time 1.634 (1.735)	Data 0.012 (0.023)	Loss 0.0141 (0.0134)	Accuracy 100.000 (98.810)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.4474,  10.9476,  -7.3830, -10.3689,  -9.0813],
        [  0.4307, -25.4904,  20.7925,  -8.5122,  -8.5822],
        [ 13.6051,  -4.6746,  -2.7469,  -6.9358,  -2.4520],
        [  5.8022, -12.5283,  -9.8428, -17.6812,  22.4581]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 0, 4]
target tensor([1, 2, 0, 4])
<class 'torch.Tensor'>
loss
tensor(5.9605e-08, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.0534,   6.7944,   1.3667,  -7.2799,  -5.1745],
        [ -1.8456,  -8.1517,  13.0480,  -4.5663,  -8.3861],
        [ -3.9108, -40.2433,  -0.4421, -28.3535,  65.5626],
        [ 27.4812,  -7.5399,   1.0255, -18.0626,  -8.1083]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 4, 0]
target tensor([1, 2, 4, 0])
<class 'torch.Tensor'>
loss
tensor(0.0012, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.2939,  -6.5103,  39.5349, -31.5916, -12.7138],
        [  6.6092,  -5.6095,  -3.5487,   1.3901,  -6.5360],
        [ -6.3574, -12.9617,  13.1196,  -9.3593,  -5.3412],
        [ 21.7605,  -8.1410,   1.2397,  -9.9468, -20.3630]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 0]
target tensor([2, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0014, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.6388, -13.8654,  14.5519,  -4.8407,  -6.8198],
        [ -0.6908, -10.8226,  13.4392,  -4.3637,  -4.7119],
        [ -2.9447,  13.1565,  -1.2220, -11.4487,  -9.7119],
        [-22.2380, -22.9871, -24.5582,  44.8928,   4.1694]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 3]
target tensor([2, 2, 1, 3])
<class 'torch.Tensor'>
loss
tensor(3.5763e-07, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.2810,  -6.7595,   0.6017,  -0.4011,  -8.8913],
        [ -0.3182,  -4.8696,   3.5296,  -3.7615,  -2.1951],
        [ -0.3665,  -8.3716,   4.7497,  -3.3271,  -7.3061],
        [ -2.7916, -12.0623,   1.4530,  -5.0211,  -5.2845]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 0., 4., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.1374)
Test: [0/13]	Time 0.490 (0.490)	Loss 5.1374 (5.1374)	Accuracy 25.000 (25.000)
evaluate
input tensor([[[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.7069,  -5.9579,   9.1598,  -4.9149,  -5.7611],
        [ -2.1271,  -3.6390,   6.6387,  -3.0043,  -7.1524],
        [ -2.7002, -13.8049,   4.0746,  -1.3176, -12.5355],
        [  1.5814,  -5.5192,   1.6482,  -2.4145,  -6.6212]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 2., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.9608)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.7933, -14.4605,   0.5065,  -5.5429,  -8.3561],
        [ -5.9225,  -9.8269,   0.2470,  -3.3506,  -4.5206],
        [ -4.6849,  -9.1431,   5.7244,  -3.8098,  -6.8439],
        [ -1.4900,  -8.0837,   5.7977,  -3.4192,  -8.8044]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 2., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.6137)
evaluate
input tensor([[[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.7692,  -8.1095,   1.8500,  -1.3597,  -6.7078],
        [ -3.1869,  -5.5269,   4.6753,  -2.9937,  -6.7542],
        [ -5.9830, -11.8386,  -3.8749,  -6.7005,  -9.4616],
        [ -0.8573,  -1.9906,   6.5799,  -5.1272,  -3.2191]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.0697)
evaluate
input tensor([[[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.3690, -13.7331,   2.1042, -11.1047,  -6.8082],
        [ -0.6181, -10.3108,   1.5148,  -5.9320,  -5.7349],
        [ -4.3003, -11.1344,  -0.2221,  -4.9968,  -8.8446],
        [ -3.0983,  -8.0898,   0.4921,  -4.4752,  -4.3231]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 0., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.3623)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.8478,  -5.1887,   7.7376,  -6.6423, -10.1855],
        [  2.2225,  -2.9398,   0.6793,  -5.6978,  -5.3075],
        [ -2.9326,  -4.5306,   2.5632,  -1.4503,  -6.0828],
        [ -0.9680,  -8.5934,   3.2264,  -2.0963,  -5.1818]])
<class 'torch.Tensor'>
[2, 0, 2, 2]
target tensor([2., 0., 1., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.7889)
evaluate
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [  7,  -1,  -1,  ...,   0,   5,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   3,   1,  -6],
         [  1,  -1,  -1,  ...,  -2,   0,   1],
         [  1,  -1,  -1,  ...,  -1,  -3,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -2,  ...,  -6,  -5,   0],
         [  0,   2,   2,  ...,   0,   0,   2],
         [  4,   0,   0,  ...,   7,   3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -2.1277, -12.5533,   2.8996,  -4.1004,  -5.7066],
        [  2.1926,  -8.4207,   1.8500,  -6.1435,  -8.1267],
        [ -0.0719,  -4.6056,   4.4792,  -1.8749,  -6.7608],
        [ -1.4886,  -7.6047,   0.4454,  -5.5544,  -6.2017]])
<class 'torch.Tensor'>
[2, 0, 2, 2]
target tensor([3., 0., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.9363)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.7009, -15.6343,   2.1895,  -9.3758,  -6.6410],
        [ -1.2043, -13.8613,   6.8575,  -3.4545, -11.7312],
        [ -6.1229,  -8.4938,  -3.0542,   0.3841,  -7.3975],
        [ -4.3144,  -9.0174,   3.5829,  -7.3279,  -7.6410]])
<class 'torch.Tensor'>
[2, 2, 3, 2]
target tensor([2., 1., 0., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(9.5435)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.5457,  -5.6749,  -0.2653,  -4.1832,  -2.0946],
        [ -1.1831,  -2.2362,   1.1535,  -2.9718,  -1.6927],
        [  0.0866, -10.6152,   1.1480,  -3.5864,  -5.6028],
        [  3.0608, -11.1043,   5.4262,  -8.5078,  -6.8406]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 2., 3., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.9654)
evaluate
input tensor([[[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.7788, -12.4703,   3.4986,  -2.2538,  -3.4130],
        [ -0.9502,  -6.4549,   5.9883,  -4.7278,  -2.5050],
        [ -4.6538, -11.1882,   0.5904,  -7.6735,  -2.0641],
        [ -5.6155, -11.9157,   1.7797,  -3.1002,  -5.0757]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([4., 2., 1., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.9146)
evaluate
input tensor([[[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  5,  -1,   0,  ...,   7,   3,   0],
         [  5,   0,   0,  ...,   6,  -1,   7],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   0,   1,  ...,   0,  -2,   4],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         [  5,   0,  -1,  ...,  -2,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -2,  ...,  -4,   5,  -5],
         [  3,  -1,   0,  ...,  -1,   0,   4],
         [  0,   0,   0,  ...,   0,   0,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -6.1745,  -9.8400,   3.6903,  -7.4946,  -5.2171],
        [ -2.5060,  -9.3743,   4.8823,  -5.2244, -10.1665],
        [ -0.3743, -10.5243,   5.7421,  -0.1099,  -6.4366],
        [ -6.6867,  -7.9531,   6.6321,   2.7779,  -4.4395]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 3., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.9964)
Test: [10/13]	Time 0.569 (0.512)	Loss 3.9964 (3.9354)	Accuracy 50.000 (50.000)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.0151,  -9.6204,   2.1385,  -6.7901,  -6.7601],
        [ -5.5815, -13.2582,   0.3026,  -3.8735,  -2.5056],
        [ -4.7772,  -4.6198,   4.7168,  -2.1969,  -6.9984],
        [ -5.5428, -11.4652,   3.3399,  -0.1716,  -4.8664]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 0., 0., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(8.8640)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.7124,  -5.4295,   3.1436,  -3.2266,  -5.1357],
        [ -3.4407, -13.5118,   2.7936,  -8.3574,  -8.7057]])
<class 'torch.Tensor'>
[2, 2]
target tensor([2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.1296)
epoch: 42
train
input tensor([[[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.9371,  10.4427,   6.5736,  -1.8353,  -6.4939],
        [ -3.2164,   5.8351,  -6.4343,   0.9854, -11.2367],
        [  8.0754, -11.2559, -13.1000,  -1.0912,  -7.9668],
        [ -5.7063,  11.7096,  -6.5474,  -8.8135,   2.2747]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 0, 1]
target tensor([1, 1, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.0072, grad_fn=<NllLossBackward0>)
Epoch: [42][0/25]	Time 1.812 (1.812)	Data 0.024 (0.024)	Loss 0.0072 (0.0072)	Accuracy 100.000 (100.000)
train
input tensor([[[  3,   0,   0,  ...,  -4,   3,  -1],
         [  6,  -3,   0,  ...,   0,   1,   3],
         [ 10,  -5,   1,  ...,  -1,   1,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -2,  ...,  -4,   5,  -5],
         [  3,  -2,   0,  ...,  -3,  -1,   8],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   5,   1,  ...,   1,   2,   0],
         [  2,   3,   0,  ...,   2,  -1,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -2.5976,  -5.0252,   6.7829, -26.1054,  28.4677],
        [-14.9291, -23.9681,  32.5793, -16.4509,  -4.4514],
        [ -0.4379,  -9.7454,  15.1600,  -2.9302, -10.8357],
        [ 13.6732,  -6.0478,  -2.7772, -10.0696,  -9.9688]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 2, 0]
target tensor([4, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(5.9605e-08, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.6781,  -6.5165,  12.0773,   0.6426, -11.2793],
        [ -4.6682,  -8.6488,  -0.5191,  28.8428, -19.9348],
        [ -8.0574, -17.9223,  17.6083,  -4.5338,  -7.2766],
        [-17.7343, -15.0974, -14.0937,  33.7399, -10.3489]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 2, 3]
target tensor([2, 3, 2, 3])
<class 'torch.Tensor'>
loss
tensor(2.7120e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.9793, -15.9262,  -1.9750,  -2.2752, -19.9916],
        [ -7.9437, -19.4506,  19.2413, -12.6901, -24.2523],
        [-10.0798, -26.8407,  10.0749,  20.8884, -19.4139],
        [ 26.2817,  -9.8176,  -8.5486, -15.2297,   1.9968]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 3, 0]
target tensor([0, 2, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0031, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-28.3996,  -7.5963,   0.1699,  17.8030, -11.8641],
        [ -7.7362, -12.3724,  12.9552,  -8.3299,  -6.6951],
        [ 12.7758, -14.2051,  -0.4740, -12.6450,  -7.7593],
        [ -4.5459,  13.2641,  -0.7560,  -2.4338,  -3.3301]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 0, 1]
target tensor([3, 2, 0, 1])
<class 'torch.Tensor'>
loss
tensor(7.1526e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,  -1,  -2,  ...,   3,   3,   0],
         [  2,  -1,  -2,  ...,   2,   4,  -2],
         [  1,  -1,  -1,  ...,  -2,   0,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   1,   0,  ...,   0,  -1,   0],
         [  1,   0,   0,  ...,   2,   1,   3],
         [  3,   0,   1,  ...,   2,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,  -1,   0,  ...,  -1,   0,   4],
         [  0,  -1,   0,  ...,   0,  -3,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -2.6089, -21.0853,  18.2079,  -2.1325,  -7.1379],
        [-12.0971, -11.7706,  20.5903,  -6.4257, -12.6723],
        [-10.5203,  -3.5179,  32.2398, -15.9344,  -5.2812],
        [ -2.3915,  -2.1420,   8.5339,  -1.7483,  -3.2766]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(2.0682e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.1083, -27.4559,  27.7311,  -8.0777,  -5.5856],
        [ -4.7025, -10.4861,  17.7061, -13.4537, -10.9548],
        [ -9.4235,  32.2168,   4.2144, -25.1657,   4.5605],
        [  4.1112,   5.1090,  -8.4048, -17.7259,  -3.9520]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 1]
target tensor([2, 2, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0785, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.0284,   7.4549,  -3.5803,  -5.6506,   0.8233],
        [ -6.1878, -21.3794,  13.9614,   4.3441, -17.2342],
        [ -1.8059,  20.2632,   0.5839, -13.3246,  -5.1543],
        [ -0.7497, -33.7179,  -9.6376, -24.7968,  57.2267]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 1, 4]
target tensor([1, 2, 1, 4])
<class 'torch.Tensor'>
loss
tensor(0.0004, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.7103,  -3.8328,  -6.2618,  20.1903, -15.4944],
        [ -3.5163,   2.8437,  -3.0616,  -3.6440,  -3.2637],
        [ 11.4367, -11.6092,   0.3981, -16.4283,  -5.6017],
        [ 23.7423,  -8.5189,  -6.0885, -12.0038,   0.6478]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 0, 0]
target tensor([3, 1, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.0020, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.6373, -20.6202,  20.8288, -20.1429, -20.6364],
        [ -8.9394,   9.8362,  -7.5385,  -5.2534, -16.2414],
        [ -5.5229,  -5.5380,  16.1867, -10.1707, -21.9359],
        [ -5.9675, -13.8552, -21.5061,  29.9289,  -9.9690]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 2, 3]
target tensor([2, 1, 2, 3])
<class 'torch.Tensor'>
loss
tensor(5.9605e-08, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.4045, -40.4361,  42.2610, -14.1195,  -9.9784],
        [ -5.5064,  17.6395,   6.8563, -11.2944,  -6.7952],
        [-11.7484,  26.7554, -16.7380,  -5.6249, -10.4474],
        [ -2.7630, -19.8214,  -5.4780, -35.1540,  67.9234]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 1, 4]
target tensor([2, 1, 1, 4])
<class 'torch.Tensor'>
loss
tensor(5.1856e-06, grad_fn=<NllLossBackward0>)
Epoch: [42][10/25]	Time 1.777 (1.734)	Data 0.027 (0.019)	Loss 0.0000 (0.0083)	Accuracy 100.000 (100.000)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.5334,  10.6584,   2.2908,  -3.1886,  -7.0954],
        [ -5.9386, -12.9223,  -6.7954,  18.2540, -15.2442],
        [ 12.7183, -18.2090,   1.2310,  -5.2434,  -6.1587],
        [ -3.2040, -11.0369,  18.0536, -10.9571,  -6.3831]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 0, 2]
target tensor([1, 3, 0, 2])
<class 'torch.Tensor'>
loss
tensor(6.0909e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.9889, -17.4317,  27.6535,   3.2995, -19.5038],
        [ -5.4654,  19.5336,  -8.9922,  -6.8097,  -0.4417],
        [  1.4484, -13.5927,  -3.7001,  -4.0298,  22.7496],
        [  7.0557,  -0.5418,  -2.1758, -13.3979, -26.0717]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 4, 0]
target tensor([2, 1, 4, 0])
<class 'torch.Tensor'>
loss
tensor(0.0001, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.8400, -17.3916,  -2.2685,  19.3290, -17.9941],
        [  9.3945,  -4.5860,  -0.9910,  -2.1238, -16.6351],
        [ 23.8671,  -7.9224,  -8.7106,  -6.9762, -11.1617],
        [ -9.9843,  15.3569,  -3.2413,  -8.4705,  -8.3956]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 0, 1]
target tensor([3, 0, 0, 1])
<class 'torch.Tensor'>
loss
tensor(1.0401e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.3080, -25.7928,  -2.7166,  22.4951, -21.6426],
        [-10.1301, -10.6360,  31.5525,  -6.4554, -11.3557],
        [ -7.4597, -15.8535,  26.0369,  -1.0174, -14.8760],
        [ -3.0785,  -5.0020,   8.8031,  -4.4410,  -8.6184]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 2, 2]
target tensor([3, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(2.4140e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  8.2201, -24.4582,  -0.2477,  -5.6504,  31.7693],
        [  9.9243, -23.7406,  -1.7785, -17.9899, -18.3271],
        [ -4.3989,   6.6964,   6.3396,  -2.3873,  -9.3346],
        [-19.7876, -18.4565,  -9.7541,  25.9274, -11.3224]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 0, 1, 3]
target tensor([4, 0, 1, 3])
<class 'torch.Tensor'>
loss
tensor(0.1327, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 23.7441,  -6.3672, -18.1368,  -6.3736, -10.9189],
        [ 10.4009,  -4.5700,  -4.6680,  -6.1625, -11.2305],
        [ -5.9654,  -9.2768,  17.9855,  -9.0290, -12.5783],
        [-17.5363, -24.1065,   1.1774,  31.2199, -17.7501]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 2, 3]
target tensor([0, 0, 2, 3])
<class 'torch.Tensor'>
loss
tensor(1.7881e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.1861, -11.9783,  18.9965,  -2.6245,  -0.6014],
        [-16.9804,  16.7811, -10.4571,  -3.4354,  -9.8560],
        [-14.5289,  17.6041,   7.0445, -14.5318,  -7.9364],
        [ -4.4917,  -9.5833,  -8.7149,   7.5682, -12.4085]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 1, 3]
target tensor([2, 1, 1, 3])
<class 'torch.Tensor'>
loss
tensor(7.9869e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.7670,  12.1532,  -0.7065,   5.3424,  -9.2858],
        [ -8.6469,  15.9547,  -6.5243,  -9.1007,  -6.4897],
        [  4.0701,  -5.2936,  -1.7575,  -4.3611,  -4.9348],
        [-13.1160,  15.3757,  -9.4832,  -6.8536,  -2.8636]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 0, 1]
target tensor([1, 1, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.0011, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.9854,  -6.9495,  11.6297,  -3.5738, -11.2298],
        [ -9.7784,  -7.1080,  -8.9450,   6.3800, -11.3203],
        [  1.3501,  -4.5772,  -6.0318,   3.6482,  -5.9633],
        [ 14.2100,  -4.3958,  -0.4311,  -7.5193,  -4.1164]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 3, 0]
target tensor([2, 3, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.5986, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.7546,  -7.7395,  -2.3434,   5.5534,  -9.7319],
        [ -4.2856,  -4.6921,  -8.3168, -19.6478,  17.8340],
        [ -3.2840,  -3.1067,  13.0953,   0.7924,  -6.7245],
        [ -6.2356,  -6.2265,   8.4188,  -4.3714, -10.0960]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 4, 2, 2]
target tensor([3, 4, 2, 2])
<class 'torch.Tensor'>
loss
tensor(9.5529e-05, grad_fn=<NllLossBackward0>)
Epoch: [42][20/25]	Time 1.674 (1.729)	Data 0.027 (0.021)	Loss 0.0001 (0.0392)	Accuracy 100.000 (98.810)
train
input tensor([[[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.7785,  -7.3468,  10.6562,  -7.0555, -12.2546],
        [-15.9832,  -8.9320, -23.8289,  32.3210, -11.7153],
        [-12.1008,  -2.9453,   6.1607,  10.6386,  -1.7493],
        [-20.8032,  38.1210,   1.1779,  -9.1385, -25.4781]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 3, 1]
target tensor([2, 3, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.0028, grad_fn=<NllLossBackward0>)
train
input tensor([[[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   0,   0,  ...,   3,   0,  -5],
         [  2,  -2,  -2,  ...,   6,   1,  -6],
         [  3,   1,  -1,  ...,  -2,  -2,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -2,  ...,   0,  -3,   0],
         [ 11,  -5,   2,  ...,  -3,   6,   3],
         [  6,  -4,  -1,  ...,   0,   0,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,  -1,  ...,  -1,  -3,   3],
         [  2,   0,   0,  ...,  -1,  -2,   2],
         [  2,   0,  -1,  ...,   1,  -2,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -8.4157, -10.9722,  24.3697, -21.6490,  -1.3174],
        [-10.7968,  -1.6428,  21.7820, -22.5402, -15.6888],
        [ 14.2308,  -7.7871,  11.5409,  -2.9142,  -5.8760],
        [  9.9844,  -9.0264,  -3.7373,  -3.2621,  -5.9526]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 0, 0]
target tensor([2, 2, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.0164, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.6118, -23.8492,   3.1595, -12.5480,  25.2042],
        [ -8.5779,  -5.2181,  -5.0142, -30.5371,  19.8255],
        [ -8.5018,  -3.6005,  42.7724, -25.6465, -18.2419],
        [-18.8125,   0.2286,  39.8785, -39.7604, -13.1996]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 4, 2, 2]
target tensor([4, 4, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 13.4473, -13.2905, -13.3210,  -9.4665, -30.1124],
        [-17.7454,  -6.1506,   7.2148,  13.9951,  -8.9428],
        [-13.5672,  -2.1001,  10.1368, -11.3723, -13.8825],
        [-14.6839, -13.7555,  10.2607, -13.7490, -15.7028]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 2, 2]
target tensor([0, 3, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   3,   1,  ...,  -3,  -4,   0],
         [  2,  -2,  -2,  ...,   6,   1,  -6],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  1,   0,  -1,  ...,   4,   4,   1],
         [  1,   2,  -2,  ...,  -4,   3,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   3,   1,  -6],
         [  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   0,   0,  ...,   3,   0,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -2.8499,  -0.5990,  -1.2723,  -7.4901,  -6.8986],
        [ -1.7118,  -6.0525,  -0.6353, -13.2833,  -7.3976],
        [ -2.2026,  -1.3481,   3.1251,  -5.0711,  -8.9753],
        [ -0.1905,  -1.6689,   2.2246,  -4.9629,  -2.5905]])
<class 'torch.Tensor'>
[1, 2, 2, 2]
target tensor([1., 0., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.0997)
Test: [0/13]	Time 0.475 (0.475)	Loss 1.0997 (1.0997)	Accuracy 50.000 (50.000)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.5958,   0.9274,   0.6088,  -4.8396,  -5.3556],
        [ -3.8900,  -4.4300,   0.6823,  -3.9057, -13.2908],
        [ -7.0075,  -0.4814,  -3.2632,  -7.5284,  -9.2031],
        [ -7.8805,   2.6960,   4.5297,  -8.5123, -10.6950]])
<class 'torch.Tensor'>
[1, 2, 1, 2]
target tensor([2., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.9830)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.5932, -0.9976, -0.6181, -8.6633, -7.1012],
        [-6.8669, -0.7869, -2.6667, -9.9367, -2.4967],
        [-8.3716,  1.5992, -6.8035, -2.3244, -8.0475],
        [-0.7550, -4.2159, -0.9475, -5.7092, -5.9357]])
<class 'torch.Tensor'>
[2, 1, 1, 0]
target tensor([1., 1., 0., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.1932)
evaluate
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-0.2414,  0.5229,  2.0064, -3.8143, -7.1415],
        [-7.5910, -2.0721,  3.9888,  1.4711, -5.4284],
        [-6.8197, -3.3844,  0.2367, -2.3466, -5.6775],
        [-2.1219, -2.2074, -1.1127, -8.0629, -6.0561]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 2., 4., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.9820)
evaluate
input tensor([[[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.1946,  -4.6220,   3.7710,  -1.7848,  -6.9159],
        [ -6.9806,  -1.8896,  -2.2020,  -5.3108,  -5.0796],
        [ -6.0612,  -3.4631,  -0.4571, -10.8337,  -9.5856],
        [ -4.0915,  -3.4186,  -1.5241,  -7.3617,  -5.5877]])
<class 'torch.Tensor'>
[2, 1, 2, 2]
target tensor([3., 2., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.7295)
evaluate
input tensor([[[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.2053,   2.3591,   4.4670,  -4.2580,  -7.9554],
        [ -1.6305,   1.7779,  -0.8772,  -4.1418,  -1.6711],
        [ -1.0685,  -2.9913,   0.0986,  -3.3876,  -6.7648],
        [ -3.5076,  -2.4334,   2.4578,  -7.2580, -10.1013]])
<class 'torch.Tensor'>
[2, 1, 2, 2]
target tensor([2., 2., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.2384)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.0509, -4.6833,  0.5799, -6.3210, -5.8519],
        [-5.2816,  0.4298,  2.5122, -3.3572, -7.0371],
        [-1.3304,  2.0361,  4.8059, -6.3169, -3.4648],
        [-4.7836, -5.6240,  1.4547, -3.9785, -3.6050]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([3., 0., 2., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.9962)
evaluate
input tensor([[[  0,   0,   0,  ...,   3,   1,  -6],
         [  1,  -1,  -1,  ...,  -2,   0,   1],
         [  1,  -1,  -1,  ...,  -1,  -3,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   3,  -2,  ...,   1,   3,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  0,   0,  -3,  ...,   5,   0,  -5],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ 0.8744, -1.4171, -0.4984, -8.0501, -8.2889],
        [-5.0657,  0.9841,  6.5828, -6.1404, -6.0546],
        [-6.0389, -2.1421,  2.8257, -6.0347, -7.3518],
        [-8.9116,  0.7654, -0.0505, -9.7071, -5.3106]])
<class 'torch.Tensor'>
[0, 2, 2, 1]
target tensor([0., 2., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.5907)
evaluate
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.0412,  0.6881,  2.4186, -4.3579, -7.6360],
        [-1.9617, -2.6172,  1.5697, -3.7957, -5.3890],
        [ 2.1266, -5.3640,  3.6302, -9.9583, -7.2926],
        [-6.8046,  2.8246, -2.6886, -6.2556, -2.7755]])
<class 'torch.Tensor'>
[2, 2, 2, 1]
target tensor([2., 1., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.9067)
evaluate
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.3541,  -1.2814,   2.1107,  -5.6014,  -8.0861],
        [ -1.9857,  -0.6916,   3.4883,  -5.6317,  -2.8726],
        [ -5.5469,   1.2477,  -2.1394,  -6.8740,  -4.9327],
        [ -2.5291,  -5.1722,   4.5006,  -6.0894, -12.3340]])
<class 'torch.Tensor'>
[2, 2, 1, 2]
target tensor([4., 2., 1., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.9979)
evaluate
input tensor([[[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.5325,   0.9502,   0.3393,  -9.4312,  -7.7728],
        [  1.8221,   2.3191,  -0.9243,  -6.9103,  -5.6633],
        [ -6.4715,  -5.8101,  -0.7766, -11.2346,  -6.7370],
        [ -2.0914,  -1.2507,  -1.0993,  -2.0455,  -9.2655]])
<class 'torch.Tensor'>
[1, 1, 2, 2]
target tensor([3., 0., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.1968)
Test: [10/13]	Time 0.516 (0.514)	Loss 3.1968 (3.0831)	Accuracy 50.000 (38.636)
evaluate
input tensor([[[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.9013,  -3.1610,  -0.8053,  -5.6239,  -5.2928],
        [ -6.5593,  -3.3331,  -6.5760,  -9.2417, -10.0348],
        [  1.3913,  -2.0989,   0.4328,  -3.5713,  -6.5510],
        [ -3.4329,  -0.2058,   0.9682,  -2.7993,  -6.4875]])
<class 'torch.Tensor'>
[2, 1, 0, 2]
target tensor([3., 2., 1., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.3909)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-6.9607, -4.4973, -2.4522, -7.4118, -8.4563],
        [-8.6953, -3.3769, -2.1215, -6.5597, -2.4977]])
<class 'torch.Tensor'>
[2, 2]
target tensor([2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.6995)
epoch: 43
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 10.4900,  -6.3541,  -8.0021,  -7.0681, -19.4780],
        [ -4.8682, -15.6113,  22.4064,  -6.5358,  -9.2248],
        [ -8.0814,  -6.1088, -10.9685,  13.9241, -21.1742],
        [ -6.8926, -35.8025,  -5.7874, -13.1731,  34.8523]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 3, 4]
target tensor([0, 2, 3, 4])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
Epoch: [43][0/25]	Time 1.799 (1.799)	Data 0.024 (0.024)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
train
input tensor([[[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   4,   0,  ...,   0,   0,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   0,   0,  ...,  -4,   3,  -1],
         [  3,   0,   0,  ...,   0,  -1,   5],
         [  2,   0,  -1,  ...,   2,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  0,  -1,  -4,  ...,  -6,   0,  -1],
         [  2,  -1,   0,  ...,   0,   5,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  8.1859,  -7.5144,   1.2281,  -9.3588, -20.8649],
        [-17.3859,  -0.4019,  42.9369, -31.0159, -12.7149],
        [-21.8732,  29.9645, -10.9715, -13.0804, -13.6188],
        [ -8.5802, -12.6421,  15.5093, -25.6322,  -9.5074]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 1, 2]
target tensor([0, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 31.7687,  -8.2222, -12.7844, -17.2002,   1.5540],
        [ 17.3876,  -4.4337,  -2.7694, -14.7613,  -5.9189],
        [-24.3674,  -7.6555,  -4.7337,  17.6201,  -6.8292],
        [  5.6063,  -9.4815, -15.3848, -12.9690,  15.5442]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 3, 4]
target tensor([0, 0, 3, 4])
<class 'torch.Tensor'>
loss
tensor(1.2070e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 13.3158, -10.2345, -16.3226, -25.1852,  -7.3074],
        [ 17.3277,  -1.9616,  -8.2982, -16.1171,  -7.5124],
        [  5.2379, -20.8837,  -7.1526, -12.3616,  27.1686],
        [ -5.9144,  20.8607,  -9.1741, -12.3362,  -0.1377]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 4, 1]
target tensor([0, 0, 4, 1])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.8440,  23.7370,  -5.0665, -13.7728, -15.5930],
        [ -8.9236,  -9.0157,  36.2767, -27.3362,  -3.4466],
        [ -8.4990,  -7.3401, -15.6994,  -7.9188,  15.6458],
        [ 21.3287,  -4.1570,  -7.6893,  -7.9083,  -4.1266]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 4, 0]
target tensor([1, 2, 4, 0])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.9675, -14.8322, -16.2799,  18.0217, -12.4143],
        [ -5.1174,  14.5263,  -2.3151, -18.9604,  -5.8086],
        [ -0.9586, -12.7809, -12.9470, -26.6114,  55.1356],
        [ -7.4090,  16.3332,  -6.2931,  -5.4556,  -7.6981]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 4, 1]
target tensor([3, 1, 4, 1])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[  5,  -1,   0,  ...,   7,   3,   0],
         [  2,   0,   0,  ...,   7,   0,  -1],
         [  3,   0,   0,  ...,   1,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   0,   1,  ...,   1,   3,   0],
         [ 11,  -5,   2,  ...,  -3,   6,   3],
         [  2,   0,  -1,  ...,  -3,   2,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -2,  ...,  -4,   5,  -5],
         [  3,  -2,   0,  ...,  -3,  -1,   8],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -2.9155,  -1.9375,  13.6303, -10.4898,  -9.0529],
        [-16.5981,  -7.7971, -27.7158,  17.6827, -13.8292],
        [  0.2674,  -1.7790,   6.5625,  -3.4448,  -2.9764],
        [ -5.1212,  -5.7901,   7.5121,  -6.0233,  -6.6211]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 2, 2]
target tensor([2, 3, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0006, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   0,   3,  ...,   2,   2,   2],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,  -1,  ...,  -1,  -3,   3],
         [  0,  -1,  -6,  ...,  -4,   0,  -8],
         [  4,  -1,   1,  ...,   6,  -4,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   5,   1,  ...,   1,   2,   0],
         [  2,   3,   0,  ...,   2,  -1,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-18.6380,  -6.0622,  32.4246, -13.1073,  -5.4395],
        [ 32.7632, -10.4923, -25.7550, -19.8715, -24.4493],
        [ -0.6074, -20.3250,  11.1412, -17.1739, -18.8857],
        [ 19.6999,  -8.3532, -12.3487, -11.9788, -20.0328]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 0]
target tensor([2, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(1.9669e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-16.4112,  -6.0493, -23.2471,  42.0733, -13.6282],
        [ 12.3953,   0.4406, -10.3448,  -4.8510,  -5.3234],
        [  6.5785,  -4.1234,  -4.6765,  -6.8496,  -3.7315],
        [ -7.0354, -16.2839,  -6.9534,  10.2654, -20.7290]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 0, 3]
target tensor([3, 0, 0, 3])
<class 'torch.Tensor'>
loss
tensor(1.9192e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 26.3420,   2.0890, -16.3244, -14.1632, -18.7994],
        [ -2.0551,   1.8956,  20.3142, -10.7177,  -3.5855],
        [ 14.5481,  -6.7549,   1.6182, -15.6491,  -8.4368],
        [ -7.0526,  -5.4120,  10.8704,  -5.3827,  -5.4682]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 0, 2]
target tensor([0, 2, 0, 2])
<class 'torch.Tensor'>
loss
tensor(6.8545e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.8898,   6.6762,  20.2174,  -9.6661,  -6.3723],
        [ -6.1649,  17.7304, -12.6814, -14.7120,  -2.1159],
        [  0.1816,   9.5433,  -6.4082,  -5.3986, -12.8697],
        [-10.7189,  -2.4326,  35.6533, -23.5674, -27.2581]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 1, 2]
target tensor([2, 1, 1, 2])
<class 'torch.Tensor'>
loss
tensor(2.1934e-05, grad_fn=<NllLossBackward0>)
Epoch: [43][10/25]	Time 1.681 (1.741)	Data 0.028 (0.026)	Loss 0.0000 (0.0001)	Accuracy 100.000 (100.000)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-13.5582,  -5.9323, -12.1263, -23.9608,  30.4306],
        [-11.4971,  27.5032,  -7.0244,  -8.8577, -10.5515],
        [ -7.9926,  -7.4135,  14.2964,  -7.3743, -12.9555],
        [  0.0838,  -1.7426,   9.7662,  -2.6299,  -4.6676]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 2, 2]
target tensor([4, 1, 2, 2])
<class 'torch.Tensor'>
loss
tensor(1.9281e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.9247, -10.9213, -15.2664,  18.6500, -17.2302],
        [ -3.5256,   2.0229,   5.6571, -10.2143,  -2.2190],
        [ -5.1233,  -4.4077,  12.6839,  -4.6949,  -9.1984],
        [ -8.7931,   0.7593, -12.4090,   9.1913, -15.5215]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 2, 3]
target tensor([3, 2, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0067, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 12.0894,   0.6022,  -4.3506, -10.1654,  -4.8983],
        [ -5.5777,  -7.4886,  16.0631, -15.7444,  -8.7909],
        [ 13.2603,  -3.1375,  -4.7087, -15.7074,  -6.2780],
        [ -0.2497,  -5.2666,  14.6031,  -7.5563,  -2.5039]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 0, 2]
target tensor([0, 2, 0, 2])
<class 'torch.Tensor'>
loss
tensor(2.7120e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.5741,  13.9834,   2.2438,  -5.5922,  -5.1561],
        [ -4.6917,  26.6219,  -6.4031,  -7.1007,  -6.2776],
        [ -5.7228,  -1.6520,  11.9501,  -9.7829, -16.8397],
        [  2.8978,  -6.8384,  16.9461, -19.4803, -12.6062]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 2]
target tensor([1, 1, 2, 2])
<class 'torch.Tensor'>
loss
tensor(2.5630e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.9345,  -5.8108,  -5.5144,   6.1421, -13.3444],
        [ 14.2282,  -6.5773,  -4.2035, -10.2625,  -4.0365],
        [-16.1222,  -2.5210, -16.2191,  23.4466,  -3.7441],
        [ -6.5387,  -0.7818,  -8.2176,  14.2740, -16.6301]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 3, 3]
target tensor([3, 0, 3, 3])
<class 'torch.Tensor'>
loss
tensor(4.3511e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.1781,  38.8683,  -6.8513, -25.5213,  -5.5265],
        [ -3.3519,  14.7913,  -7.8701,  -7.4804,  -6.8228],
        [ -0.3047, -10.8692,   0.6091,  -4.0983, -11.6169],
        [-12.2511,  22.5169, -12.3956, -13.6221,  -8.8411]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 1]
target tensor([1, 1, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0859, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.1388,  11.9818,  -9.0176,  -8.1104,  -7.4102],
        [ -7.9307,  -8.0598, -29.9457,  31.1319,  -4.1715],
        [ -5.5730,  -1.7104,   4.9553, -12.8268,  -7.5716],
        [ 18.3775,  -2.6142, -14.0006,  -8.5799,  -5.9541]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 2, 0]
target tensor([1, 3, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.8192,  -2.8162,  16.0341, -15.2362, -10.4700],
        [ -1.6488,  24.6986, -11.7854, -14.4700,  -7.4491],
        [  1.4252,  10.8747,  -6.1088,  -7.9964,  -3.6257],
        [ -7.8810, -25.5346,  25.9386, -18.0877,  -9.4478]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 1, 2]
target tensor([2, 1, 1, 2])
<class 'torch.Tensor'>
loss
tensor(1.9788e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.5688,  -9.8820,  19.4008,  -4.3875, -11.5573],
        [ -7.9982,  -5.6404,  27.0641, -19.7113,  -0.4787],
        [ 19.5826,  -0.4661,  -6.4762, -23.1848,  -7.9526],
        [ -1.5664,  16.6349,  -3.5264, -12.3622,  -4.0100]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 0, 1]
target tensor([2, 2, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.1596,  28.6757, -14.4731,  -6.8408,  -9.5047],
        [ -3.0750,  10.4859,  -0.7197,  -4.7867, -11.8061],
        [-15.4791, -14.9650,  -3.3175,  29.7063, -25.3971],
        [-10.4392, -19.3420, -22.5070, -20.9478,  41.1334]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 3, 4]
target tensor([1, 1, 3, 4])
<class 'torch.Tensor'>
loss
tensor(3.7849e-06, grad_fn=<NllLossBackward0>)
Epoch: [43][20/25]	Time 1.695 (1.743)	Data 0.015 (0.024)	Loss 0.0000 (0.0045)	Accuracy 100.000 (100.000)
train
input tensor([[[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 17.0730, -22.0294,  -0.1844, -19.2241, -32.6518],
        [ -8.9826,  -3.9298,  15.6968,  -4.7355,  -7.9434],
        [-17.2524,  -4.7530,  19.9837, -19.7460, -15.1685],
        [ -0.8820,  -6.5988,  10.0454,  -7.8927, -10.2033]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 2]
target tensor([0, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(4.5001e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.1841,  -3.7368,  -0.2550, -23.1899,  22.1563],
        [-10.0395,  -5.6606,  -7.4885,   6.0741, -15.2499],
        [ 10.7013,   3.1561,  -7.1872, -12.7078, -23.4097],
        [ -8.3143,  -2.7433,   0.4503,   5.3824,  -2.2200]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 3, 0, 3]
target tensor([4, 3, 0, 3])
<class 'torch.Tensor'>
loss
tensor(0.0021, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.9305,  -1.1331,   1.7206,  11.5190, -27.7559],
        [-15.3851,  40.7139, -20.4327, -16.7183, -31.4842],
        [ -6.0992,  -6.5963, -10.5302,  12.9268,  -7.0363],
        [ -1.3984,  -0.7558,   0.8007,  -9.5857,  -8.4675]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 3, 2]
target tensor([3, 1, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.4589, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.6269,  -2.1369,   3.6403,  -8.8021,  -6.6761],
        [ -9.3288,  31.4711,  -4.6148, -16.3778, -22.1843],
        [ -0.1078,   2.4622,  11.4013, -11.5409,  -8.9401],
        [-12.0977,   0.5648,  10.7090,  -1.8208,  -3.3966]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 2, 2]
target tensor([2, 1, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0010, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 0.0420,  0.1650,  1.8660, -6.1953, -2.6494],
        [-6.0323,  3.2758,  2.4213, -4.8219, -6.7703],
        [ 1.7368,  5.1260, -0.8184, -8.9065, -5.6191],
        [-5.1643, -1.9453,  1.6562, -6.5002, -3.3390]])
<class 'torch.Tensor'>
[2, 1, 1, 2]
target tensor([0., 0., 0., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.0615)
Test: [0/13]	Time 0.472 (0.472)	Loss 5.0615 (5.0615)	Accuracy 0.000 (0.000)
evaluate
input tensor([[[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.4806,   1.4175,  -2.1435, -10.5347,  -5.2712],
        [ -7.6635,   2.6390,  -2.1772,  -7.8156,  -4.8262],
        [ -3.1965,   5.6472,   3.9137,  -5.9011,  -8.2640],
        [ -2.5640,   0.4133,   1.6225,  -5.8429,  -5.1165]])
<class 'torch.Tensor'>
[1, 1, 1, 2]
target tensor([0., 2., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.5336)
evaluate
input tensor([[[  1,   1,  -4,  ...,  -4,   2,   1],
         [  5,  -1,   0,  ...,   7,   3,   0],
         [  5,   0,   0,  ...,   6,  -1,   7],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  2,  -1,  -1,  ...,   0,   1,  -2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,  -1,   1,  ...,   4,   5,   0],
         [  3,   6,   0,  ...,  -4,   0,   4],
         [  2,  -2,  -2,  ...,   6,   1,  -6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-4.2428,  1.2021,  2.2441, -9.4759, -9.8472],
        [-9.5563,  7.1262, -7.1976, -5.3656, -7.8580],
        [-3.1985,  3.2707, -1.5581, -9.9476, -6.9475],
        [-7.9280,  1.3542,  0.3644, -4.5967, -5.9663]])
<class 'torch.Tensor'>
[2, 1, 1, 1]
target tensor([3., 0., 1., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(9.0886)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.5292,   0.0250,   0.2627,  -8.5027,  -5.6800],
        [ -8.0624,   5.1399,  -3.8098, -11.0408,  -9.2265],
        [ -6.7389,   6.2707,  -2.4673,  -9.5224,  -4.8800],
        [ -6.3902,   1.7379,  -6.3043, -12.4847,  -9.9154]])
<class 'torch.Tensor'>
[2, 1, 1, 1]
target tensor([3., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.5884)
evaluate
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.4886,   2.5871,   1.5399,  -8.3507,  -8.1641],
        [  1.1828,  -0.0693,   0.4642,  -4.4698,  -6.4428],
        [ -7.1955,   6.0788,  -0.4378, -12.2739,  -7.6470],
        [ -7.4149,   5.0225,  -3.3712, -13.3005,  -2.5961]])
<class 'torch.Tensor'>
[1, 0, 1, 1]
target tensor([4., 1., 3., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.8117)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.2997,   6.7631,   4.2592, -10.5775, -10.8265],
        [ -4.5368,   3.9803,   2.2186,  -6.2823,  -7.9079],
        [ -2.8178,   2.1295,   3.0344,  -6.9419,  -8.9503],
        [ -1.9379,   4.2771,   0.0418,  -7.0333,  -5.2964]])
<class 'torch.Tensor'>
[1, 1, 2, 1]
target tensor([2., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.2741)
evaluate
input tensor([[[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.5424e+00, -1.0978e-01, -1.2661e-02, -5.4560e+00, -6.5320e+00],
        [-1.0471e+01,  1.9843e+00, -1.9865e+00, -9.7641e+00, -2.5687e+00],
        [-4.4462e+00,  5.8775e-01,  2.3891e-01, -7.2499e+00, -1.2926e+01],
        [-4.7728e-01,  3.2804e+00,  1.5574e+00, -5.6028e+00, -7.0904e+00]])
<class 'torch.Tensor'>
[2, 1, 1, 1]
target tensor([2., 0., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.0086)
evaluate
input tensor([[[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -2,  ...,  -4,   5,  -5],
         [  3,  -1,   0,  ...,  -1,   0,   4],
         [  0,   0,   0,  ...,   0,   0,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -3,  ...,  -2,   0,  -6],
         [  7,  -4,   0,  ...,   0,   1,   1],
         [ 11,  -5,   2,  ...,  -3,   6,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  2,   0,  -3,  ...,   0,   3,   4],
         [  2,   0,   0,  ...,   7,   0,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-10.1305,   6.3498,  -0.6900, -12.2104,  -5.2362],
        [ -8.0272,   1.4185,   3.4683,  -0.1820,  -5.5099],
        [  1.4825,  -2.2722,   3.6150, -12.0003,  -7.2406],
        [ -5.6779,   3.6930,  -0.7767, -11.0213,  -6.9900]])
<class 'torch.Tensor'>
[1, 2, 2, 1]
target tensor([2., 2., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.3608)
evaluate
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.5679,  1.7588, -1.2765, -4.4179, -9.2212],
        [-3.2956,  2.0119,  1.1992, -4.7522, -6.4091],
        [-1.5717,  4.0856,  4.9168, -8.1719, -3.1848],
        [-1.9320, -1.4563,  3.6268, -3.4998, -7.0037]])
<class 'torch.Tensor'>
[1, 1, 2, 2]
target tensor([2., 1., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.7474)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.6195,   1.4802,   1.9394,  -8.5426,  -7.4681],
        [ -7.8840,   6.9217,  -3.1086,  -8.8769,  -2.8099],
        [ -8.0098,   1.1015,  -2.5311, -10.1164,  -7.8633],
        [ -7.9168,   2.3559,  -0.6354, -13.4498,  -9.7943]])
<class 'torch.Tensor'>
[2, 1, 1, 1]
target tensor([0., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(8.2650)
evaluate
input tensor([[[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.5063,   2.3782,  -0.8207, -10.2361,  -8.1689],
        [ -6.0449,   4.8893,   6.2609,  -7.9943,  -5.9033],
        [ -1.4516,  -0.7501,  -0.9931,  -8.0766,  -5.8760],
        [ -1.9074,   3.9407,  -1.1708,  -5.6590,  -1.6485]])
<class 'torch.Tensor'>
[1, 2, 1, 1]
target tensor([0., 2., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.8884)
Test: [10/13]	Time 0.564 (0.516)	Loss 3.8884 (5.0571)	Accuracy 25.000 (22.727)
evaluate
input tensor([[[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.2117,   1.7147,  -0.9107,  -8.8897,  -4.7637],
        [ -2.9588,   2.1686,   3.0878,  -7.0409,  -2.8026],
        [ -2.2354,  -1.6598,  -0.9489, -16.1682,  -7.0771],
        [ -7.4430,  -0.7588,  -1.2501, -14.2129,  -6.5627]])
<class 'torch.Tensor'>
[1, 2, 2, 1]
target tensor([3., 2., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.4610)
evaluate
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.9963,   2.3218,  -1.2784, -10.2355,  -5.6299],
        [ -3.5300,  -0.7846,   4.3159,  -9.1570, -12.5215]])
<class 'torch.Tensor'>
[1, 2]
target tensor([0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.2285)
epoch: 44
train
input tensor([[[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 16.2661,  -1.4508,  -8.4098,  -7.6612, -16.8136],
        [-13.6720,  35.1575,  -8.3102,  -7.1115,  -7.8261],
        [ -9.3287,  -5.6251,  -2.3344,   8.5288, -15.8853],
        [  6.2031,   3.1600,   3.2392,  -8.1192, -10.1885]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 3, 0]
target tensor([0, 1, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0237, grad_fn=<NllLossBackward0>)
Epoch: [44][0/25]	Time 1.921 (1.921)	Data 0.023 (0.023)	Loss 0.0237 (0.0237)	Accuracy 100.000 (100.000)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-13.1508, -14.7383,  -6.0218,  21.7735, -10.4890],
        [-15.5958,   1.2346, -11.9835,   9.4373, -18.2200],
        [ -5.3770, -14.9647, -20.2497, -20.8759,  37.5098],
        [ -5.4937,  -2.9598,  22.7737, -15.0770, -18.4174]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 4, 2]
target tensor([3, 3, 4, 2])
<class 'torch.Tensor'>
loss
tensor(6.8476e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   0,   0,  ...,   0,   4,   0],
         [  4,   1,  -2,  ...,  -2,   5,  -4],
         [  3,   1,   0,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  6,  -2,   1,  ...,   0,  -1,   0],
         [  3,  -1,  -2,  ...,   0,   3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,  -1,  ...,  -1,  -3,   3],
         [  3,  -1,  -2,  ...,   0,   3,   4],
         [  1,   1,   0,  ...,   0,   6,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  0.7409,  -1.7117,   6.4687,  -4.7920,  -2.5291],
        [-16.1326,  18.6127,  -8.9573,  -8.1997,  -6.2697],
        [ -4.9006,  -0.7436,  17.3100, -15.5586, -11.1276],
        [-17.1023,  -1.0858,  -5.9061,  22.9168,   2.1280]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 2, 3]
target tensor([2, 1, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0009, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.8353,  13.7879,  -8.3272, -10.6149,  -2.0871],
        [ 12.2671,   3.3271, -10.6933, -24.7565,  -6.2210],
        [ -3.0088,   0.4806,  17.8672, -10.4532,  -3.5932],
        [-14.1810,  -6.1067,  11.2666, -16.3206, -12.2145]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 2, 2]
target tensor([1, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(3.2810e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.6610,  22.6118,  -7.8270,  -7.3658, -13.9088],
        [-11.6054,  32.7846,  -8.3369, -19.5479, -13.1986],
        [-14.2604,   5.8831, -13.2109,  -0.1750,  12.4018],
        [ 25.4565,   1.4971,  -6.4534, -16.9173,  -7.8662]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 4, 0]
target tensor([1, 1, 4, 0])
<class 'torch.Tensor'>
loss
tensor(0.0004, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-21.1196,   5.9112,  25.1662, -11.8990, -25.0243],
        [ 18.5523,  -7.6820, -28.2053, -30.4099, -30.9628],
        [-11.0850,  -4.3243,  -2.7964,  15.8992, -24.9638],
        [ -1.0348,  18.5304,  -6.8927, -12.8390,  -9.7882]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 3, 1]
target tensor([2, 0, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-14.1314,  26.7345, -18.6771, -18.2085,  -2.3820],
        [ -9.9612,   2.5817, -29.0636,  18.5049,  -2.8608],
        [ -7.9929,   5.8619,  29.7055, -30.1593, -15.7784],
        [-13.9215,   4.3628,   1.8813,   8.8442,  -8.2029]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 2, 3]
target tensor([1, 3, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0030, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.0454,  -2.1223,  11.6232,  -7.3609,  -2.3430],
        [ -1.5557,  14.7642,  -2.4506,  -4.6650,  -2.9084],
        [-15.4160,   1.9528, -14.7093, -35.6469,  33.5028],
        [ 19.4852,  -3.1846, -14.5455, -20.0158, -21.2190]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 4, 0]
target tensor([2, 1, 4, 0])
<class 'torch.Tensor'>
loss
tensor(2.6524e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[  0,   2,  -2,  ...,   0,   1,  -6],
         [  3,  -1,  -1,  ...,  -2,   0,  -1],
         [  2,   0,   0,  ...,  -3,   2,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  4,  -2,   0,  ...,  -4,   2,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  6,  -3,   0,  ...,   0,   1,   3],
         [  5,   0,   2,  ...,  -1,  -1,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -9.6579,   4.8672,  -3.0957,  -3.1356,  -9.6201],
        [-30.3535,  -0.3839,  24.6098, -15.1942, -16.7763],
        [ -3.1326,   6.0659,   6.4367,  -8.1013,  -5.3670],
        [ -2.4761,   2.8898,   9.0538,  -2.6559, -11.9313]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 2]
target tensor([3, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(2.1326, grad_fn=<NllLossBackward0>)
train
input tensor([[[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  1,   0,  -1,  ...,   4,   4,   1],
         [  2,   0,  -1,  ...,  -1,   2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  6,   0,   0,  ...,  -3,   4,   2],
         [  2,   0,  -1,  ...,  -1,   2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -2,  -1,  ...,   2,  -4,  -5],
         [  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   0,   0,  ...,   2,   2,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-13.7888,   2.7966,  23.7614, -13.3908, -13.3257],
        [ 28.2371,  -1.2848, -18.7548, -12.9234, -12.1027],
        [-14.6080,  25.7998,  -6.9486,  -5.6552, -14.5917],
        [-10.8028,  19.5727, -12.9005, -18.0314,   4.1323]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 1, 1]
target tensor([2, 0, 1, 1])
<class 'torch.Tensor'>
loss
tensor(5.9605e-08, grad_fn=<NllLossBackward0>)
train
input tensor([[[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.3114,  -2.7290,   6.0607,  -1.1214,  -0.2035],
        [-15.3192,  24.6779, -10.7283,  -3.5065,  -8.7149],
        [ 10.5560,  -5.6572,  -7.1499, -11.9127,  -4.1142],
        [  7.0942,  -2.4965,  -9.0808,  -3.8980,  -9.7321]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 0, 0]
target tensor([2, 1, 0, 0])
<class 'torch.Tensor'>
loss
tensor(0.0007, grad_fn=<NllLossBackward0>)
Epoch: [44][10/25]	Time 1.702 (1.899)	Data 0.024 (0.025)	Loss 0.0007 (0.1965)	Accuracy 100.000 (97.727)
train
input tensor([[[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.4829,  -2.2257,  10.4454, -10.1461, -15.4356],
        [  8.5442,   2.0859, -11.1705,   1.1363, -21.2827],
        [ -9.5119,  -3.1319,   5.1915,   1.2417,  -6.9090],
        [ 11.5084,  -3.9052, -15.0361, -16.5647,  -6.3383]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 0]
target tensor([2, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0054, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 15.1244,  -1.8847,  -5.0522,  -7.3204,  -2.8966],
        [-16.0265,  16.3560,  -9.9798, -10.7088,   2.0614],
        [-30.3505,  45.0074, -19.8535,  -8.8789, -23.9009],
        [ -6.0130,  -4.1975,  10.0268,  -3.3989,  -4.7986]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 1, 2]
target tensor([0, 1, 1, 2])
<class 'torch.Tensor'>
loss
tensor(7.7486e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.8175, -11.3169, -14.2523,   9.9242, -20.5412],
        [-11.6914,  -0.3872,  18.6359,  -2.9415,   0.0738],
        [ -4.7650,  11.0041,  -8.0746,  -1.0915,  -6.6500],
        [-16.7579,  -4.1792, -16.2279, -36.7047,  53.0449]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 1, 4]
target tensor([3, 2, 1, 4])
<class 'torch.Tensor'>
loss
tensor(1.5199e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-14.9031,  30.9185, -13.0036,  -7.2072, -15.7191],
        [ 12.7342,  -4.2004,  -9.9082, -10.5533, -14.3343],
        [-15.6958,  36.4176,  -9.6737, -26.6030, -12.1885],
        [ -8.1229,  -8.6514,  14.4853,  -6.7715,  -5.2411]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 1, 2]
target tensor([1, 0, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-17.8250,  -1.8343,  37.9165, -39.5809, -18.8840],
        [-21.9266,  -6.6729,  22.5952,   0.1671,  -9.2404],
        [-12.5663, -10.1460,   4.1025,  -8.3917, -12.7723],
        [-27.5511,  28.3777, -14.1500,  -6.8136, -11.1481]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 1]
target tensor([2, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(1.1027e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-15.8430,  -6.0109, -31.6769,  50.0173, -14.9983],
        [-14.2995,  -8.3183, -35.7895,  36.6979, -22.9640],
        [ -3.2188, -15.8753,  -1.8888,  -0.9583,  26.6940],
        [ 10.8099,  -2.3075,  -8.5265,  -9.5389,  -8.3977]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 4, 0]
target tensor([3, 3, 4, 0])
<class 'torch.Tensor'>
loss
tensor(5.0664e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.0978, -14.1733, -13.5273,  26.5099, -10.7079],
        [-20.1200, -14.5811,  19.3986,   0.9090,  -9.7711],
        [-13.5974,  -4.0670,   1.5176,   4.7994,  -9.2284],
        [-22.0306,  -6.9966, -25.6323,  25.8796,  -4.0585]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 3, 3]
target tensor([3, 2, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.8297, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-15.5881, -12.9713,   1.8599,  16.3917,  -9.4597],
        [-11.6189,  23.1777,  -1.3014,  -5.2972, -11.2250],
        [ -5.7628,  -5.0303,  -4.8197, -12.6135,  19.2448],
        [ -8.3694,  -1.7019,  -0.1161, -11.4542,  13.2262]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 4, 4]
target tensor([3, 1, 4, 4])
<class 'torch.Tensor'>
loss
tensor(5.9605e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.0166,  -9.8852,   7.0741,  -3.5283, -10.7304],
        [ 19.9497, -10.1487, -19.2768,  -5.9266, -23.8329],
        [ -4.7626,  -2.2323,  11.2463,  -0.6640, -10.7949],
        [ -4.2956,  -6.3436,   7.2009,   1.2382, -16.7014]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 2, 2]
target tensor([2, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0007, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-14.6489,  -7.3166,  24.1183,  -3.7074,  -2.0019],
        [ -6.6048,  12.2644,   1.9222,  -2.9567, -13.7437],
        [ -3.2235,  -8.9577,  -7.5973, -18.4493,  28.1448],
        [-12.6329, -12.6819,  15.0617,   0.8365, -29.4020]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 4, 2]
target tensor([2, 1, 4, 2])
<class 'torch.Tensor'>
loss
tensor(8.2849e-06, grad_fn=<NllLossBackward0>)
Epoch: [44][20/25]	Time 1.711 (1.850)	Data 0.023 (0.021)	Loss 0.0000 (0.1427)	Accuracy 100.000 (97.619)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.2701, -11.8741,  25.7974,   3.6223, -27.3984],
        [ -5.7157,  17.6987, -13.3494,   6.0517, -13.0326],
        [ -2.7884,  -5.0296,  -4.4528,  14.6409, -12.2721],
        [ -4.1837, -11.2499,  23.0951,  -0.2358,  -7.8719]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 3, 2]
target tensor([2, 1, 3, 2])
<class 'torch.Tensor'>
loss
tensor(2.1756e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-17.5689, -31.9703,  27.1499, -15.2337, -11.3639],
        [-21.6980, -14.0469,   6.7690,  36.1343, -12.1139],
        [ -3.3773,   7.3796,   5.8196,  -1.5895,  -7.6431],
        [ 14.3443, -10.1136,   2.3032, -10.1613,   1.9429]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 1, 0]
target tensor([2, 3, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0477, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.9733,  -0.9372,  13.2419,  -4.5741,  -8.6212],
        [ 16.3299, -20.1431,  -1.6783,   3.3249, -21.8901],
        [ 13.3071,  -0.6185,   1.7669,  -7.8229,  -9.9848],
        [-26.4842, -20.6461,  32.9045, -11.3711, -18.2230]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 0, 2]
target tensor([2, 0, 0, 2])
<class 'torch.Tensor'>
loss
tensor(3.4571e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.1249,  -8.8381,  -9.2624,  27.6536, -14.2148],
        [  4.8341,  -7.1247, -11.3280, -17.1979, -14.9192],
        [  5.8657,  -2.8147,  -2.9286,  -4.1317,  -1.9160],
        [-11.3583,   9.3616,   2.0495,  -6.8231,  -3.0314]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 0, 1]
target tensor([3, 0, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.0004, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.3437,  -2.6304,   9.7800,  -3.3737,  -5.8859],
        [-13.7361,  -7.6103,   5.8034,  -4.2020,  -5.0000],
        [ -7.9014,  -6.5545,   7.1052,  -5.0566,  -7.6877],
        [ -6.1722,  -5.7102,   4.4692,  -5.1738,  -7.6420]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 0., 1., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(10.9602)
Test: [0/13]	Time 0.470 (0.470)	Loss 10.9602 (10.9602)	Accuracy 25.000 (25.000)
evaluate
input tensor([[[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.2889,  -6.8691,   7.3840,  -1.6235,  -6.5751],
        [ -9.8774,  -5.5237,   3.7185,  -1.4568,  -6.4353],
        [ -9.7679,  -4.2842,   3.5721,  -4.1519, -10.4371],
        [ -9.7278,  -9.5781,   7.2840,  -9.4417,  -9.4847]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.5650)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.4634,  -1.7736,   4.7331,  -5.4876,  -6.5952],
        [ -2.4361,  -8.4389,   5.6774,  -2.6913,  -7.1846],
        [ -3.3197,  -4.2984,   3.4201,  -0.5200, -10.9288],
        [ -9.5116,  -6.5572,   7.3742,  -6.8199, -11.3916]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 3., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.6199)
evaluate
input tensor([[[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.3972,  -9.2410,   7.8944,  -1.9820,  -4.9830],
        [-11.0597,  -2.0253,  11.9276,  -5.5047, -12.5541],
        [ -7.9812,  -3.6995,   6.4413,  -0.6431,  -8.5868],
        [ -6.2288,  -3.6407,   8.2790,  -2.1980, -10.5449]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([4., 2., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.8253)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.6381,  -6.6114,   6.9528,  -3.3495,  -8.5313],
        [ -9.0073,  -2.3856,   4.6845,  -4.3204,  -6.6360],
        [-12.7253,  -0.8307,   0.2589,   1.7105, -10.1729],
        [ -5.4132,  -4.3612,   5.7746,  -4.7570,  -8.5377]])
<class 'torch.Tensor'>
[2, 2, 3, 2]
target tensor([3., 1., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(10.8173)
evaluate
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.1509,  -3.5229,   8.4860,  -3.6638,  -9.8308],
        [ -2.9360,  -1.6993,   3.9315,  -2.7635,  -2.5389],
        [ -5.2505,  -4.3641,   8.3548,  -3.3221,  -3.8487],
        [ -7.5225, -10.3368,   8.5325,  -1.0940, -15.3894]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([4., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.5811)
evaluate
input tensor([[[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.2114,  -8.4024,   8.8372,  -7.5812,  -8.4459],
        [-11.5484,  -7.7506,   8.6007,   1.2599,  -7.2673],
        [ -2.9294,  -3.3495,   6.3631,  -2.1414,  -6.9940],
        [ -4.9480,   0.3746,   9.5568,  -2.5342,  -9.8780]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 4., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.2295)
evaluate
input tensor([[[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.1773,  -2.4224,  12.3981,  -2.5933,  -7.6520],
        [ -9.2048,  -6.2254,   6.1582,  -3.9281,  -6.4995],
        [ -6.4020,  -6.6955,   8.3136,  -4.5076, -12.5895],
        [ -2.4983,  -5.7123,   6.0091,  -1.3435,  -8.7421]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 3., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.7271)
evaluate
input tensor([[[  2,   0,   0,  ...,  -1,  -2,  -1],
         [  0,   2,  -2,  ...,  -3,   4,  -2],
         [  2,  -1,  -1,  ...,   0,   1,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   4,   0,  ...,   2,   5,   1],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,  -2,   2,  ...,   0,   5,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -1,  ...,   2,  -3,   4],
         [  2,  -1,   0,  ...,   0,  -3,   2],
         [  2,  -1,  -4,  ...,   0,  -4,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-11.1030,  -7.4621,   5.9931,  -4.3904,  -9.4346],
        [ -5.9866,  -8.6954,  11.5646,  -4.7607, -14.6264],
        [ -5.6958,  -3.4686,   2.5665,  -4.4308,  -9.0934],
        [ -8.8514,  -2.2377,   6.5010,  -6.2208, -10.8937]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 1., 1., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(9.7552)
evaluate
input tensor([[[  3,   1,  -3,  ...,   1,  -3,   2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  2,  -2,  -1,  ...,   2,  -3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -2,  ...,  -6,  -5,   0],
         [  0,   2,   2,  ...,   0,   0,   2],
         [  4,   0,   0,  ...,   7,   3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  6,  -2,   0,  ...,   1,   0,   2],
         [  1,  -1,   0,  ...,   0,  -6,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -8.6530,  -7.5236,   2.6058,  -7.4697, -12.0839],
        [-12.1171,  -2.6151,   7.7652,  -5.8904,  -6.8262],
        [ -2.2871,  -4.0242,   6.8769,  -2.1924,  -8.9155],
        [ -9.8382,  -4.3156,   4.3615,  -7.5414,  -5.2056]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 2., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.1694)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.2856,  -6.2251,   9.7973,  -1.7406, -11.0337],
        [ -9.8709,  -1.6549,   3.5769,  -3.8755,  -4.0384],
        [ -4.5765,  -8.9150,   9.5309,  -0.0271,  -8.6032],
        [ -2.0877,  -3.2169,   4.3599,  -5.8092, -10.3902]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 2., 3., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.0035)
Test: [10/13]	Time 0.520 (0.516)	Loss 4.0035 (6.5685)	Accuracy 50.000 (45.455)
evaluate
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.6389,  -5.2861,   8.5351,   3.0290,  -7.5949],
        [ -8.1087,  -5.1086,   7.8910,  -3.9985,  -9.4951],
        [ -0.6785,  -2.3460,   4.4821,  -3.9274,  -3.6359],
        [ -5.2092,  -2.9176,   5.3908,  -0.6477,  -7.4013]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 0., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.3707)
evaluate
input tensor([[[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.5592, -10.1253,   5.8598, -10.3526, -10.0214],
        [ -1.0444,  -4.9510,   4.4888,  -1.1822,  -7.5771]])
<class 'torch.Tensor'>
[2, 2]
target tensor([0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(9.9331)
epoch: 45
train
input tensor([[[  1,   0,   0,  ...,   0,   4,   0],
         [  4,   1,  -2,  ...,  -2,   5,  -4],
         [  3,   1,   0,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  6,   0,   0,  ...,  -3,   4,   2],
         [  2,   0,  -1,  ...,  -1,   2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   3,   4,  ...,   3,  -4,  -2],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-24.7301,  17.6119,  -0.8282,  -5.1356,  -8.7325],
        [ -3.1917,  -0.6948,   6.4643,  -3.2247,  -3.8854],
        [-13.2807,  18.2887,   0.3116,  -7.7028, -10.2320],
        [ 16.0318,  -9.4830,  -4.0002,  -1.1841, -23.3788]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 1, 0]
target tensor([1, 2, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
Epoch: [45][0/25]	Time 1.915 (1.915)	Data 0.024 (0.024)	Loss 0.0002 (0.0002)	Accuracy 100.000 (100.000)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 14.9329,  -9.1208,   3.1583, -10.4293,  -9.6452],
        [-11.6611, -10.5636,  43.7071, -14.8962, -26.3969],
        [-25.1322,  17.1908,  -1.9244, -18.9576, -10.6982],
        [ -5.5996,  -9.2762,  17.0719,  -1.9516,  -7.6654]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 1, 2]
target tensor([0, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(1.9371e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.3437,  -8.7433, -13.6292,  24.9261, -14.7348],
        [-25.1493, -38.2533,  45.4820, -18.4756, -18.0061],
        [ -9.9681, -13.0243,   0.9241, -28.4846,  49.8184],
        [-11.1453, -10.2364,  33.4417,  -2.5461, -15.9151]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 4, 2]
target tensor([3, 2, 4, 2])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.8060,  -3.0900,   6.8551,  15.9235,   1.1377],
        [-27.7022, -15.4676, -17.2364,  46.5757, -10.7903],
        [-11.8512,  -8.2126,  23.3888,  -0.7194, -19.5165],
        [ -6.7556,   0.3013,  -5.0545,  -6.5503,  17.4157]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 2, 4]
target tensor([3, 3, 2, 4])
<class 'torch.Tensor'>
loss
tensor(2.8907e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.8577, -14.1066,   9.2662,  17.9442,  -8.6630],
        [  8.6438,  -8.4516,   3.9519,  -4.4823,  -7.7693],
        [ -7.9147,   9.1655,   0.9900, -11.3987, -20.5038],
        [-10.5264,   6.4493,   3.9999,  -3.7292,  -3.6607]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 1, 1]
target tensor([3, 0, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0231, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  7.4490,  -8.0948,  -0.1320, -17.5591, -19.1254],
        [-17.1904, -32.0897,   3.8301,  35.7091, -15.8887],
        [-13.5529,  -9.5521, -17.8043,  36.5152, -19.0692],
        [  6.6973, -12.7487,   3.2492, -14.3923,  -7.6921]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 3, 0]
target tensor([0, 3, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0080, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.7521, -13.4227,   2.1488,   9.9261,  -9.6450],
        [-11.1840,  19.0682, -10.1958, -11.3281, -14.8855],
        [-17.8407, -16.2335,   8.9466,  16.9922, -11.2862],
        [-30.6695, -13.1462,  -2.3641,  16.8528, -14.3543]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 3, 3]
target tensor([3, 1, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-21.8712,  21.4747,   1.3664, -10.1370, -12.4422],
        [ -8.9955,  -3.8735,  27.7856, -12.3030,  -8.5218],
        [ -5.5984,  -5.3275,   6.5655,  11.0116, -16.1780],
        [-17.8559, -23.3254,  -0.7958,  12.5760, -22.1822]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 3, 3]
target tensor([1, 2, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0.0029, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 17.0007, -20.3444,  -8.2287, -19.7239, -27.5595],
        [ -0.7837, -15.9089,  -1.5930, -20.4735,  26.7328],
        [-11.3003, -11.3815,   5.9190,   4.4416, -20.2632],
        [ -0.5190,  -9.2782,  16.0238,  -7.3942,  -4.2861]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 4, 2, 2]
target tensor([0, 4, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.4207, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   1,  -3,  ...,   1,  -3,   2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,  -1,  -1,  ...,  -2,   0,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  7,  -2,   0,  ...,  -3,   7,   1],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   5,   1,  ...,   1,   2,   0],
         [  2,   3,   0,  ...,   2,  -1,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-23.6313,  -6.7583,  32.0567,  -4.2105,  -4.2446],
        [ -1.9646,  -7.6427,   2.5138, -14.8349,  19.8447],
        [ -5.7996,   7.5936,  -1.7482,  -9.0594, -11.1161],
        [ 13.5607, -15.5955, -10.5439, -11.5271, -15.0521]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 4, 1, 0]
target tensor([2, 4, 1, 0])
<class 'torch.Tensor'>
loss
tensor(2.2321e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.9960,  12.2039,   7.6904,  -2.1182, -10.3408],
        [ 21.6451, -10.9355, -11.6271,  -6.1795,  -6.8173],
        [ -9.1409, -26.6602,  35.5987,  -9.6846,  -9.2834],
        [-11.0564, -10.5807,  13.3254,  -7.4428,  -8.9546]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 2, 2]
target tensor([1, 0, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0027, grad_fn=<NllLossBackward0>)
Epoch: [45][10/25]	Time 1.675 (1.802)	Data 0.027 (0.026)	Loss 0.0027 (0.0416)	Accuracy 100.000 (97.727)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-22.0691, -10.5692,   8.1822,  24.6865, -19.7173],
        [-11.0494,  -7.4744,  13.4198,   0.9898, -22.9253],
        [ -3.7738,  18.0137, -10.3196,  -4.4358, -13.9806],
        [-14.3690,  -0.5596,  41.3722, -21.0831,  -7.0340]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 1, 2]
target tensor([3, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(1.0431e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.6332,  -6.8967,  44.6236, -15.6726,  -5.5849],
        [-10.0969,  -5.1411,  42.9560, -28.9046,  -5.4213],
        [ -3.8547,  16.6520,   0.7919, -11.3785,  -0.0727],
        [ -5.6373, -11.5525,  18.4578,   2.9350,  -7.8692]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 2]
target tensor([2, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(8.9407e-08, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.4829,  10.8342,  -2.1564,  -3.6359,  -1.9957],
        [  4.7783, -10.1135,  -1.5462,  -3.8678, -21.5816],
        [-16.4153, -10.7606,  25.9143, -12.6587, -13.1445],
        [ 19.2969, -18.0881,  -7.8159,  -6.0727,  -5.2485]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 2, 0]
target tensor([1, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0005, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  6.4279,  -0.7217,   1.8007,  -2.8003,  -5.1589],
        [-15.5579,  22.0799,  -5.4425,  -2.3768, -31.6022],
        [  4.2204,  -1.0492,  -4.8366,  -3.3980,  -3.2196],
        [ -9.9684, -15.1773, -18.8498,  36.8919, -21.2402]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 0, 3]
target tensor([0, 1, 0, 3])
<class 'torch.Tensor'>
loss
tensor(0.0042, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.1059,  -7.9115,  26.0871,  -7.0731,  -7.9069],
        [  5.4453,  -6.4712,  -4.0555,  -3.0423,  -1.7623],
        [-15.2627,  -2.7329,  -2.8162,  39.1873, -34.9551],
        [ 15.1163,  -7.3739,  -1.2577, -11.1445,  -7.1764]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 3, 0]
target tensor([2, 0, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-15.4272,  -9.4792,  -7.6945, -13.3654,  20.7763],
        [-14.0058,  22.7909,  -7.3664, -13.5547, -19.2511],
        [-12.3354, -16.9171,  20.4940,  -1.6914,  -9.7246],
        [ 16.2776,  -5.2656,  -6.8055, -11.5979,  -5.4852]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 2, 0]
target tensor([4, 1, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.7852, -11.4420,  -0.3216, -12.4887,  20.8204],
        [ 10.2578, -19.9177,   0.8198,   0.1644, -13.0133],
        [-26.3527, -10.6732,  20.8680,   4.2840, -15.7998],
        [ 14.7818, -20.7884,  -1.0934,  -3.2465, -28.7375]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 0, 2, 0]
target tensor([4, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(3.0307e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-14.1443,  33.4814, -26.3388,   0.9046, -23.5489],
        [ -2.6441,  12.8544,  -1.4689,   0.9793,  -7.9353],
        [-10.9988, -10.5599,  12.8774,  -0.6630,  -9.4824],
        [ -9.1582,  -9.4743,  20.8367,   4.0472, -19.9522]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 2]
target tensor([1, 1, 2, 2])
<class 'torch.Tensor'>
loss
tensor(2.2650e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.5431, -12.2968,  14.4667,  -0.9839, -15.6011],
        [ -9.6987,  -2.5229,   7.7790,  14.8229,  -5.5293],
        [ -7.1913, -16.9532,  14.1238,  -6.4554,  -7.8007],
        [-16.4709,   7.2203,  -7.2972,  10.2368, -12.9067]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 2, 3]
target tensor([2, 3, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.7663, grad_fn=<NllLossBackward0>)
train
input tensor([[[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -3,  ...,  -2,  -2,  -4],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  2,  -2,  -2,  ...,   1,   0,  10],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,  -1,  ...,  -1,  -1,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [ -1,   1,   0,  ...,   2,  -3,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-12.5517, -12.2859,  26.7210,   1.7762, -12.2937],
        [ -1.1034,  -4.4181,   3.4143,  -3.2249, -13.9008],
        [ -1.2589,  13.5374,  -5.6939,  -2.7954,  -2.5831],
        [ 14.8654,  -3.5250,  -4.3755,  -4.7364, -18.1295]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 0]
target tensor([2, 2, 1, 0])
<class 'torch.Tensor'>
loss
tensor(0.0031, grad_fn=<NllLossBackward0>)
Epoch: [45][20/25]	Time 1.886 (1.769)	Data 0.027 (0.023)	Loss 0.0031 (0.0587)	Accuracy 100.000 (97.619)
train
input tensor([[[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.2990, -11.7772,  21.5515,  -4.9217, -11.5554],
        [ -6.7846, -11.5617,  12.3552,   3.1680, -18.8235],
        [-20.6826,  33.3356, -18.0419, -17.2157, -17.0594],
        [-11.5844, -16.8504,  21.2370,   1.2279,  -9.8972]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 2]
target tensor([2, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(2.5569e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.8644,  -2.2432,  19.6106, -11.8726, -21.5434],
        [ -5.7058, -13.3768, -13.5740, -10.1255,  42.6313],
        [ -7.1835,  -7.9336,   9.3582,   0.9586, -11.1094],
        [ -6.6627,  14.2303,  -0.9210,  -4.9818, -10.4850]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 4, 2, 1]
target tensor([2, 4, 2, 1])
<class 'torch.Tensor'>
loss
tensor(5.6320e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-15.6408, -12.2750,   9.8455,  -2.9629, -14.3937],
        [ -5.1328,  -1.7852,  -8.0829,  13.3557, -17.4551],
        [ -8.3911,  -5.4785,   7.4045,   0.5024, -17.8035],
        [  3.7670, -12.6248,  -8.0496,  -1.2679,  25.3549]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 2, 4]
target tensor([2, 3, 2, 4])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  7.3037,  -5.3445, -18.8748,   0.5578, -21.5913],
        [-13.7601,  20.9974,  -6.3538,  -3.4595, -10.5714],
        [  5.0575,  -8.8602,  -0.6442,  -3.5983, -28.1405],
        [ -2.4835,  22.5120,  -0.8666, -12.9809,  -9.2920]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 0, 1]
target tensor([0, 1, 0, 1])
<class 'torch.Tensor'>
loss
tensor(0.0012, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.1889,   8.1805,  -6.7306,  -5.0398, -11.0859],
        [ -0.3426,   5.1938,  -0.5057,  -5.8640,  -7.4560],
        [ -4.5277,  -1.4524,  -2.7335, -10.3060, -10.6347],
        [-10.2838,   3.2458,  -2.3440, -10.4674,  -9.2740]])
<class 'torch.Tensor'>
[1, 1, 1, 1]
target tensor([2., 0., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.3511)
Test: [0/13]	Time 0.518 (0.518)	Loss 7.3511 (7.3511)	Accuracy 0.000 (0.000)
evaluate
input tensor([[[  2,  -2,  -1,  ...,   2,  -3,   4],
         [  2,  -1,   0,  ...,   0,  -3,   2],
         [  2,  -1,  -4,  ...,   0,  -4,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  2,  -1,  -1,  ...,   0,   1,  -2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  6,  -2,   0,  ...,   1,   0,   2],
         [  1,  -1,   0,  ...,   0,  -6,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -8.7403,   9.3518,  -2.7359,  -7.9336, -11.3051],
        [-12.7645,  11.6000, -10.8874,   1.8054, -10.0224],
        [ -4.2544,   5.8223,  -4.4520,  -4.7306,  -7.5786],
        [-10.3082,   7.5734,  -6.5447,  -6.7260,  -6.0503]])
<class 'torch.Tensor'>
[1, 1, 1, 1]
target tensor([3., 0., 1., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(10.4125)
evaluate
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-14.5970,   3.7965,  -3.9007,  -5.8404,  -5.3210],
        [ -5.3300,  -1.6580,   3.0465,  -0.8722,  -8.9946],
        [ -1.0334,   0.7110,   1.3702,  -3.3101,  -3.4500],
        [ -6.6596,   1.7373,  -2.1919,  -2.7568,  -9.5507]])
<class 'torch.Tensor'>
[1, 2, 2, 1]
target tensor([0., 3., 0., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.4389)
evaluate
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.1339,   1.9638,   0.9820,  -2.0260,  -8.9613],
        [ -9.0947,   3.2301,  -4.7337,  -0.7911,  -7.1858],
        [ -6.8101,   2.5104,   0.2609,  -3.6555, -12.1724],
        [ -4.5316,   0.9821,   0.5546,  -1.4774,  -7.0390]])
<class 'torch.Tensor'>
[1, 1, 1, 1]
target tensor([2., 2., 3., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.0307)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.2244,  -0.8800,  -2.6621,   0.1551, -17.5602],
        [ -9.0265,   2.8843,  -6.3128,  -6.5388, -11.9068],
        [ -9.6197,   7.6708,  -4.6717,  -5.3507,  -4.0849],
        [ -6.9561,  -1.3892,   0.7252,  -1.6026,  -4.8282]])
<class 'torch.Tensor'>
[3, 1, 1, 2]
target tensor([2., 2., 2., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.6147)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.2573,   1.3263,   1.9152,  -1.5177, -10.6830],
        [ -4.6739,   4.6573,   2.5620,  -4.7291, -10.1476],
        [ -8.9220,   4.3441,  -1.7508,  -4.5543,  -7.0693],
        [ -2.8375,   0.9812,  -2.0237,  -2.3186,  -7.5328]])
<class 'torch.Tensor'>
[2, 1, 1, 1]
target tensor([2., 4., 3., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.9218)
evaluate
input tensor([[[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.8632,   4.9636,   4.6572,  -1.9095,  -7.7780],
        [ -6.3936,   2.9844,   1.9474,  -2.6496, -11.0657],
        [ -7.6874,   3.9672,   1.8040,  -5.8809,  -9.9722],
        [ -6.4681,   1.1178,   3.1121,  -5.6939, -14.5985]])
<class 'torch.Tensor'>
[1, 1, 1, 2]
target tensor([2., 2., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.0218)
evaluate
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.6887,  -0.6486,  -0.3157,  -0.4956,  -6.8908],
        [ -3.6381,   1.4265,  -2.7847,   0.6451, -10.6209],
        [ -3.6776,   3.6340,   3.4252,  -3.2151,  -6.1934],
        [ -5.7609,   2.8099,   0.3565,   0.2983,  -7.0941]])
<class 'torch.Tensor'>
[2, 1, 1, 1]
target tensor([1., 2., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.7315)
evaluate
input tensor([[[  2,   0,  -2,  ...,   2,  -2,  -4],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,   0,  ...,   0,  -6,  -4],
         [  5,  -1,   0,  ...,   7,   3,   0],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -3,  ...,  -2,   0,  -6],
         [  7,  -4,   0,  ...,   0,   1,   1],
         [ 11,  -5,   2,  ...,  -3,   6,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -9.3906,   4.9866,  -2.6190,  -5.5540, -11.8048],
        [-12.8987,   8.6978,  -2.0711,  -6.4043,  -7.5334],
        [ -5.7511,   5.4095,  -2.7922,  -5.5851,  -8.1496],
        [ -0.4254,  -2.3614,   2.7835,  -7.2961,  -8.6595]])
<class 'torch.Tensor'>
[1, 1, 1, 2]
target tensor([0., 2., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(9.8904)
evaluate
input tensor([[[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.8637e+00,  5.5044e+00, -2.8409e+00, -7.0258e+00, -9.4278e+00],
        [-7.8253e+00,  3.5712e+00, -1.1447e+00, -4.3009e+00, -8.1469e+00],
        [-1.2770e+01,  2.2275e+00, -5.1284e-03,  7.2711e-01, -8.8196e+00],
        [-3.5577e+00,  3.7508e+00,  3.1628e-01, -2.9915e+00, -2.7116e+00]])
<class 'torch.Tensor'>
[1, 1, 1, 1]
target tensor([0., 1., 4., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.5451)
evaluate
input tensor([[[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.5034,  -0.1997,   0.5591,  -1.4251,  -9.5831],
        [-11.2313,   8.2350,   3.6741,  -5.5593, -12.5305],
        [-10.8154,   2.2043,   1.5169,   3.7196,  -7.6595],
        [ -8.6461,   2.1470,  -0.0950,  -0.1976,  -8.1545]])
<class 'torch.Tensor'>
[2, 1, 3, 1]
target tensor([2., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.6348)
Test: [10/13]	Time 0.584 (0.527)	Loss 4.6348 (6.3267)	Accuracy 25.000 (15.909)
evaluate
input tensor([[[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.4478,   7.2256,   2.8420,  -2.2628, -10.3283],
        [ -9.6974,   8.2940,  -4.6384,  -5.4919,  -7.5017],
        [ -5.6511,   3.0667,   2.3582,  -4.5533,  -4.2299],
        [ -3.2368,   4.4109,   0.7286,  -1.8515,  -7.3718]])
<class 'torch.Tensor'>
[1, 1, 1, 1]
target tensor([2., 1., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.3038)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.5667,   4.8318,  -4.8323,  -4.5962,  -9.6670],
        [ -5.9831,   4.6105,  -4.2409,  -5.2454,  -8.9046]])
<class 'torch.Tensor'>
[1, 1]
target tensor([2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(10.1290)
epoch: 46
train
input tensor([[[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-19.4774,  23.3301,  -2.6843,  -8.5697, -19.1355],
        [  8.9231, -11.0959, -25.6109, -27.0722, -24.4211],
        [ 17.5636,   3.9744,  -7.5020, -13.8190, -10.2947],
        [ 20.0736,   5.0125,  -2.9203, -27.6070, -19.5360]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 0, 0]
target tensor([1, 0, 0, 0])
<class 'torch.Tensor'>
loss
tensor(3.8743e-07, grad_fn=<NllLossBackward0>)
Epoch: [46][0/25]	Time 1.736 (1.736)	Data 0.026 (0.026)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
train
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.2206,  -5.4514, -24.8683,  17.0851, -22.5698],
        [-25.9692,  -2.9803, -12.3658,  41.3227, -34.9236],
        [-15.2236,   1.4054,   1.0831,  11.1634,  -3.9292],
        [ -5.5362,   0.2457,  -3.0939, -13.4929,  13.1524]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 3, 4]
target tensor([3, 3, 3, 4])
<class 'torch.Tensor'>
loss
tensor(2.5659e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 10.1316,  -2.6952,  -7.4060,  -6.6407, -19.9636],
        [ -5.6199,  -7.0845,  11.3444,  -6.1409, -12.6374],
        [-14.5976,  -2.5303, -12.5792,   2.0306, -17.6986],
        [-11.7997,  -1.2040,  14.8784,  -3.7562, -13.3965]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 3, 2]
target tensor([0, 2, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0026, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-14.8085,  -1.2951,  10.3691,  -7.8045,  -6.2901],
        [ -8.1332,  -7.8258,  22.0860,  -8.3945,  -9.5701],
        [-11.8173,  -2.4936,  23.5795,  -8.8871, -19.3689],
        [-11.2914,  -0.5246,  16.8026,  -6.9033,  -6.4235]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(2.1458e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-15.1351,   8.8472, -10.5898, -16.6048,  31.8479],
        [ 12.0038,  -0.8548,  -8.6114, -16.6630, -13.8667],
        [  8.9280,  -6.3351,  -4.8803,  -7.3117, -11.0850],
        [-14.7517,  20.6272,  -7.3969, -12.4325,  -5.1821]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 0, 0, 1]
target tensor([4, 0, 0, 1])
<class 'torch.Tensor'>
loss
tensor(9.8348e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-15.1741,   1.2360,   8.1136, -15.9438, -13.2646],
        [  8.4306,  -4.7692, -15.2138,  -8.9199,  -9.1741],
        [ 16.0002,   1.2453,  -4.2044, -17.5959,   1.7451],
        [ -8.3465, -18.1342, -22.1374, -25.4480,  33.1160]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 0, 4]
target tensor([2, 0, 0, 4])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-17.7407,   3.3333,  39.3578, -38.7656,  -5.9102],
        [ -9.8706,   2.6912,  -5.5557,   7.5832, -15.5254],
        [-24.4259,   5.1726, -20.4050,  15.4462,  -5.8515],
        [  6.5440,   3.7679,  -4.7006,  -6.6872, -10.7078]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 3, 0]
target tensor([2, 3, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0170, grad_fn=<NllLossBackward0>)
train
input tensor([[[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  4.0689,  -0.0765,  -3.3347,  -6.7780,  -1.9703],
        [-18.7456,  -0.5301,  17.1599,  -6.2041,  -5.7587],
        [ -4.2472,  15.0790,  -3.9059,  -3.5232,  -4.4288],
        [-17.3402,  -2.1937,  -8.8636,   6.3646, -17.6430]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 1, 3]
target tensor([0, 2, 1, 3])
<class 'torch.Tensor'>
loss
tensor(0.0047, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.3646,   0.7584,  10.1951,  -5.0199,  -8.8966],
        [-11.2000,   0.3466,   8.6332,  -3.1006, -14.3516],
        [-17.4968,  35.0623,  -6.8196,  -6.9014, -11.7367],
        [ -3.3515,  23.4638,  -0.8793,  -7.4190,  -8.0992]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 1]
target tensor([2, 2, 1, 1])
<class 'torch.Tensor'>
loss
tensor(8.5285e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  6.6028,  14.9229, -16.6869, -12.5238, -22.7844],
        [-14.4390,   8.4301,  34.1142, -20.5701, -16.9261],
        [ -8.4854,  26.1123,  -6.2652,  -4.4360, -12.7239],
        [  5.3835,   8.0190,   1.4531, -11.5338,  15.4527]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 1, 4]
target tensor([0, 2, 1, 4])
<class 'torch.Tensor'>
loss
tensor(2.0803, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.8254,  -0.5684,  19.1351, -22.3129, -23.7092],
        [ -1.7353,  -2.9876,   7.4537,  -3.8137,  -5.2533],
        [ -7.9677,  -2.9144,  12.2697, -10.7199, -11.3063],
        [ -7.9127, -10.8228, -50.8188,  49.5256, -11.7179]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 3]
target tensor([2, 2, 2, 3])
<class 'torch.Tensor'>
loss
tensor(3.6833e-05, grad_fn=<NllLossBackward0>)
Epoch: [46][10/25]	Time 1.685 (1.784)	Data 0.027 (0.022)	Loss 0.0000 (0.1914)	Accuracy 100.000 (97.727)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-16.1666,  36.7695, -19.4985, -11.8572, -16.9328],
        [-20.1762,  42.2286, -16.5402, -25.9315, -16.4981],
        [  0.7941,  28.0626,  -7.6141, -19.3085,  -8.5074],
        [-21.5210,  -7.6731,  -7.7743,  21.6694, -25.0303]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 1, 3]
target tensor([1, 1, 1, 3])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 12.1448,   1.2164,  -4.4698,  -2.4990,  -5.9046],
        [ -6.6722,   2.4430,  10.5367,  -6.7245,  -8.6059],
        [  1.2668,  22.8041, -19.7068,  -4.8447,  -8.3879],
        [  4.5222, -11.0948, -10.5489, -13.3630,  30.1508]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 1, 4]
target tensor([0, 2, 1, 4])
<class 'torch.Tensor'>
loss
tensor(8.1021e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,  -1,   0,  ...,  -1,   0,   4],
         [  4,  -2,   0,  ...,   1,  -2,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   2,  -2,  ...,   0,   1,  -6],
         [  3,  -1,  -1,  ...,  -2,   0,  -1],
         [  2,   0,   0,  ...,  -3,   2,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  2,   3,   1,  ...,  -3,  -4,   0],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ 17.9411, -14.2917,  -8.8267, -11.4660,  -5.3567],
        [-10.2521, -24.3653, -10.6427,  33.9940, -13.4226],
        [-10.9501,  -1.7317,  11.8901, -12.0778, -24.2768],
        [ -9.9486,   1.1929,  11.2938, -31.2629, -15.9957]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 2, 2]
target tensor([0, 3, 2, 2])
<class 'torch.Tensor'>
loss
tensor(1.0550e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -2,  ...,  -6,  -5,   0],
         [  1,   5,  -1,  ...,  -4,  -2,   0],
         [  3,  -2,  -2,  ...,   0,   2,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  1,  -1,  -1,  ...,  -4,   1,   6],
         [  4,   2,   0,  ...,  -1,  -3,   8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   4,   0,  ...,   0,   0,   0],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-12.5067,  -7.1813,  33.0606, -17.6193, -19.3915],
        [  4.9021,  17.6368,  -5.9683, -12.0907,  -4.6015],
        [-20.8167,   2.9870,  -7.1639,   8.3729, -10.9110],
        [ 25.9172, -16.0073, -16.5150, -21.2040, -14.2957]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 3, 0]
target tensor([2, 1, 3, 0])
<class 'torch.Tensor'>
loss
tensor(0.0011, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.5781, -12.1175, -29.5841,  27.6114,  -8.6526],
        [  3.1712,  60.3178,  -9.3344, -45.8870,  -3.9490],
        [  7.6949, -16.5080, -10.9332, -48.5077,  35.2002],
        [ 12.9972, -11.1429,   5.8457, -15.8490, -12.8247]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 4, 0]
target tensor([3, 1, 4, 2])
<class 'torch.Tensor'>
loss
tensor(1.7881, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.0840, -20.5419, -16.6850, -24.6463,  28.4398],
        [  3.9929,  20.2343, -13.4583, -18.8490,  -5.5712],
        [  2.2695,  27.0796,  -1.2998, -22.2418, -19.9497],
        [ 32.4155,  -8.5780, -11.9664, -14.6782,  -8.3973]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 1, 0]
target tensor([4, 1, 1, 0])
<class 'torch.Tensor'>
loss
tensor(2.9802e-08, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  4.8005,  12.2636,  -8.9682,  -9.9004, -11.9291],
        [  9.6818, -11.3036,  15.9830, -12.6533, -14.6437],
        [ -0.2992,  -6.0208,  15.7310,  -3.7081,  -7.8797],
        [ -2.6860, -26.3831,  20.0693, -19.6605, -11.8589]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 2]
target tensor([1, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0006, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.4202,  29.5963,   5.2605, -44.2201,   2.4225],
        [ -7.5398,  -8.9783,  25.0586, -11.1773, -13.0711],
        [ 22.4706,  -3.5642,  -6.1126, -19.6270,   0.8503],
        [ -2.2487,  -4.5175, -14.4506,  22.5310, -14.5519]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 0, 3]
target tensor([1, 2, 0, 3])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   0,   0,  ...,   3,   0,  -5],
         [  2,  -2,  -2,  ...,   6,   1,  -6],
         [  3,   1,  -1,  ...,  -2,  -2,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   0,   0,  ...,   1,  -3,   0],
         [  1,   2,  -2,  ...,  -6,  -5,   0],
         [  0,   4,  -3,  ...,  -4,   6,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   1,   0,  ...,   0,  -1,   0],
         [  1,   0,   0,  ...,   2,   1,   3],
         [  3,   0,   1,  ...,   2,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -1.6963,  -2.6692,  30.4060, -27.7656, -23.1224],
        [  4.1531,  12.5847,   3.4290, -24.0746,  -8.7543],
        [ -0.0308,  -6.2203,  15.8562, -20.7931, -15.9966],
        [ -2.1494,  -1.0739,   3.5141,  -3.4893,  -6.0754]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 2, 2]
target tensor([2, 1, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0037, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  4.2491, -12.2473,  -7.8446, -26.5012,  24.5491],
        [  4.4178, -11.9982,  21.0578, -15.7724, -12.2983],
        [  3.4179,  -6.9162,  10.9852,  -1.3825,  -8.7818],
        [ 23.9553,  -6.1352,  -1.6369, -19.5701, -10.1453]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 2, 0]
target tensor([4, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0001, grad_fn=<NllLossBackward0>)
Epoch: [46][20/25]	Time 1.722 (1.772)	Data 0.027 (0.023)	Loss 0.0001 (0.1857)	Accuracy 100.000 (97.619)
train
input tensor([[[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.1118, -14.5580,  -7.3706,   8.2440, -12.1209],
        [ -4.3716,  15.5291,   2.3045,  -9.3137,  -5.8697],
        [-10.3585, -14.7629,   2.6318,   7.4220,  -6.2232],
        [ -5.8178,  19.5956,   1.1203, -13.1046,  -6.5503]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 3, 1]
target tensor([3, 1, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.0021, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 17.5986,  -6.0619,   0.9280, -12.8121, -16.9510],
        [ -0.2991,  -6.7193,  12.1005,  -7.4343, -13.1741],
        [ -5.3968,  19.8672, -15.1460, -14.0844, -12.9877],
        [  0.1476,  -3.6453,  -3.6365,  12.1896, -12.0638]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 1, 3]
target tensor([0, 2, 1, 3])
<class 'torch.Tensor'>
loss
tensor(2.5928e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 17.2859, -11.9966,  -4.7944, -14.5974,  -4.7924],
        [ -9.0880,  -1.2808,  47.3794, -45.6237, -15.7919],
        [ -2.2574,   1.2564,   5.0351, -13.7553,  -7.3649],
        [  0.1561,  -2.5321,  14.5490,  -3.7084, -15.5895]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 2]
target tensor([0, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.9505, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.6727e+00,  1.4170e+01,  5.1799e-01, -1.1611e+01,  1.7048e-02],
        [-1.5600e+00, -1.1707e+01,  2.2392e+01, -1.2772e+01, -3.3803e+00],
        [-4.6487e+00, -1.4104e+01, -1.5953e+01,  2.9337e+01, -6.0828e+00],
        [ 1.3926e+01,  2.3090e+00, -4.6887e+00, -1.3236e+01, -9.1489e+00]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 3, 0]
target tensor([1, 2, 3, 0])
<class 'torch.Tensor'>
loss
tensor(2.7418e-06, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  4.5317,   0.2467,   4.8883, -11.1723,  -7.8231],
        [ -0.9476, -12.0526,   8.4961,  -8.5100,  -3.4081],
        [  5.8036, -13.4130,   4.2066, -18.3487,  -9.4784],
        [  0.6214,  -1.4492,   7.7071,  -7.3917,  -5.7058]])
<class 'torch.Tensor'>
[2, 2, 0, 2]
target tensor([0., 4., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.2456)
Test: [0/13]	Time 0.469 (0.469)	Loss 3.2456 (3.2456)	Accuracy 50.000 (50.000)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.3319,  -8.1211,   3.6543, -14.3531,  -8.8808],
        [ -1.6349,  -1.2584,   4.1002,  -3.4507,  -6.5101],
        [ -1.1154,   3.7245,   7.9837,  -7.0211,  -9.8837],
        [ -1.2931,   1.6416,   0.8133, -10.0491,  -7.9869]])
<class 'torch.Tensor'>
[2, 2, 2, 1]
target tensor([2., 1., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.1875)
evaluate
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  6,  -2,   0,  ...,   1,   0,   2],
         [  1,  -1,   0,  ...,   0,  -6,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  7,  -4,   0,  ...,  -1,   1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  4,  -3,   0,  ...,  -1,   1,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -1,  ...,   2,  -3,   4],
         [  2,  -1,   0,  ...,   0,  -3,   2],
         [  2,  -1,  -4,  ...,   0,  -4,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -0.2107,  -2.1194,   1.7457, -16.7505,  -7.0766],
        [  0.9217,  -1.6102,   8.3097, -10.4538,  -9.7084],
        [  2.7658,   1.0164,   1.9219, -11.1606,  -6.4850],
        [ -1.2342,   0.6187,   6.0341, -17.4537, -12.2889]])
<class 'torch.Tensor'>
[2, 2, 0, 2]
target tensor([1., 4., 1., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(11.9373)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.7075,  -9.1547,   5.9328,  -9.5420, -16.8788],
        [  2.4547,  -8.6998,   4.7191,  -9.9831,  -9.2139],
        [  3.6616,  -0.7977,   3.2068, -12.9551,  -9.4160],
        [ -2.9916,  -0.5606,   7.8492, -10.2036,  -4.8868]])
<class 'torch.Tensor'>
[2, 2, 0, 2]
target tensor([2., 3., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.8263)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.2491,  -8.3199,   6.7052, -20.0977,  -7.8152],
        [ -0.6492,   0.9882,   4.0669,  -6.3139,  -3.4188],
        [  1.8071,  -2.6526,   3.9674, -13.7781,  -8.5021],
        [ -3.4725,  -0.2608,  11.0288,  -7.4463,  -7.3589]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 2., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.5813)
evaluate
input tensor([[[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.6042,  -5.7587,   7.5318,  -7.8030,  -8.3627],
        [ -4.4726,  -6.4226,   6.0834, -17.0755,  -3.8996],
        [  3.5749, -10.0837,  10.3505, -13.7950, -12.8845],
        [  0.6367,  -9.9256,   2.9078, -14.9404, -11.1728]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([4., 0., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(11.7460)
evaluate
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.9666,  -2.3474,   4.8035,  -5.5143,  -9.3549],
        [ -5.0703,  -2.2528,   7.4701,  -3.4091,  -7.5214],
        [  0.2320,  -3.6128,   6.4687, -14.3636,  -7.2660],
        [ -0.2885,  -3.8401,   9.0775, -12.8818,  -9.2811]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 2., 3., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.5556)
evaluate
input tensor([[[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.4593,  -6.5962,   8.1448, -11.7264,  -8.9958],
        [  1.5408,  -7.8212,   7.6943, -15.0930,  -9.8883],
        [ -1.3745,  -0.9484,   2.2914, -14.8530,  -4.1889],
        [ -0.8536,  -3.8847,   9.0738,  -7.1341, -11.0818]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 0., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.7286)
evaluate
input tensor([[[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,   0,  ...,  -1,  -3,  -1],
         [  5,   0,   0,  ...,   6,  -1,   7],
         [  0,   1,  -4,  ...,   0,  -1,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,  -2,  -2,  ...,   0,   0,  -3],
         [  1,  -2,  -1,  ...,   2,  -4,  -5],
         [  2,   0,  -2,  ...,  -3,   4,  -5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  2,   3,   1,  ...,  -3,  -4,   0],
         [  1,   1,   0,  ...,   0,   6,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -4.4105,   0.2744,   7.2638, -16.7748,  -8.3967],
        [ -2.0828,  -0.5195,  11.1784, -13.4534, -12.5239],
        [  1.7406,  -2.5933,   3.6636, -13.0571,  -8.8643],
        [  1.8530,  -3.5252,  -0.3205, -16.8316, -11.1784]])
<class 'torch.Tensor'>
[2, 2, 2, 0]
target tensor([2., 2., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.0869)
evaluate
input tensor([[[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.2059,  -1.6053,   5.8505,  -5.2667,  -7.6624],
        [ -1.6318,   1.8457,   3.3492, -14.5581,  -7.5583],
        [  0.3975,  -2.9316,   3.5237,  -2.9594,  -6.8946],
        [ -1.1844,  -6.8799,   8.9758,  -7.1716,  -9.1583]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 1., 1., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(8.3539)
evaluate
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.6235,  -5.3862,   3.1775,  -8.4602,  -8.5375],
        [  2.9059,  -6.0646,   3.2387,  -8.5173,  -7.8608],
        [  1.3263,  -5.0741,   5.2979,  -6.0610,  -9.4466],
        [ -0.9705,  -4.1043,   6.1424, -11.0635,  -7.6692]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 3., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.6463)
Test: [10/13]	Time 0.524 (0.516)	Loss 5.6463 (5.3541)	Accuracy 50.000 (43.182)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.4674,   1.2991,   4.8356,  -7.0045,  -7.5068],
        [ -1.2125,  -1.2277,   7.4673,  -9.1367, -10.5879],
        [  0.7899,  -4.2456,   2.5228,  -5.3332, -11.7797],
        [  1.7284,  -5.7371,   7.6498,  -7.1118,  -7.0524]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 2., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.4039)
evaluate
input tensor([[[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.0688,  -1.8134,   3.8208,  -4.8228,  -3.1184],
        [  0.1570,  -5.1327,   6.9666,  -9.0878, -13.9015]])
<class 'torch.Tensor'>
[2, 2]
target tensor([0., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(9.4369)
epoch: 47
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.3793, -27.1846, -13.4953, -30.4083,  34.4628],
        [-14.8827, -13.0702,  23.3922,  -7.2302, -22.6405],
        [-15.6982,  28.4907,  -8.6732, -22.2811, -11.5356],
        [ -4.5231,  -3.8861,  10.5344, -11.9323,  -9.6715]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 1, 2]
target tensor([4, 2, 1, 2])
<class 'torch.Tensor'>
loss
tensor(2.0862e-07, grad_fn=<NllLossBackward0>)
Epoch: [47][0/25]	Time 1.886 (1.886)	Data 0.024 (0.024)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
train
input tensor([[[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.1648,  -8.4259,  20.0977, -17.4225, -16.5551],
        [  0.9027, -21.3965,  15.4843, -18.2919, -22.9404],
        [ -9.7443,  -7.7003,  41.7598, -17.9507, -31.9808],
        [ -4.8837,  29.6960,  -9.0804, -15.2383,  -6.0564]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 1]
target tensor([2, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(1.1921e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 19.5648,  -8.5630,  -5.3824, -14.0047, -19.5274],
        [ -6.6310, -16.8652,  -4.7303,  29.3488, -32.8877],
        [  1.4591,   9.2733,  -1.6203,  -3.7195,  -4.3561],
        [ -8.7254,  44.8429,   7.5321, -47.7102, -11.6118]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 1, 1]
target tensor([0, 3, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0001, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.6400, -15.5404,  24.7015, -16.3423,  -7.8724],
        [-10.5536, -13.1009,  -0.4588,   8.5516, -13.0891],
        [ 21.3855,  -4.6022,  -3.7783, -13.1093,  -1.6297],
        [ 17.3677, -15.2835,  -3.3020, -10.8461, -12.4027]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 0, 0]
target tensor([2, 3, 0, 0])
<class 'torch.Tensor'>
loss
tensor(3.0546e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 19.7440,  -8.9902,  -6.8900, -14.3939, -20.1153],
        [ 11.8209,  -9.0247,   5.7434, -13.8004, -22.5466],
        [ -8.9159,  35.4742, -14.8214,  -7.8881,   2.6691],
        [ -4.3505,  -7.1352,  20.9141,  -3.8360, -27.7148]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 1, 2]
target tensor([0, 0, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0006, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  6.8212, -12.2707,  -6.0257, -15.2945,  27.9205],
        [ 17.7861,  -3.9056,  -0.1122, -26.9757, -13.4929],
        [  0.4032,  14.7198,  -6.8096, -14.2947, -13.2788],
        [  3.6858,  25.0759,   2.9952, -21.5259,  -3.2393]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 0, 1, 1]
target tensor([4, 0, 1, 1])
<class 'torch.Tensor'>
loss
tensor(1.4901e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-13.0119, -12.7653, -10.7802,  20.6865, -12.6711],
        [ 16.7780,  -5.8919,  -4.6651, -18.2598,  -9.3900],
        [ -1.7915,  -8.2710,   9.7760,  -6.5826,  -6.6967],
        [ -1.6629,  -3.9382,  -6.6021,  14.9849, -12.6884]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 2, 3]
target tensor([3, 0, 2, 3])
<class 'torch.Tensor'>
loss
tensor(2.4736e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   0,   0,  ...,  -4,   3,  -1],
         [  0,   1,   1,  ...,   6,   1,  -1],
         [  1,   2,   3,  ...,   0,  -3,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,  -2,  ...,   2,  -2,  -4],
         [  3,  -1,  -2,  ...,   0,   3,   4],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   0,   0,  ...,   2,   0,  -8],
         [  0,   2,  -2,  ...,  -3,   4,  -2],
         [  2,  -2,  -1,  ...,   2,  -3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -1.8507,  -2.7889,   6.6611,  -3.5013,  -3.2445],
        [ -9.9642,  -0.4407,  30.7321, -27.0220, -18.4932],
        [ -6.5234,  -1.4399,   3.0026,   0.7862,  -5.9550],
        [ -6.6483, -30.9533,   2.6317, -38.2670,  52.7402]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 4]
target tensor([2, 2, 3, 4])
<class 'torch.Tensor'>
loss
tensor(0.5827, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.4470,  -0.1877,  17.3544,  -5.4378, -10.4796],
        [ -3.7324,  -4.1802,   8.1705,  -3.6200, -13.2201],
        [-13.5040,  -6.9959,  -7.7905,  19.4330, -35.9893],
        [-31.8737,  -6.3088,  38.6788, -18.8045, -13.5507]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 3, 2]
target tensor([2, 2, 3, 2])
<class 'torch.Tensor'>
loss
tensor(4.6789e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 30.4712,  -3.8925, -17.7826, -23.6045, -17.1810],
        [ -8.4569,   0.5403,  11.2364,  -3.0309, -11.9974],
        [ -2.5601,   1.5400,  20.7498, -12.3979,  -7.6843],
        [-11.8712,  31.5236,   0.7375,  -6.6319, -27.8035]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 1]
target tensor([0, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(5.8114e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0,  0,  ...,  7,  0, -1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.1986, -11.6921, -23.0358,  31.3357, -10.1016],
        [ -4.6948,  -0.9626,  -5.3132,  -2.9159,  14.1571],
        [  9.3454,   5.3031,   4.4319, -18.8090, -10.9376],
        [ -7.4052,  -0.2891,   6.6204,  -3.3878,  -9.7650]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 4, 0, 2]
target tensor([3, 4, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0064, grad_fn=<NllLossBackward0>)
Epoch: [47][10/25]	Time 2.133 (1.861)	Data 0.028 (0.021)	Loss 0.0064 (0.0536)	Accuracy 100.000 (97.727)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 10.1629,   0.9392,  -4.7904,   1.2395,  -3.7961],
        [ -2.3327,  -4.2184, -20.2665,  14.5253,  -7.7946],
        [-13.8890,  -0.9130,  16.8376, -13.7317, -10.3842],
        [ -5.5424,  24.6901,  -7.5388, -13.9402, -16.6742]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 2, 1]
target tensor([0, 3, 2, 1])
<class 'torch.Tensor'>
loss
tensor(5.8287e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 17.8320,  -8.1333, -14.9290, -12.5731, -10.6969],
        [ -1.3304,  14.8846, -10.4052,  -6.8673,  -9.7923],
        [  6.3307,  -2.1843,  -7.9888,  -3.8065,  -3.4596],
        [-10.2953,  36.4348, -16.4569, -17.7645, -21.0603]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 0, 1]
target tensor([0, 1, 0, 1])
<class 'torch.Tensor'>
loss
tensor(7.4167e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [  5,  -1,  -1,  ...,  -1,   2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,  -1,  ...,  -3,   2,   3],
         [  2,  -1,  -1,  ...,   0,   1,  -2],
         [  1,   0,   0,  ...,   1,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   0,  -2,  ...,   2,  -4,   0],
         [  0,   1,  -1,  ...,  -5,   4,   0],
         [  1,   2,  -2,  ...,  -6,  -5,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -6.3832, -21.7350, -13.7752,   7.5614, -14.8992],
        [ -5.5521,   0.4830,  22.3123, -24.3924, -20.9402],
        [ -3.2686,  -6.3602,  17.0476, -10.1583, -13.8564],
        [-10.3871, -13.5124,  29.5570, -24.2771,  -7.3372]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 2, 2]
target tensor([3, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(2.0862e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.2993,   3.6308,  40.4818, -33.2149, -11.2532],
        [  9.9623,  -1.6973,  -7.3411,  -2.5824, -18.4106],
        [ 49.7579, -44.0209, -24.2320, -24.6130, -33.6695],
        [ -1.8147,  21.0966, -11.4488,  -7.0846,  -2.1253]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 0, 1]
target tensor([2, 0, 0, 1])
<class 'torch.Tensor'>
loss
tensor(3.0398e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.0708,  -5.9850,  38.3069, -32.6508, -13.7754],
        [ -5.3171,   5.8900,  -1.5036, -19.9399, -14.5055],
        [ -2.1402,  -8.2679,  12.9863,   0.3844,  -6.8500],
        [  9.5085,  -3.0555,  -4.2889,  -2.6886,  -9.8062]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 2, 0]
target tensor([2, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(1.8485, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.6214,  -1.9123,  -5.4007,  14.0276, -11.8000],
        [ 20.2577,  -9.1471,  -9.0998, -18.6267, -21.6223],
        [ -2.4608,  -2.2163,   7.6667,  -9.9048,  -2.6269],
        [ 14.0539,  -3.7137,  -7.8156,  -7.4601,  -5.5985]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 2, 0]
target tensor([3, 0, 2, 0])
<class 'torch.Tensor'>
loss
tensor(3.1231e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[  2,  -2,  -3,  ...,  -2,  -2,  -4],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -3,  -1,  ...,  -4,   5,   8],
         [  2,   0,  -2,  ...,   2,  -2,  -4],
         [  3,  -1,  -2,  ...,   0,   3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  1,  -1,  -1,  ...,  -4,   1,   6],
         [  4,   2,   0,  ...,  -1,  -3,   8],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  3.1472,   1.6268,   6.5613,  -5.5259,  -5.7934],
        [ -2.8645,  17.8305, -12.9869,  -6.7595,  -6.0256],
        [-13.4848, -17.7341,   5.0316,  19.4137, -15.2264],
        [-17.9974, -15.8091,  23.9327, -13.1592,  -6.3927]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 3, 2]
target tensor([2, 1, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0098, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -3, -1,  ...,  0, -2,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 0,  0,  0,  ...,  1, -4, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.1499,  15.5516, -11.1977,  -7.3949,  -6.1414],
        [-13.1588,  21.3646,  -2.5771, -12.6645, -14.2491],
        [  2.6798, -17.0282, -13.8738, -18.9104,  22.5412],
        [  2.7977,  14.3621,   0.5726, -11.8937,  -7.6632]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 4, 1]
target tensor([1, 1, 4, 1])
<class 'torch.Tensor'>
loss
tensor(2.7120e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.5594, -26.5833,  -6.0740,  25.9694, -29.4295],
        [ -4.2789,  16.7019,   1.5268,  -1.6044,  -5.1992],
        [ -2.8989,  12.0570,   1.9088,  -3.9965, -10.3156],
        [ -7.6953,   2.1730,  10.7763,  -4.8030,  -5.4899]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 1, 2]
target tensor([3, 1, 1, 2])
<class 'torch.Tensor'>
loss
tensor(5.5875e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-17.8543, -13.4566, -19.2919,  11.5364, -18.5478],
        [ -4.3995,  -4.5846,  -6.8698,  15.3043, -16.0628],
        [-14.2600,  -1.4747,   7.9880,  -7.6944, -11.2353],
        [ -1.3062,  11.9232,  -6.6098,  -3.4501, -14.9688]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 2, 1]
target tensor([3, 3, 2, 1])
<class 'torch.Tensor'>
loss
tensor(1.9967e-05, grad_fn=<NllLossBackward0>)
Epoch: [47][20/25]	Time 1.809 (1.802)	Data 0.027 (0.022)	Loss 0.0000 (0.1166)	Accuracy 100.000 (97.619)
train
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.0541, -16.8094, -15.0772,  22.7025, -16.8448],
        [ -2.8873,  27.3515,   5.5036, -12.7940, -11.5956],
        [-10.2227,  -1.9884, -18.9874,  35.6850, -14.7982],
        [ -0.4807,  -5.2380,   9.7287,   5.1994,  -6.6871]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 3, 2]
target tensor([3, 1, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0027, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.3962, -12.4318,  14.2052,  -4.2173, -13.3733],
        [ -3.5156,  12.7751,  -0.6574, -15.8400,   2.6287],
        [-10.8297, -15.8694,  10.6031, -13.8266, -14.8340],
        [-12.4734, -12.4674,   6.6642,  19.9002, -21.5183]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 2, 3]
target tensor([2, 1, 2, 3])
<class 'torch.Tensor'>
loss
tensor(1.0639e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.5897, -24.6794,   6.2787, -14.4138,  26.1539],
        [  1.7829, -11.3671,  -4.2963, -18.1602,  41.8735],
        [ -6.2471,  18.8150, -19.2539,  -0.8113, -19.1591],
        [ 14.8391, -12.5285,  -4.7777,   1.4927,  -2.7648]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 4, 1, 0]
target tensor([4, 4, 1, 0])
<class 'torch.Tensor'>
loss
tensor(3.8743e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 15.3756,  -7.1739,  -5.0932, -13.2943, -11.1398],
        [ -2.4772, -10.4509,  13.2578, -21.6180,  18.8578],
        [ -2.9245,  -7.5897,  14.4680,  -8.9021, -10.8714],
        [ 15.9229, -17.5106,  -7.6320, -12.1032, -13.9515]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 4, 2, 0]
target tensor([0, 4, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0009, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.2847,  -7.8705,   3.5983,  -6.5962,  -8.8985],
        [ -4.2371,  -6.0438,   9.0765,  -5.2486, -13.5509],
        [  0.8495, -13.8222,   2.5021,  -0.9833, -10.7210],
        [ -3.9764, -10.9897,   8.3338,   0.3027,  -9.5764]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 2., 3., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.9052)
Test: [0/13]	Time 0.491 (0.491)	Loss 3.9052 (3.9052)	Accuracy 25.000 (25.000)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.7306,  -9.2855,   7.9269,  -3.9294,  -9.0205],
        [ -5.2592,  -3.8962,   7.3105,  -2.4069,  -4.8232],
        [ -1.5052,  -5.1285,   6.2227,  -1.5765, -10.0624],
        [ -2.7586,  -7.8039,   0.0435,  -6.1248,  -8.2892]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 2., 4., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(8.7131)
evaluate
input tensor([[[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ...,  2, -3, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-4.4173e+00, -4.2868e+00,  5.7742e+00, -7.3015e+00, -1.2350e+01],
        [-3.3775e+00, -1.5926e+01,  7.4055e+00,  1.0333e-02, -4.7209e+00],
        [-6.9246e-01, -3.0389e+00,  2.0473e+00, -9.3224e-01, -4.3066e+00],
        [ 8.6199e-01, -9.5078e+00,  6.5217e+00, -5.0613e+00, -9.4338e+00]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([3., 4., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(8.4305)
evaluate
input tensor([[[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.1860,  -8.6513,   5.3452,  -0.7888,  -7.5859],
        [ -2.4565, -13.5102,   2.7664,  -5.2824,  -9.8959],
        [ -4.6164,  -3.9442,   3.5680,   1.6320,  -8.2627],
        [ -7.0990,  -5.1080,   6.0553,   3.4621,  -7.6038]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 2., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.6005)
evaluate
input tensor([[[  0,   4,   0,  ...,   2,   5,   1],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,  -2,   2,  ...,   0,   5,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   3,   1,  -6],
         [  1,  -1,  -1,  ...,  -2,   0,   1],
         [  1,  -1,  -1,  ...,  -1,  -3,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -2,  -1,  ...,   2,  -4,  -5],
         [  2,   0,  -2,  ...,  -3,   4,  -5],
         [  1,   1,  -4,  ...,  -4,   2,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[  1.9260, -15.9202,   9.2420,  -5.1602, -13.4040],
        [ -8.4678,  -5.5368,   6.2566,  -7.3076,  -9.2607],
        [  0.9857,  -6.5015,   2.5431,  -4.8801,  -9.8613],
        [  0.5981,  -9.1498,   1.0535,  -0.8724,  -8.9162]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([1., 2., 0., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.3537)
evaluate
input tensor([[[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   4,   0,  ...,   0,   0,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,  -1,   0,  ...,   7,   3,   0],
         [  2,  -1,  -1,  ...,   2,   6,  -2],
         [  0,   0,  -2,  ...,  -1,   0,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -3.6729,  -5.1429,   0.7178,  -6.5091,  -4.6452],
        [ -0.0776,  -3.6045,   1.5792,  -4.4337,  -6.1779],
        [ -2.1955, -15.3428,   3.9531,   0.9650, -16.6949],
        [ -0.7228,  -7.9086,   1.0847,   1.2471, -10.6535]])
<class 'torch.Tensor'>
[2, 2, 2, 3]
target tensor([2., 1., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.5719)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.4875,  -2.5539,   2.6180,  -3.7350,  -8.6639],
        [  2.6100, -18.1605,   2.5262, -10.5453,  -9.7872],
        [ -1.7871,   1.2635,   0.3013,  -1.2827,  -7.8037],
        [ -1.4887, -15.9291,   2.2317,  -6.1829, -11.3164]])
<class 'torch.Tensor'>
[2, 0, 1, 2]
target tensor([0., 0., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.7034)
evaluate
input tensor([[[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.8037,  -8.5938,   3.7716,  -3.6063,  -9.5527],
        [ -3.6388,  -9.1881,   4.1539,  -2.7903,  -8.5215],
        [ -5.4250,  -2.4452,   1.7426,  -5.1886,  -8.4692],
        [ -8.1974, -12.5956,   6.8881,  -6.7734,  -4.0197]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([0., 1., 1., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(9.3050)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.8212, -15.8970,   6.7178, -10.7682,  -9.5249],
        [ -2.7159,  -8.1395,   4.2403,  -1.6691, -14.8640],
        [ -1.9302,  -5.7602,   4.2907,   0.3171,  -7.1795],
        [ -3.5712,   0.2990,   4.9518,   1.0944,  -9.4532]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 3., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.4910)
evaluate
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.0450,  -6.9256,   0.7968,  -0.3660, -12.4311],
        [ -1.3124,  -5.3732,   1.8907,   1.0435, -10.9169],
        [ -4.3520,  -6.1535,   1.7489,   1.0887,  -8.1291],
        [ -2.0967,  -1.1087,   1.2682,  -0.8402,  -3.8946]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 2., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.8794)
evaluate
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.8562,  -3.8972,   4.1949,  -1.5067, -11.0455],
        [ -6.7757,  -9.9096,   5.2655,   0.8186,  -8.5004],
        [ -3.6675,  -8.0451,   7.0970,   1.2034, -11.9568],
        [ -4.1151,  -8.0462,   0.9713,  -0.3376,  -9.8158]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2., 4., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.5072)
Test: [10/13]	Time 0.580 (0.561)	Loss 3.5072 (4.7692)	Accuracy 75.000 (40.909)
evaluate
input tensor([[[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.5856,  -9.3103,   6.5344,  -5.4624,  -6.0375],
        [  0.1457, -10.7065,  -0.0151,  -7.5084, -11.3647],
        [ -1.0293, -13.1294,   5.5674,  -5.8394,  -9.7979],
        [ -2.8666,  -3.1845,   2.5139,   1.9867,  -6.6572]])
<class 'torch.Tensor'>
[2, 0, 2, 2]
target tensor([3., 2., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.3849)
evaluate
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-0.8230, -6.0102,  0.9536,  2.5183, -7.1178],
        [-6.1250, -4.5691,  8.7211,  0.8057, -9.0186]])
<class 'torch.Tensor'>
[3, 2]
target tensor([1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.3739)
epoch: 48
train
input tensor([[[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1, -1,  ..., -5,  4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  6.3766,  -5.1969,  -3.4772,  -0.8287,  -3.8839],
        [ -8.1128, -11.5600, -25.2984,  32.3623, -15.9539],
        [ -7.9062, -26.0707,  -5.5990,  31.0463, -27.0392],
        [  2.1579,   6.0066,  -3.2166,  -4.8349,  -1.5195]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 3, 1]
target tensor([0, 3, 3, 1])
<class 'torch.Tensor'>
loss
tensor(0.0056, grad_fn=<NllLossBackward0>)
Epoch: [48][0/25]	Time 1.765 (1.765)	Data 0.028 (0.028)	Loss 0.0056 (0.0056)	Accuracy 100.000 (100.000)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3, -1,  ...,  0, -3,  5],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.6146, -17.5208,  24.3246,  -9.6767, -13.6489],
        [-10.9493,  20.8775,  -4.0537,  -6.9856, -34.4145],
        [ 12.2015, -13.8608,  -9.5305,  -4.3020, -21.7907],
        [ 12.4122, -13.4764,  -2.7263,  -3.2704,  -8.6441]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 1, 0, 0]
target tensor([2, 1, 0, 0])
<class 'torch.Tensor'>
loss
tensor(1.1921e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.6359, -10.1595, -14.0056,   1.7275,  13.8674],
        [ 14.2753, -15.4849,  -7.2871, -13.8787,  -9.7514],
        [ 12.1228, -10.0449,  -1.0099,  -9.9115,  -8.0739],
        [-10.1565,  16.2105,   6.0489,  -8.2796,  -1.4169]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 0, 0, 1]
target tensor([4, 0, 0, 1])
<class 'torch.Tensor'>
loss
tensor(1.1951e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[  5,   0,  -2,  ...,   0,  -3,   0],
         [  2,  -1,   0,  ...,   0,   5,   3],
         [  4,  -3,   5,  ...,   7,  -2,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   0,  -2,  ...,   0,  -7,   1],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  1,   2,   3,  ...,   0,  -3,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   0,  -2,   0],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  0,   0,   0,  ...,   1,  -4,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -5.4019, -10.8386,  -5.1184,  18.8478, -17.8880],
        [-24.6708, -15.7041,  -7.8243,  40.4963, -18.2389],
        [-11.8284, -19.4053,  23.8405, -15.5974, -13.7320],
        [-11.8776,  16.2598,  -2.5777,  -7.1535,  -8.3591]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 2, 1]
target tensor([3, 3, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   0,   3,  ...,   2,   2,   2],
         [ 10,  -6,   1,  ...,   2,  -5,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,  -1,   0,  ...,   7,   3,   0],
         [  2,   0,   0,  ...,   7,   0,  -1],
         [  3,   0,   0,  ...,   1,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,  -2,  -1,  ...,   0,   0,   0],
         [  0,   1,   1,  ...,   6,   1,  -1],
         [  2,   0,   0,  ...,   7,   0,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ 45.4447, -64.5110,  -8.9044, -20.5469, -21.8864],
        [ -4.0577,  -7.6091,  12.5998,  -0.2056, -15.5545],
        [ -0.0755,  -6.6482,   5.9252,  -1.9439,  -7.0932],
        [ 19.9261,  -7.6020,  -3.0044, -28.3512, -22.1278]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 0]
target tensor([0, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0.0007, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.0109,  10.6791,  -2.4090,  -8.5412, -11.8545],
        [ -4.1428, -11.1970,  12.0191,   2.5192, -12.2081],
        [-17.0377, -55.9282,  47.7437, -16.8708, -17.8828],
        [ -1.8957, -23.6907,  26.6027,  -3.9341, -10.3039]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 2]
target tensor([1, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(1.9281e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.2314,  -7.3965,  -3.5369,  12.2974, -13.7175],
        [ -1.3146,   5.5159,  -1.6296,   0.6119,  -6.1505],
        [ -4.2936,  12.7940,  -6.5274,   0.3520,  -7.7824],
        [ -8.6833,  -8.4917,  18.9217,   1.0216, -20.4099]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 1, 2]
target tensor([3, 1, 1, 2])
<class 'torch.Tensor'>
loss
tensor(0.0023, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.2023,  -5.6470,  10.7744,  -2.4008,  -9.4039],
        [ -4.5996, -15.7540,  16.9488,  -4.6879, -16.0457],
        [ -2.2346,  -8.2805,  11.2189,  -3.9415, -11.8667],
        [ -6.9476,  58.0846,   2.0179, -36.1631, -17.2313]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 1]
target tensor([2, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(1.4901e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  4.1282, -44.0962,  25.7682,   0.3844, -18.4616],
        [ -2.8560, -13.6458,  37.2586, -11.1501, -12.8864],
        [ 21.7856, -17.5046,   3.4593,  -3.5352, -24.0753],
        [  1.4996,   1.4168,   6.6569,  -4.4425, -11.3516]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 0, 2]
target tensor([2, 2, 0, 1])
<class 'torch.Tensor'>
loss
tensor(1.3128, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.3407, -10.1416,  14.7058,   3.6882,  -6.0988],
        [ -0.2382, -15.7093,   2.5443, -30.9659,  14.8230],
        [-12.3540,  15.2203,  -8.6558,  -3.4425,  -9.1212],
        [  0.0627, -31.0607,  -4.3968,  -2.5793,  17.1291]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 4, 1, 4]
target tensor([2, 4, 1, 4])
<class 'torch.Tensor'>
loss
tensor(5.3346e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-20.7251, -23.2280,  30.1828, -13.6725,  -6.0003],
        [ -0.8379, -28.6758,  25.8054,  -9.2314, -14.5436],
        [-11.1034,  -3.0017,  51.2299, -38.4094,  -1.9257],
        [ 21.6683, -22.2530,  -1.2873, -22.9851,  -5.2981]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 0]
target tensor([2, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
Epoch: [48][10/25]	Time 1.744 (1.756)	Data 0.027 (0.026)	Loss 0.0000 (0.1201)	Accuracy 100.000 (97.727)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 10.4624, -10.7331,  -5.3619,   1.1976,  -8.9206],
        [ -5.1020, -10.6113,   6.0859,   3.3266,  -7.2100],
        [ -2.3231, -15.2429,  -5.9918,  21.8866, -10.1987],
        [ -5.1183,  -9.7913,  18.6676,  -2.0512, -17.6785]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 3, 2]
target tensor([0, 2, 3, 2])
<class 'torch.Tensor'>
loss
tensor(0.0154, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  1,  ...,  1,  3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 2,  0, -1,  ..., -3,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.2732, -18.3358, -29.1887,  31.6706, -12.7976],
        [-10.1099,  -7.8867,  27.0099,   3.7903, -19.2477],
        [ -5.5073, -12.6997,  -3.3887,  14.7596, -13.2903],
        [-10.2180, -13.4683,   1.1552,  19.1379, -18.9323]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 3, 3]
target tensor([3, 2, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 2,  0,  0,  ..., -2,  5,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.7640, -21.3709, -15.9271, -21.8217,  55.8480],
        [ -2.9027,   8.8264,  -3.6194,  -5.7702,  -3.6372],
        [ -9.2178,  25.1070, -16.1690, -10.6584, -22.3954],
        [-40.1774, -16.7197,  52.7049, -10.2140, -19.7767]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 1, 1, 2]
target tensor([4, 1, 1, 2])
<class 'torch.Tensor'>
loss
tensor(4.0829e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.7609, -13.1479, -14.6962,  25.0029,  -9.6627],
        [-23.6203, -27.9244,  19.4832,  -0.2793, -11.6984],
        [  0.6122,  -1.0171,  -7.3125, -10.7276,  17.7688],
        [ -3.5025, -12.8117,  10.2974,   1.4887, -12.9180]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 2, 4, 2]
target tensor([3, 2, 4, 2])
<class 'torch.Tensor'>
loss
tensor(3.7608e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  9.1023, -10.1870,  -0.3756,  -7.7300,  -5.6254],
        [ 15.5913, -19.3027,   1.1263, -13.5868,  -4.9998],
        [-14.6790,  -7.5817,  34.2196, -23.9762, -15.2947],
        [ -6.7346,  21.9142,  -0.6622, -15.1318,  -3.9235]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 2, 1]
target tensor([0, 0, 2, 1])
<class 'torch.Tensor'>
loss
tensor(1.9341e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-12.8313,  48.8168, -35.9258,   2.2614,  -6.4427],
        [ 11.5465,  -9.2670,  -2.7435,   5.3561,  -5.9846],
        [ -7.4532,  -8.4965,   7.5458,  -0.7793,  -5.3630],
        [-17.3295, -13.2811,   5.5436,  12.0387, -13.8248]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 2, 3]
target tensor([1, 0, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0010, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.6656,  37.1826,   5.4851, -23.9581, -14.3275],
        [ -5.2914,  12.5050,  -7.2638,  -1.1843, -10.1894],
        [ -7.2496,  -5.4865,  11.4751,  -2.6050, -11.1424],
        [-11.4433,  -3.9298,  19.2304,  -5.2585, -18.8198]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 2]
target tensor([1, 1, 2, 2])
<class 'torch.Tensor'>
loss
tensor(4.7684e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.9675, -37.3937,  -1.7958,  19.0793, -21.4267],
        [-12.2082,  20.8315,  -6.0920,  -5.4271, -15.0057],
        [ -9.3740, -22.3728, -12.5547, -18.8413,  32.4384],
        [ 22.6393,  -3.5385, -10.4604, -10.6817,  -7.7357]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 1, 4, 0]
target tensor([3, 1, 4, 0])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0, -4,  ..., -4, -9,  5],
         [ 6, -6,  1,  ...,  0,  0,  3],
         [ 0,  2, -2,  ..., -7, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.2200, -14.8352, -21.4467,  25.8398, -11.1755],
        [-11.8644, -11.1001,   0.6938,  23.8514, -19.4977],
        [  4.8594,  -6.5971, -16.6520,  18.0814, -15.0706],
        [-11.6787,   1.0715,  33.7916, -18.0106, -15.7900]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 3, 2]
target tensor([3, 3, 3, 2])
<class 'torch.Tensor'>
loss
tensor(4.4703e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 6, -2,  1,  ...,  0, -1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [11, -3,  0,  ...,  3,  0,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 7.9086e+00, -7.5037e+00, -8.3985e+00, -9.5614e+00, -1.6467e+01],
        [-1.4454e+01, -1.1295e+01,  2.7137e-02,  2.5030e+01, -2.9135e+01],
        [-9.4285e+00,  1.3700e+01, -1.1201e+01, -6.3706e+00, -7.1102e+00],
        [-3.0063e+00, -1.4655e-02,  3.2740e+00, -2.2234e+01,  1.7111e+01]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 1, 4]
target tensor([0, 3, 1, 4])
<class 'torch.Tensor'>
loss
tensor(3.5763e-07, grad_fn=<NllLossBackward0>)
Epoch: [48][20/25]	Time 1.687 (1.779)	Data 0.027 (0.027)	Loss 0.0000 (0.0637)	Accuracy 100.000 (98.810)
train
input tensor([[[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-11.0855,  -6.6831, -23.2665,  26.5338, -10.8511],
        [ 28.4055,  -8.6538, -16.1561, -14.6276, -25.0838],
        [  9.7301,  -1.5091,  -7.0205,  -6.4023,  -6.3756],
        [ -7.7640,  18.5497,  -3.0425,  -3.5754,  -7.7581]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 0, 1]
target tensor([3, 0, 0, 1])
<class 'torch.Tensor'>
loss
tensor(3.3378e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  9.6690,   0.3452, -12.9787, -17.3942,  -8.2043],
        [  0.2705,  -7.8636,   0.8850,  -9.8897, -18.6078],
        [-10.3559,  -6.4633,  16.2455,  -0.8585,  -8.1654],
        [ -2.4947,  11.3237,  -6.2042,  -0.7716,  -9.8472]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 1]
target tensor([0, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.1081, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.7315,  -6.9010, -10.5416,  -7.7625,  14.7241],
        [ 15.4973, -23.0085, -13.2332, -16.8643, -17.3246],
        [ 27.5162, -10.1081,  -7.3138, -13.0747,  -5.2961],
        [ -2.1531,  23.7826,  -9.0338, -13.5399, -15.8690]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 0, 0, 1]
target tensor([4, 0, 0, 1])
<class 'torch.Tensor'>
loss
tensor(1.5497e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[  2,  -3,  -1,  ...,  -4,   5,   8],
         [  2,   0,  -2,  ...,   2,  -2,  -4],
         [  3,  -1,  -2,  ...,   0,   3,   4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  4,  -2,   0,  ...,  -4,   2,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  2,  -1,  -1,  ...,   0,   1,  -2],
         [  5,  -1,   0,  ...,   7,   3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-13.2196,  20.7403,  -8.8746,  -0.7025, -19.3082],
        [ -2.4999, -21.7373,  14.6836, -22.1274, -16.8594],
        [ -8.2666, -13.2163,  12.8977,  -3.3783,  -7.8349],
        [-14.0656,   0.5420,   6.5219,  -2.9819, -13.9059]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 2]
target tensor([1, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0007, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  0,   0,  -3,  ...,   5,   0,  -5],
         [  7,  -4,   0,  ...,  -1,   1,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,   0,  -1,  ...,  -4,   0,  -3],
         [  7,  -1,  -1,  ...,   0,   5,   1],
         [  2,  -2,  -1,  ...,   0,   0,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   4,   0,  ...,   0,   0,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-3.9259, -2.5291,  2.9401, -2.3819, -8.0049],
        [-1.4086,  3.0099, -3.7037, -2.8551, -4.9179],
        [ 1.2770,  3.4512, -1.8888, -2.9281, -8.3028],
        [-5.3192,  2.2715, -4.8795, -5.0633, -2.3334]])
<class 'torch.Tensor'>
[2, 1, 1, 1]
target tensor([0., 1., 0., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.0857)
Test: [0/13]	Time 0.488 (0.488)	Loss 4.0857 (4.0857)	Accuracy 25.000 (25.000)
evaluate
input tensor([[[ 2,  0, -1,  ...,  1,  1,  3],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2,  0,  0,  ...,  0, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.6505,   6.8038,  -4.9992,  -3.5279,  -7.2920],
        [ -1.7098,  -2.3996,  -2.5046,   3.2779,  -5.6503],
        [ -0.0708,  -8.2678,   3.4714,  -2.8211, -11.7833],
        [ -9.2363,  -0.8602,  -1.9504,   1.9919,  -7.4284]])
<class 'torch.Tensor'>
[1, 3, 2, 3]
target tensor([1., 1., 1., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.7388)
evaluate
input tensor([[[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.9846,  -0.0987,  -3.1387,   0.8803, -11.4388],
        [ -4.6008,  -4.7471,  -3.7139,  -3.4844,  -8.8052],
        [ -4.0015,   0.2779,  -1.4233,  -0.4685, -13.5436],
        [ -1.2123,   0.0558,  -2.1321,  -4.0324,  -8.6149]])
<class 'torch.Tensor'>
[3, 3, 1, 1]
target tensor([2., 2., 3., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.0866)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  2, -2,  ..., -3, -1,  0],
         [ 2, -2, -1,  ...,  2, -3,  4],
         [ 0, -2, -5,  ...,  0,  4,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.6974,  7.0669, -4.2247, -0.6114, -6.9160],
        [-8.1888,  2.0076,  3.5745,  1.4684, -8.7487],
        [-4.9023,  5.8565,  0.9712,  1.6850, -8.4478],
        [-3.1530, -6.5926, -4.6891, -4.0551, -9.3008]])
<class 'torch.Tensor'>
[1, 2, 1, 0]
target tensor([2., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.6314)
evaluate
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.1400,  1.0056, -1.9623, -4.4080, -7.5521],
        [-3.4738, -4.1684, -1.5651, -4.3288, -8.0949],
        [-2.8542,  0.2611, -0.0347,  1.2252, -6.1219],
        [-4.3220,  1.2354, -6.5016, -4.6396, -6.5451]])
<class 'torch.Tensor'>
[1, 2, 3, 1]
target tensor([0., 0., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.7972)
evaluate
input tensor([[[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 1,  2, -2,  ..., -4,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.2285,  -0.0697,  -4.6553,   1.0856,  -7.7672],
        [ -5.5127,  -1.1319,   0.9375,   2.6763, -10.8395],
        [ -4.6098,  -5.7319,  -2.8943,   2.3454, -15.8197],
        [ -3.2613,  -1.1858,  -2.0468,  -1.4916,  -8.5756]])
<class 'torch.Tensor'>
[3, 3, 3, 1]
target tensor([2., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.0214)
evaluate
input tensor([[[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.1288e+00, -2.2977e+00, -3.5041e+00,  2.9663e+00, -9.5672e+00],
        [-7.1327e+00, -7.2808e+00, -3.7871e-01, -8.7576e+00, -8.1717e+00],
        [-5.9094e+00,  2.0923e+00,  1.9721e+00, -4.0205e+00, -1.1833e+01],
        [-2.3755e+00,  4.9920e-03, -2.1007e+00,  2.4302e+00, -9.7459e+00]])
<class 'torch.Tensor'>
[3, 2, 1, 3]
target tensor([2., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.9688)
evaluate
input tensor([[[  0,   1,  -1,  ...,   2,  -3,  -2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,   0,   1,  ...,   2,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -3,  ...,  -2,   0,  -6],
         [  7,  -4,   0,  ...,   0,   1,   1],
         [ 11,  -5,   2,  ...,  -3,   6,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   0,  -2,  ...,   2,  -4,   0],
         [  2,  -2,  -2,  ...,   6,   1,  -6],
         [  3,   0,  -1,  ...,   0,  -3,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -5.5169,  -8.5236,   2.4412,   2.0329,  -3.3399],
        [ -0.3523,  -2.8557,   1.6618,  -3.9122,  -8.8700],
        [-11.0875,   2.3011,  -0.8688,  -6.0605,  -7.6722],
        [ -4.0333,   1.0503,  -0.8062,   2.2254,  -6.2878]])
<class 'torch.Tensor'>
[2, 2, 1, 3]
target tensor([4., 0., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.2846)
evaluate
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.3297,   1.7392,  -0.4822,   0.1356,  -9.5407],
        [ -8.3236,   2.6916,  -0.0450,   4.4939,  -7.1362],
        [  0.4953, -10.3156,  -3.3953,  -8.1805,  -7.5174],
        [ -6.7940,   1.9097,  -0.7028,   2.7204,  -6.7459]])
<class 'torch.Tensor'>
[1, 3, 0, 3]
target tensor([2., 2., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.2797)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.9486,  -2.5373,  -5.7431,  -5.5611,  -9.7101],
        [ -1.2645,   0.1054,  -0.0162,  -0.8981,  -3.5902],
        [-10.0027,  -3.8938,   0.7762,  -5.1820,  -3.1392],
        [ -5.7993,  -1.8062,  -1.0441,  -0.7335,  -7.2505]])
<class 'torch.Tensor'>
[0, 1, 2, 3]
target tensor([2., 0., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.7957)
evaluate
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 3, -1,  1,  ..., -2,  0,  2],
         [ 2,  5, -3,  ..., -4, -3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-3.2313,  2.6035, -2.3084, -0.1853, -2.3219],
        [-6.2900,  2.8338, -5.0687,  4.1360, -6.1991],
        [-6.3730, -1.0906,  0.5245, -2.7089, -5.1825],
        [-5.1095, -3.0262,  2.5964,  1.5977, -7.8166]])
<class 'torch.Tensor'>
[1, 3, 2, 2]
target tensor([2., 0., 3., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.1051)
Test: [10/13]	Time 0.498 (0.521)	Loss 5.1051 (3.9814)	Accuracy 0.000 (13.636)
evaluate
input tensor([[[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-1.2615, -1.7691,  0.3188,  0.7449, -6.2280],
        [-1.4827, -2.7368, -3.7750,  0.8004, -7.7285],
        [-1.0924, -6.2053, -3.1413,  0.7271, -9.0857],
        [-7.2255,  3.5668,  2.0104, -0.7360, -3.8892]])
<class 'torch.Tensor'>
[3, 3, 3, 1]
target tensor([1., 3., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.3001)
evaluate
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2, -1,  0,  ...,  0, -3,  2],
         [ 2, -1, -4,  ...,  0, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.5980,   1.4466,   1.4687,   0.9367,  -9.2822],
        [ -5.8279,   4.0160,  -0.4680,  -5.9172, -10.5801]])
<class 'torch.Tensor'>
[2, 1]
target tensor([4., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(10.8200)
epoch: 49
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -2, -2,  ...,  1,  0, 10],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  2, -3,  4],
         [ 2,  0, -2,  ...,  0,  2, -4],
         [ 1,  0, -1,  ..., -5,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  0,  0,  ..., -3,  4,  2],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  4, -2,  ...,  0,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -7.2797,  11.7402,  -1.0745,  -8.5821,  -2.2776],
        [ -7.0355,  15.7563,  -6.9554, -17.1493,   1.0927],
        [ -3.9401,  14.9256,  -0.6985,  -2.4687,  -4.1446],
        [ -3.8413,  -3.6679,  10.6352,   1.6096,  -8.5195]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 1, 2]
target tensor([1, 1, 1, 2])
<class 'torch.Tensor'>
loss
tensor(3.1380e-05, grad_fn=<NllLossBackward0>)
Epoch: [49][0/25]	Time 1.791 (1.791)	Data 0.024 (0.024)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
train
input tensor([[[ 1,  0,  0,  ...,  0,  4,  0],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 3,  1,  0,  ...,  0,  4,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  0, -7,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0, -1,  ...,  4,  4,  1],
         [ 2,  0, -1,  ..., -1,  2, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-13.5008,  28.1747,  -5.8703, -14.0347, -12.8505],
        [-19.8363,  -3.2609, -18.1534,  31.2669, -15.9464],
        [ 23.1165,  -7.7705, -13.4452,  -4.6914,  -1.4685],
        [  6.8738,  -8.6862, -13.1307, -13.6441,  13.1410]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 0, 4]
target tensor([1, 3, 0, 4])
<class 'torch.Tensor'>
loss
tensor(0.0005, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2, -2, -1,  ...,  0,  0,  0],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 5, -1, -1,  ..., -1,  2,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0, -1, -6,  ..., -4,  0, -8],
         [ 4, -1,  1,  ...,  6, -4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 17.9632,  -2.1760,  -3.0939, -30.8911,  -3.5598],
        [-11.5079, -17.9340, -14.7744,  10.7288, -11.2362],
        [  7.9445,  -2.3330,  -5.8064,  -1.0493,  -5.0201],
        [-15.9350, -28.1076,  36.8184, -10.7552, -16.2817]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 0, 2]
target tensor([0, 3, 0, 2])
<class 'torch.Tensor'>
loss
tensor(4.0528e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[  3,   0,   0,  ...,   1,  -3,   0],
         [  2,   0,   0,  ...,  -2,   5,   4],
         [  2,   0,  -2,  ...,   0,   2,  -4],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,   0,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,  -1,   0,  ...,   0,  -2,   6],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  3,   0,   1,  ...,   1,   3,   0],
         [ 11,  -5,   2,  ...,  -3,   6,   3],
         [  2,   0,  -1,  ...,  -3,   2,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -1,  -1,  ...,  -1,  -3,   3],
         [  3,  -1,  -2,  ...,   0,   3,   4],
         [  1,   1,   0,  ...,   0,   6,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[-24.8929,  -0.1075,  27.7017,  -3.2388, -19.8777],
        [-15.8946, -14.8753,  16.8573,  -8.9368, -16.9366],
        [-20.2497,  -5.5229, -30.8521,  29.4635, -28.3096],
        [-12.6199,  -4.1351,  -7.6678,  19.6270, -16.2918]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 3, 3]
target tensor([2, 2, 3, 3])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2,  4, -8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  3,  4,  ...,  3, -4, -2],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1, -1, -1,  ..., -4,  1,  6],
         [ 4,  2,  0,  ..., -1, -3,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -3, -1,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.3025, -17.9365, -21.4708,  34.2360,  -8.8433],
        [ 14.6231, -11.0194,  -0.7477,  -6.2245, -14.8422],
        [-26.3363,  -6.9995,  -2.4936,  27.7022,  -7.7935],
        [ 15.0904,  -1.1066,  -1.0963,  -4.6460, -10.0863]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 0, 3, 0]
target tensor([3, 0, 3, 0])
<class 'torch.Tensor'>
loss
tensor(1.1921e-07, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  2,  3,  ..., -4,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  6.6301,  -4.1571,   1.9353,  -6.7063,  -8.0070],
        [ -9.2535,  36.3408,   1.4760, -19.2194,  -6.9184],
        [-12.6992,  -3.6301, -10.2638, -20.8533,  20.3080],
        [-12.1714,  48.9581, -37.1199, -16.9563,  -8.1854]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 4, 1]
target tensor([0, 1, 4, 1])
<class 'torch.Tensor'>
loss
tensor(0.0023, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 0,  0,  0,  ..., -1,  8, -4],
         [ 1,  0,  1,  ...,  6,  4, -2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 4, -3,  5,  ...,  7, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2,  1,  ...,  2, -2, -2],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 4, -2,  5,  ...,  1,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-13.4130,  27.2763,  -4.7739,  -4.1684, -30.1258],
        [ -2.2792,  -1.4578,  -2.6134,  11.3206, -11.5643],
        [ -5.9409,  -6.1195,   9.2355,  -9.5409, -13.3164],
        [ -8.8567,  -3.4643, -13.9785,  15.7277, -13.0875]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 3, 2, 3]
target tensor([1, 3, 2, 3])
<class 'torch.Tensor'>
loss
tensor(1.3709e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  0, -3,  ...,  4, -4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  0,  0,  ...,  3,  0, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  1, -1,  ..., -2, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  3, -4,  ..., -1,  0,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -8.9703,  -8.8178,   3.8584,  -2.3742, -17.3331],
        [-17.0376,  -5.6521,  12.2971,   0.1362, -18.2712],
        [ -7.5454,  -4.6574,  24.3337,  -8.4238,  -7.9826],
        [ -2.9954,  22.4902, -14.6191,   7.8761, -16.8821]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 1]
target tensor([2, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0005, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -2,  ...,  0, -3,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0, -1,  0,  ...,  0, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 16.7155,   1.9825,  -2.0669, -10.5201,  -7.5846],
        [  0.6860,  -9.5360, -10.4645,  -0.5700, -30.5184],
        [-14.6092,  -0.3098, -10.9271,  -9.0582,  11.8223],
        [-16.1570,  -3.2966,  17.8217,  -3.4695, -11.6385]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 0, 4, 2]
target tensor([0, 0, 4, 2])
<class 'torch.Tensor'>
loss
tensor(0.0627, grad_fn=<NllLossBackward0>)
train
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  4,   0,   0,  ...,  -4,  -2,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  6,  -2,   1,  ...,   0,  -1,   0],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [ 11,  -3,   0,  ...,   3,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   1,  -4,  ...,  -4,   2,   1],
         [  3,   3,  -1,  ...,   0,  -3,   5],
         [  1,  -1,  -1,  ...,  -1,  -3,   3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   1,  -1,  ...,  -5,   4,   0],
         [  4,   1,  -2,  ...,  -4,  -1,   0],
         [  7,  -1,  -1,  ...,   0,   5,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -4.1668,  -1.2188,   4.1121,  -2.9059,  -4.1162],
        [ -9.6094,   4.2491,  -1.7853,  18.1050, -28.5345],
        [ -0.9449,  55.4805, -27.8341, -10.5711, -24.8278],
        [ -2.8581,  15.3835,  -5.4198,   1.7233,  -4.4492]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 1, 1]
target tensor([2, 3, 1, 1])
<class 'torch.Tensor'>
loss
tensor(0.0016, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  0,  ...,  1, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [13, -6,  0,  ..., -1, -3,  9],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0,  0,  ...,  2,  0, -8],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-17.4411,  -6.1859,  19.0785,   8.6675, -16.7220],
        [ -7.3202,  -7.7201,  17.5938,  -1.2437, -13.9536],
        [ -3.9634,  43.3227, -35.9494,  -9.2760,   1.1011],
        [-20.4917,   0.0604, -10.5691, -27.6577,  50.2920]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 1, 4]
target tensor([2, 2, 1, 4])
<class 'torch.Tensor'>
loss
tensor(7.5399e-06, grad_fn=<NllLossBackward0>)
Epoch: [49][10/25]	Time 1.751 (1.742)	Data 0.012 (0.022)	Loss 0.0000 (0.0061)	Accuracy 100.000 (100.000)
train
input tensor([[[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0, -1, -4,  ..., -6,  0, -1],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -1.5050,  17.0807,  -3.1101, -12.7923,  -7.0612],
        [-23.1761,  20.0874, -14.1233, -15.3882, -13.0506],
        [ -6.5111,  -8.1990,  10.7428,   4.1235,  -4.1152],
        [-12.1492,  -6.9989,  -4.9051,  14.9277, -15.4292]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 1, 2, 3]
target tensor([1, 1, 2, 3])
<class 'torch.Tensor'>
loss
tensor(0.0003, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  4, -3,  ..., -4,  6,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -1, -3,  ...,  1, -1,  6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -1, -1,  ..., -2,  0,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-13.0765,  21.1030, -10.5897,  -6.6939, -11.8656],
        [ -9.2693,  -3.2574,  11.7597, -10.1983,  -7.7623],
        [ -0.8913,  -6.5554,   7.6874,  -3.1211,  -6.6997],
        [ 11.8841,  -1.4635,   0.5392,   0.4536,  -2.9666]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 2, 2, 0]
target tensor([1, 2, 2, 0])
<class 'torch.Tensor'>
loss
tensor(5.8616e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [10, -5,  1,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 1,  2, -2,  ..., -6, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  0,  2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.0158,  -4.3359,  -6.1096, -17.1564,   8.4836],
        [-11.7709, -27.7573,  20.8215,  -8.0210,  -3.1480],
        [ -5.3806,  -1.1695,   7.4162, -11.9628,  -9.5983],
        [-12.4139,  64.7223,  -4.5076, -35.1823,  -0.2315]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[4, 2, 2, 1]
target tensor([4, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(4.8305e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -3, -1],
         [ 1,  5, -2,  ..., -6,  5,  2],
         [ 2,  5,  0,  ...,  0,  6,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         [ 1,  0, -2,  ...,  1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1, -2, -3,  ..., -2, -2,  5],
         [ 3, -3, -1,  ...,  1, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-18.5035,  37.0389, -24.9283,   2.8394, -15.9259],
        [ 20.3901, -14.1658, -10.4764, -10.4186,  -5.1017],
        [ -2.3989, -24.3452,   4.0456, -21.4054,  33.1706],
        [ -7.1079,  -4.7527, -30.1439,  27.8925,  -4.0848]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[1, 0, 4, 3]
target tensor([1, 0, 4, 3])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -2,  0,  ..., -4,  2,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -3,  0,  ...,  0,  1,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -2,  0,  ..., -3, -1,  8],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -4,  3, -1],
         [ 3,  0,  0,  ...,  0, -1,  5],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.1731, -12.5212,  24.1749,  -4.0739,  -4.9191],
        [-14.4785,   2.2855,   0.9412,  14.0301,  -6.8484],
        [ -2.6500,  -7.4970,   7.1824,  -0.6346,  -7.2539],
        [-19.7336,   5.4272,  29.9216, -28.3677,  -9.8772]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 2, 2]
target tensor([2, 3, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0001, grad_fn=<NllLossBackward0>)
train
input tensor([[[  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         [  2,  -1,  -5,  ...,   0,   4,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,  -4,  ...,  -4,  -9,   5],
         [  6,  -6,   1,  ...,   0,   0,   3],
         [  0,   2,  -2,  ...,  -7,  -4,  -2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,  -3,  -1,  ...,   0,  -2,   0],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  0,   0,   0,  ...,   1,  -4,  -1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  5,  -1,   0,  ...,   7,   3,   0],
         [  2,   0,   0,  ...,   7,   0,  -1],
         [  3,   0,   0,  ...,   1,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -7.4395,  -4.6027,  22.1304,  -7.5031, -10.7948],
        [-14.2099,  -4.9750,  -7.6373,  12.0531, -16.1890],
        [-10.1575,  17.5626,  -1.9996, -10.6173,  -6.1925],
        [ -6.8290,  -1.1233,  10.0442,  -2.4089, -12.0184]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 3, 1, 2]
target tensor([2, 3, 1, 2])
<class 'torch.Tensor'>
loss
tensor(4.5299e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ..., -1, -1,  0],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 2,  0, -1,  ...,  2,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ...,  1, -3,  0],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 0,  1,  0,  ..., -1,  8, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-10.9972,   3.3525,  25.1483, -17.6317, -26.9460],
        [ -9.7045,  -2.1925,  18.4596,  -3.4838,  -3.7636],
        [-24.7153,   7.0393,  18.2662,  -7.6061,  -5.1085],
        [ -9.1744,  -5.8191,  -1.6677,  -4.0142,  -8.6863]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([2, 2, 2, 2])
<class 'torch.Tensor'>
loss
tensor(0.0267, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  0,  0,  ...,  2,  1,  3],
         [ 3,  0,  1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [-1,  3,  3,  ...,  0,  3,  3],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 3,  5,  1,  ...,  1,  2,  0],
         [ 2,  3,  0,  ...,  2, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-13.3156,  -4.1853,   7.1169, -11.5988, -10.8792],
        [  7.7909, -10.9545,  -2.1648, -10.5689, -19.1875],
        [ -3.7240,  20.2914,  -8.4682,  -9.3485,  -0.5923],
        [ 12.4229,  -7.4981,  -8.4055, -10.4024, -19.5417]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[2, 0, 1, 0]
target tensor([2, 0, 1, 0])
<class 'torch.Tensor'>
loss
tensor(1.4960e-05, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 0,  2,  0,  ...,  3,  0, -7],
         [ 3, -1,  2,  ...,  1, -2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -3,  0,  ...,  1,  2, -1],
         [ 4,  0,  0,  ...,  0, -3, -1],
         [ 1, -1,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -1,  ..., -1, -1, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [-1,  1,  0,  ...,  2, -3, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -3,  ..., -2, -2, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  8.0675,  -5.2282, -18.2848,  15.6400, -14.0613],
        [-11.4186,  -9.2207,  -7.4629,  27.0468, -18.4587],
        [  4.8987,  -2.2241,   0.0682,  -0.1002, -12.6176],
        [ -0.4856,   2.7532,   8.6118,  -0.8630, -12.4217]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[3, 3, 0, 2]
target tensor([3, 3, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0047, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1, -1,  ..., -1, -3,  3],
         [ 2,  0,  0,  ..., -1, -2,  2],
         [ 2,  0, -1,  ...,  1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -3, -1,  ..., -4,  5,  8],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         [-1,  0, -1,  ..., -3,  8, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 1,  5, -1,  ..., -4, -2,  0],
         [ 3, -2, -2,  ...,  0,  2,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  7.9465,  -8.4392,  -4.7009,  -5.1961,  -6.1876],
        [ -2.8482,  26.1556,  -4.1151, -16.1204, -10.4748],
        [ -7.2986,  -2.7661,  22.9142, -34.9697, -12.2758],
        [ -2.8448,  17.8277,  -7.5612,  -2.7677,  -4.2351]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 2, 1]
target tensor([0, 1, 2, 1])
<class 'torch.Tensor'>
loss
tensor(1.4901e-06, grad_fn=<NllLossBackward0>)
Epoch: [49][20/25]	Time 1.643 (1.734)	Data 0.023 (0.022)	Loss 0.0000 (0.0047)	Accuracy 100.000 (100.000)
train
input tensor([[[ 0,  0,  0,  ...,  0,  0,  0],
         [ 6,  2,  4,  ...,  3,  0, -4],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  0,  ...,  0,  6, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 0,  0,  2,  ...,  4,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1,  2,  ...,  4,  0, -2],
         [ 2,  1,  1,  ...,  0, -1,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -2,  0,  ..., -3,  7,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  9.6373,   4.9227,  -6.6725,  -2.7081,  -2.5429],
        [ -1.9071,  -6.3769,  14.8734,  -7.6838, -23.0217],
        [-13.0460,   5.9400,  36.3738, -16.4209,   0.9603],
        [ -4.6369,  18.5874,  -9.2872, -11.1647,  -6.8321]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 2, 2, 1]
target tensor([0, 2, 2, 1])
<class 'torch.Tensor'>
loss
tensor(0.0022, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  3,  ...,  2,  2,  2],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 2,  0,  0,  ..., -3,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  1,  ...,  6,  1, -1],
         [ 1,  2,  3,  ...,  0, -3,  1],
         [ 1, -1, -1,  ...,  2, -3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -2,  ...,  0, -3,  0],
         [11, -5,  2,  ..., -3,  6,  3],
         [ 6, -4, -1,  ...,  0,  0,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 50.1403, -43.8548, -17.5018, -30.6481, -10.5059],
        [ -8.1748, -12.9260, -17.5563,  28.6970, -17.5869],
        [ -6.3003, -14.4819,  -5.5049, -18.8823,  13.8523],
        [ 17.3310, -10.5873,  -8.5516,  -7.2178, -11.3044]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 3, 4, 0]
target tensor([0, 3, 4, 0])
<class 'torch.Tensor'>
loss
tensor(0., grad_fn=<NllLossBackward0>)
train
input tensor([[[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ..., -5,  1,  0],
         [ 2,  3,  1,  ...,  1, -5, -4],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 3, -1, -2,  ...,  0,  3,  4],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -3,  0,  ...,  0,  1,  3],
         [ 5,  0,  2,  ..., -1, -1,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 13.4736,  -2.2804,   0.7213, -15.5464,  -8.7397],
        [  6.6411,  -8.5977, -11.8809,  -3.4447,  29.0902],
        [-17.3685,  -2.1445, -22.2429,  31.6507, -19.4845],
        [ -1.8350,   1.1981,  12.6394,  -1.4303, -10.4967]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 4, 3, 2]
target tensor([0, 4, 3, 2])
<class 'torch.Tensor'>
loss
tensor(3.7551e-06, grad_fn=<NllLossBackward0>)
train
input tensor([[[ 3, -2,  4,  ...,  1, -4,  1],
         [ 1,  0,  0,  ...,  3,  0, -6],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 4,  1, -2,  ..., -2,  5, -4],
         [ 6, -2,  1,  ...,  0, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 6, -2,  1,  ...,  0, -1,  0],
         [ 3, -1, -2,  ...,  0,  3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  5.6864,  -4.0031,  -2.9633,  -5.2222,  -9.7756],
        [ -5.5543,  14.4794,  -3.2014,  -2.6598, -11.1180],
        [  3.4295,  -5.3842,  -4.2604,  -9.2859, -14.3726],
        [ -9.3157,  -6.5516,  16.8799, -10.8818,  -8.0955]],
       grad_fn=<AddmmBackward0>)
<class 'torch.Tensor'>
[0, 1, 0, 2]
target tensor([0, 1, 0, 2])
<class 'torch.Tensor'>
loss
tensor(0.0002, grad_fn=<NllLossBackward0>)
evaluate
input tensor([[[ 2,  0,  0,  ..., -1, -2, -1],
         [ 0,  2, -2,  ..., -3,  4, -2],
         [ 2, -1, -1,  ...,  0,  1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[-1,  2, -2,  ..., -2,  4,  1],
         [ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -4.2672,  -2.8615,   0.3984, -11.2162,  -7.7853],
        [ -5.4793,   1.5000,  -1.0758,  -5.4865,  -7.1162],
        [ -1.4635,  -1.6003,  -0.4872,  -4.4658,  -7.4427],
        [ -7.2412,   4.7503,   4.3484,  -5.4836,  -3.8263]])
<class 'torch.Tensor'>
[2, 1, 2, 1]
target tensor([2., 2., 3., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.0340)
Test: [0/13]	Time 0.472 (0.472)	Loss 2.0340 (2.0340)	Accuracy 25.000 (25.000)
evaluate
input tensor([[[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0,  2,  2,  ...,  0,  0,  2],
         [ 4,  0,  0,  ...,  7,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 1, -1, -1,  ...,  0,  2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 1, -3, -1,  ...,  2, -4, -3],
         [ 2, -1,  0,  ...,  1,  3,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.0654,   1.4146,   0.2402,  -1.6801,  -9.1968],
        [ -3.4882,   8.3059,  -1.7122,  -4.9905,  -6.5094],
        [ -1.6155,  -1.2417,  -0.8682,   0.5374,  -5.3027],
        [ -1.8243,   3.1498,   1.7889, -10.8307,  -6.1844]])
<class 'torch.Tensor'>
[1, 1, 3, 1]
target tensor([2., 2., 1., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.7332)
evaluate
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 4, -3,  0,  ..., -1,  1,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.0925,   4.9244,  -0.5525,  -3.9136,  -5.2778],
        [ -3.5831,   2.7875,   4.8920,  -4.2727,  -8.6374],
        [ -4.2362,  -3.6684,   1.1969,  -5.5564, -15.4287],
        [ -8.0269,   4.0137,   3.0749,  -1.0645,  -7.3338]])
<class 'torch.Tensor'>
[1, 2, 2, 1]
target tensor([0., 4., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.4881)
evaluate
input tensor([[[  2,  -2,  -1,  ...,   2,  -3,   4],
         [  2,  -1,   0,  ...,   0,  -3,   2],
         [  2,  -1,  -4,  ...,   0,  -4,  -3],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -1,  ...,   3,   1,  -6],
         [  3,   0,   1,  ...,   1,   4, -10],
         [  3,   0,   0,  ...,   0,   0,   5],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   1,  -1,  ...,   2,  -3,  -2],
         [  5,   0,  -1,  ...,  -4,   0,  -3],
         [  3,   0,   1,  ...,   2,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  1,   2,  -2,  ...,  -6,  -5,   0],
         [  3,  -1,   1,  ...,  -2,   0,   2],
         [  2,   5,  -3,  ...,  -4,  -3,   2],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -5.8807,   5.9540,   3.5286, -13.4277, -10.0839],
        [ -1.4376,   4.1138,  -0.8473,  -8.3356,  -4.5880],
        [ -5.1812,  -7.1611,   6.2524,  -4.3544,  -2.4278],
        [ -3.2874,   3.4196,  -0.1659,  -3.4489,  -1.7569]])
<class 'torch.Tensor'>
[1, 1, 2, 1]
target tensor([3., 1., 4., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.9446)
evaluate
input tensor([[[  4,   1,  -2,  ...,  -4,  -1,   0],
         [  1,   0,  -1,  ...,   4,   4,   1],
         [  1,   2,  -2,  ...,  -4,   3,   1],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   2,  -2,  ...,  -3,  -1,   0],
         [  2,  -2,  -1,  ...,   2,  -3,   4],
         [  0,  -2,  -5,  ...,   0,   4,   7],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  2,   0,  -1,  ...,   1,   1,   3],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,   0,   0,  ...,   0,  -3,   0],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]],

        [[  0,   0,   0,  ...,   0,  10,  -2],
         [  1,  -3,  -1,  ...,   2,  -4,  -3],
         [  2,  -1,   0,  ...,   0,   0, -10],
         ...,
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0],
         [  0,   0,   0,  ...,   0,   0,   0]]])
output tensor([[ -5.4415,   0.2993,   3.5976,  -3.2516, -10.4502],
        [ -4.6370,   7.1130,   3.9534,  -3.5577,  -8.2207],
        [ -6.2750,   8.3478,  -0.9677, -10.6064,  -7.1471],
        [-10.4568,   4.1503,   3.5762, -14.4222,  -7.0237]])
<class 'torch.Tensor'>
[2, 1, 1, 1]
target tensor([2., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.0649)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 3, -2,  0,  ..., -3, -1,  8],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0,  0,  ..., -1, -3, -1],
         [ 5,  0,  0,  ...,  6, -1,  7],
         [ 0,  1, -4,  ...,  0, -1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  2, -2, -4],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 3,  0, -1,  ...,  0, -3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -6.6531,  -4.8356,   4.2081, -17.0116,  -7.4296],
        [ -5.7416,   3.8505,   5.3756, -10.9422, -11.1300],
        [ -2.3183,  -2.4670,   2.1628, -13.4588,  -6.9791],
        [ -3.9165,   2.1425,   1.2118,  -1.5341,  -5.6631]])
<class 'torch.Tensor'>
[2, 2, 2, 1]
target tensor([2., 2., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.2629)
evaluate
input tensor([[[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 5,  0, -1,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  3, -2,  ...,  1,  3,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  3,  1,  ..., -3, -4,  0],
         [ 1,  1,  0,  ...,  0,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  4,  0,  ...,  2,  5,  1],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 3, -2,  2,  ...,  0,  5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -5.1490,  -1.3279,   5.3794,  -2.9015,  -7.3948],
        [ -8.1746,   3.5043,   6.6963,  -4.3585,  -8.1963],
        [ -1.3952,  -0.1284,  -0.9731, -13.4936,  -8.5718],
        [  0.0430,  -6.8986,   7.0206,  -9.8246, -10.9225]])
<class 'torch.Tensor'>
[2, 2, 1, 2]
target tensor([3., 2., 2., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.9062)
evaluate
input tensor([[[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 5,  0,  0,  ...,  6, -1,  7],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0,  0, -3,  ...,  5,  0, -5],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0,  0,  ..., -3,  0, -2],
         [ 4, -1,  0,  ...,  0, -2,  6],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 6, -2,  0,  ...,  1,  0,  2],
         [ 1, -1,  0,  ...,  0, -6, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.9820,   1.9007,   1.4870,  -7.1975, -12.9629],
        [ -3.6806,  -1.2671,   5.8878,  -8.1558,  -7.4756],
        [ -1.7877,  -0.3484,   3.4053,  -4.0110,  -6.1376],
        [ -3.2352,   3.0485,  -2.4506, -12.6734,  -5.4385]])
<class 'torch.Tensor'>
[1, 2, 2, 1]
target tensor([3., 0., 1., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(5.7422)
evaluate
input tensor([[[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 1,  0, -2,  ..., -1, -1, -9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  2,  ...,  5, -7, -4],
         [ 1,  0,  0,  ...,  2, -3, -1],
         [ 1, -3, -1,  ...,  3,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -3,  ..., -2,  0, -6],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  3,  1,  ..., -3, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -9.2410,  -2.2166,   5.1676, -13.7795,  -2.6297],
        [ -7.3189,   3.2746,   2.1066,  -2.0752,  -6.4305],
        [ -0.1244,  -1.4100,   3.7972,  -8.2509,  -8.5813],
        [  0.9528,  -8.3292,   0.3499, -15.2122,  -6.3187]])
<class 'torch.Tensor'>
[2, 1, 2, 0]
target tensor([0., 0., 0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.4153)
evaluate
input tensor([[[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -2, -1,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[10, -6,  2,  ...,  2,  0, -1],
         [ 2,  3,  3,  ...,  0,  1, -1],
         [ 0,  0,  0,  ...,  0,  0, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  1, -3,  ...,  1, -3,  2],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -2, -1,  ...,  2, -3,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  1,  ...,  4,  5,  0],
         [ 3,  6,  0,  ..., -4,  0,  4],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  1.7471,   5.1759,   0.4246,  -7.5142,  -7.4916],
        [ -6.1444,   0.7012,   4.9098,  -9.4490,  -4.7191],
        [ -2.4603,  -5.0228,  -1.4504, -11.5348,  -8.3852],
        [ -8.9364,   1.0092,   1.5738,  -5.1877,  -6.8572]])
<class 'torch.Tensor'>
[1, 2, 2, 2]
target tensor([0., 3., 2., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(6.7641)
evaluate
input tensor([[[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  3,  0,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5, -2, -2,  ...,  0,  0, -3],
         [ 1, -2, -1,  ...,  2, -4, -5],
         [ 2,  0, -2,  ..., -3,  4, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2, -2,  ...,  0,  1, -6],
         [ 0,  0,  0,  ..., -9, -2,  3],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 7, -1, -1,  ...,  0,  5,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.8909,   1.0850,   1.4411,  -3.4511,  -3.2169],
        [ -2.4205,   0.3638,   1.6833,  -8.2323,  -7.9492],
        [ -2.8365,   1.0580,  -0.5290,  -3.4633, -11.2211],
        [ -0.3308,  -4.2344,   0.4978,  -6.2134,  -8.1923]])
<class 'torch.Tensor'>
[2, 2, 1, 2]
target tensor([0., 0., 2., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.0402)
Test: [10/13]	Time 0.486 (0.513)	Loss 4.0402 (4.8542)	Accuracy 0.000 (27.273)
evaluate
input tensor([[[10, -6,  1,  ...,  2, -5,  4],
         [ 4, -3, -3,  ..., -2,  1,  3],
         [ 1, -1, -2,  ...,  3,  3,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2,  0, -3,  ...,  0,  3,  4],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 7, -4,  0,  ..., -1,  1,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3, -3, -1,  ...,  0, -4,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.6430,   1.7676,   2.3853,  -2.7445,  -5.6539],
        [ -4.7623,   3.8893,  -0.9315, -11.5189,  -1.8004],
        [ -5.6949,  -0.8010,   2.6795,  -7.1501,  -6.8260],
        [ -3.7916,   3.0785,   2.3364,  -5.4957,  -8.6671]])
<class 'torch.Tensor'>
[2, 1, 2, 1]
target tensor([2., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.4788)
evaluate
input tensor([[[ 5, -1,  0,  ...,  7,  3,  0],
         [ 2, -1, -1,  ...,  2,  6, -2],
         [ 0,  0, -2,  ..., -1,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  1, -6],
         [ 1, -1, -1,  ..., -2,  0,  1],
         [ 1, -1, -1,  ..., -1, -3,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-2.0183, -0.7479, -0.6952, -1.3105, -8.7277],
        [-0.6450,  1.3598,  0.9483, -9.9645, -8.6190]])
<class 'torch.Tensor'>
[2, 1]
target tensor([2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.8024)
evaluate
input tensor([[[ 2,  3,  1,  ..., -3, -4,  0],
         [ 4,  1, -2,  ..., -4, -1,  0],
         [ 6,  1,  2,  ..., -1,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2,  3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 3, -1, -1,  ..., -2,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 2,  0, -1,  ...,  2,  0,  0],
         [ 1, -2, -1,  ...,  0, -5,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0, -2,  ..., -4,  5, -5],
         [ 1, -2, -1,  ..., -1,  3, -1],
         [ 3,  0,  0,  ..., -4,  3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.8722,  -5.3031,   4.6685,   0.0860, -17.6682],
        [  0.2653,   1.3824,   2.5670,  -5.1921, -12.0059],
        [ -0.6167,  -6.6043,   3.7538,  -7.2369, -14.5749],
        [  0.9274,  -6.3429,   1.5086,  -1.1903, -22.2947]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([3., 1., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.2440)
Test: [0/13]	Time 0.573 (0.573)	Loss 4.2440 (4.2440)	Accuracy 25.000 (25.000)
evaluate
input tensor([[[ 4,  0,  1,  ...,  0, -2,  4],
         [10, -6,  1,  ...,  2, -5,  4],
         [ 4, -1,  1,  ...,  8, -3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 1, -1, -3,  ...,  1,  1, -9],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  2,  0,  ...,  0,  0, -6],
         [ 1,  3,  0,  ...,  2, -4, -1],
         [ 0,  1, -1,  ..., -5,  4,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 4, -2,  0,  ...,  1, -2,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ 2.6356e-01, -5.0741e+00,  2.7469e+00, -4.8029e+00, -1.5640e+01],
        [-4.5065e-01, -3.1667e+00,  1.4642e+00, -4.8956e+00, -1.7783e+01],
        [-1.8021e+00, -3.5284e+00,  1.1180e+00, -9.7787e-01, -1.6022e+01],
        [-4.6844e-01,  6.5801e-03, -4.7143e-01, -3.3883e+00, -1.4672e+01]])
<class 'torch.Tensor'>
[2, 2, 2, 1]
target tensor([1., 1., 1., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(4.5800)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         [ 4, -1, -2,  ..., -4, -1, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -1,  ..., -3,  2, -2],
         [ 2, -2, -1,  ...,  0,  0,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 0,  1,  1,  ...,  9,  3, -2],
         [ 4, -1,  0,  ..., -1,  2,  2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 1,  0, -3,  ...,  1,  3,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -3.7473,  -0.5116,   1.9308,  -2.5197, -13.9465],
        [  1.3954,  -0.5453,  -0.7738,  -2.6491, -17.3455],
        [ -3.2041,  -5.3840,   0.6415,  -4.6820, -14.6491],
        [ -2.7069,  -3.4817,  -3.6173,  -5.2532, -17.8367]])
<class 'torch.Tensor'>
[2, 0, 2, 0]
target tensor([1., 2., 2., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.4109)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 2, -1, -1,  ...,  2,  6, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 0, -1,  2,  ..., -2, 10, -6],
         [ 1,  0,  3,  ..., -1, -3,  5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  0,  0,  ...,  2,  2, -4],
         [ 2,  1, -3,  ...,  6, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.2370,  -2.7500,   5.6050,  -2.4276, -14.7051],
        [  1.5619,  -5.5335,   0.9113,  -2.0981, -17.4234],
        [  1.2854,  -6.6525,   4.2654,  -2.7343, -17.9874],
        [  1.9571,  -5.7067,   4.0870,  -1.8206, -14.7598]])
<class 'torch.Tensor'>
[2, 0, 2, 2]
target tensor([4., 1., 1., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(11.2096)
evaluate
input tensor([[[ 0,  1,  1,  ...,  6,  1, -1],
         [ 2,  1,  1,  ...,  6,  0,  0],
         [ 5,  0, -1,  ..., -4,  0, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1, -2,  ...,  3,  3,  0],
         [ 3, -1, -1,  ..., -2,  0, -1],
         [ 3,  1,  1,  ...,  7, -3, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 2, -1, -1,  ...,  0,  1, -2],
         [ 1,  0,  1,  ...,  3, -1, -2],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 7, -1, -1,  ...,  0,  5,  1],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.2759,  -9.3610,  -1.1187,  -1.9466, -12.7496],
        [  1.2387,  -4.8778,   3.7792,  -5.4380, -13.7734],
        [ -3.1040,  -3.6428,   1.4606,  -2.5618, -18.3914],
        [ -1.5723,  -5.6798,   4.4336,  -5.5314, -19.2902]])
<class 'torch.Tensor'>
[0, 2, 2, 2]
target tensor([4., 1., 3., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(9.4944)
evaluate
input tensor([[[ 1, -1, -3,  ...,  1,  1, -9],
         [ 5, -3,  3,  ...,  0, -2,  1],
         [ 8, -2,  0,  ...,  1,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  1,  0,  ..., -1,  3, -3],
         [ 3,  0,  0,  ..., -1, -3,  2],
         [ 2, -2, -2,  ...,  7, -5, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -2,  ..., -6, -5,  0],
         [ 0, -2, -2,  ..., -7, -6,  1],
         [ 0, -1, -3,  ..., -7,  4,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -2, -2,  ...,  6,  1, -6],
         [ 4, -2,  0,  ...,  1, -2,  0],
         [ 2,  0,  0,  ..., -1, -2, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.0354,  -1.9836,   0.0475,  -0.9389, -13.0149],
        [ -3.5858,  -7.5455,   1.0776,   0.7384, -17.2927],
        [ -5.3324,  -3.6812,   2.5136,   6.2619, -13.1575],
        [  1.0443,  -4.7791,   3.3920,  -4.5419, -15.9781]])
<class 'torch.Tensor'>
[2, 2, 3, 2]
target tensor([0., 2., 2., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.3331)
evaluate
input tensor([[[ 8, -3,  1,  ..., -3,  0,  6],
         [ 1, -1, -1,  ..., -1, -3,  3],
         [11, -5,  2,  ..., -3,  6,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 9, -3,  1,  ..., -1, -1,  0],
         [ 4,  2, -1,  ..., -2, -5,  1],
         [ 8, -2,  0,  ...,  1,  2,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1, -1,  0,  ...,  0, -6, -4],
         [ 2,  1,  0,  ...,  0, -1,  0],
         [ 1,  2,  2,  ..., -3,  0,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 5,  0, -1,  ..., -4,  0, -3],
         [ 7, -4,  0,  ...,  0,  1,  1],
         [ 4,  1, -2,  ..., -2,  5, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  3.1301,  -0.8523,   1.4395,  -0.1248,  -3.0931],
        [  4.8610,  -2.6745,   2.8505,  -1.8845, -18.8936],
        [ -2.1534,  -4.0333,   2.6822,  -1.4971, -21.2747],
        [  2.5228,  -3.6256,  -1.8325,  -5.8147, -15.2110]])
<class 'torch.Tensor'>
[0, 0, 2, 0]
target tensor([0., 0., 1., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(1.7750)
evaluate
input tensor([[[ 3,  0,  0,  ..., -4,  3, -1],
         [ 4, -2,  0,  ..., -2, -1,  0],
         [ 7, -4,  0,  ..., -1,  1,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  2, -1,  ...,  3,  1, -6],
         [ 0,  1, -1,  ..., -5,  4,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -2,  ...,  2, -4,  0],
         [ 2, -2, -2,  ...,  6,  1, -6],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 1, -1, -1,  ..., -1, -3,  3],
         [ 8, -3,  0,  ...,  0,  1,  1],
         [ 0,  0,  0,  ...,  1, -7,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 8, -3,  0,  ...,  0,  1,  1],
         [ 3,  0,  0,  ..., -4,  3, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  2.0399,  -1.3082,  -0.7825,  -6.8875, -11.3665],
        [ -0.3003,  -0.8428,   2.2824,  -3.0177, -16.2536],
        [ -4.5447,  -5.3153,   1.1122,  -0.0224, -19.3093],
        [ -5.1051,  -6.6922,  -1.0346,  -3.4031, -20.3004]])
<class 'torch.Tensor'>
[0, 2, 2, 2]
target tensor([0., 0., 4., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(7.3151)
evaluate
input tensor([[[ 0,  0, -2,  ..., -4,  5, -5],
         [ 3, -1,  0,  ..., -1,  0,  4],
         [ 3,  1,  0,  ...,  2, -7,  3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  0, -3,  ...,  1,  0, -2],
         [ 1,  0, -3,  ...,  5, -5,  4],
         [ 0,  1,  1,  ...,  6,  1, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 1,  1, -4,  ..., -4,  2,  1],
         [ 3,  4,  0,  ...,  0,  0,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  0, 10, -2],
         [ 2,  0, -2,  ...,  2, -2, -4],
         [ 1,  1, -4,  ..., -4,  2,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -0.2292,  -7.1255,   2.5459,   0.6207, -18.2020],
        [  1.6918,  -8.3506,   0.9101,  -1.7193, -18.9564],
        [ -1.4221,  -6.9411,   5.6160,   1.1873, -20.6348],
        [ -0.2888,  -4.0578,   3.2360,   0.0825, -12.7984]])
<class 'torch.Tensor'>
[2, 0, 2, 2]
target tensor([2., 2., 1., 2.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(3.5026)
evaluate
input tensor([[[ 3, -1, -1,  ..., -2,  0, -1],
         [ 6, -2,  0,  ..., -1,  0,  0],
         [ 7, -2,  0,  ..., -3,  7,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2, -1,  0,  ...,  1, -1,  0],
         [ 3,  0,  0,  ..., -4,  3, -1],
         [ 1,  0, -1,  ...,  4,  4,  1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ..., -4,  1, -5],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 3,  0,  0,  ..., -2,  1, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 2,  0, -2,  ...,  0,  2, -4],
         [ 1, -2, -1,  ...,  0, -5,  2],
         [ 2,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.9543,  -5.1518,  -0.8281,  -1.2612, -21.9617],
        [ -0.0510,  -4.3884,   1.3600,  -1.2604, -17.6356],
        [ -1.2617,  -5.4754,  -0.5195,  -2.7633, -19.2987],
        [ -0.2163,  -5.0132,   0.3810,  -0.9066, -18.5886]])
<class 'torch.Tensor'>
[2, 2, 2, 2]
target tensor([3., 2., 1., 3.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.1498)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [13, -6,  0,  ..., -1, -3,  9],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 0,  0,  0,  ...,  3,  4,  5],
         [ 2, -1, -2,  ...,  2,  4, -2],
         [ 2, -1,  0,  ..., -1,  1, -5],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 4, -3,  0,  ..., -2,  3, -2],
         [ 1, -3, -1,  ...,  2, -4, -3],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3, -1,  0,  ...,  0, -4,  1],
         [ 2, -1,  0,  ..., -2, -3,  2],
         [ 2,  3, -4,  ..., -7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[-5.8314e-01, -5.6696e+00,  3.5530e+00,  1.5088e-01, -1.6428e+01],
        [ 2.0612e+00, -5.4950e+00, -2.4648e+00,  1.7138e+00, -2.0443e+01],
        [-3.7816e+00, -9.6805e+00,  1.3768e+00, -9.4345e-03, -2.3127e+01],
        [-3.1076e+00, -3.6272e+00,  6.1685e-01,  2.2783e+00, -1.9609e+01]])
<class 'torch.Tensor'>
[2, 0, 2, 3]
target tensor([1., 2., 3., 4.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(9.5047)
Test: [10/13]	Time 0.499 (0.545)	Loss 9.5047 (5.1381)	Accuracy 0.000 (29.545)
evaluate
input tensor([[[ 4,  1, -2,  ..., -4, -1,  0],
         [ 1,  0,  2,  ...,  0,  0,  0],
         [ 1,  0, -3,  ..., -2,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 3,  0, -1,  ...,  0, -7,  1],
         [ 6, -2,  3,  ...,  3,  5,  0],
         [10, -6,  1,  ...,  2, -5,  4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  2, -1,  ..., -2, -5,  1],
         [ 3,  1, -1,  ...,  2,  1, -5],
         [ 2, -2, -2,  ...,  6,  1, -6],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[13, -6,  0,  ..., -1, -3,  9],
         [ 5,  0, -1,  ..., -4,  0, -3],
         [ 3,  0, -2,  ...,  2, -2, -4],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[ -2.7841,  -6.2566,  -1.1632,   0.2516, -11.8258],
        [ -0.8567, -10.4816,   1.9980,  -2.0563, -18.7851],
        [  2.1666,  -2.8948,  -2.2850,  -4.4551, -16.1378],
        [ -0.9623,  -2.5236,   3.0636,  -2.6607, -11.0345]])
<class 'torch.Tensor'>
[3, 2, 0, 2]
target tensor([2., 3., 0., 1.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(2.8572)
evaluate
input tensor([[[ 1,  1,  0,  ...,  0,  6, -2],
         [ 5, -1,  0,  ...,  7,  3,  0],
         [ 2,  1,  0,  ...,  2, -5,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],

        [[ 4,  1, -2,  ..., -4, -1,  0],
         [ 2, -1,  0,  ...,  0,  5,  3],
         [ 2,  0,  0,  ...,  7,  0, -1],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]]])
output tensor([[  0.0548,  -1.3446,  -1.4236,  -2.9886, -13.8875],
        [  0.2918,  -8.1909,  -0.2169,  -1.9787, -18.2548]])
<class 'torch.Tensor'>
[0, 0]
target tensor([0., 0.], dtype=torch.float64)
<class 'torch.Tensor'>
loss
tensor(0.4769)
model_used
MyCNN(
  (convs): ModuleList(
    (0): Conv2d(1, 100, kernel_size=(3, 300), stride=(1, 1), padding=(2, 0))
    (1): Conv2d(1, 100, kernel_size=(4, 300), stride=(1, 1), padding=(3, 0))
    (2): Conv2d(1, 100, kernel_size=(5, 300), stride=(1, 1), padding=(4, 0))
  )
  (drop): Dropout(p=0.3, inplace=False)
  (fc): Linear(in_features=300, out_features=5, bias=True)
)
model_used.parameters()
<generator object Module.parameters at 0x7fc85f97f518>
test_size
40
train_size
160
####### FOLD: 0 #######
cut_df size is 160
cut_df size is 40
len(train_ds.y) 160
len(test_ds.y) 40
sum(test_ds.y) 76
train_loader
epoch: 0
Epoch: [0][0/40]	Time 1.751 (1.751)	Data 0.025 (0.025)	Loss 3.9872 (3.9872)	Accuracy 50.000 (50.000)
Epoch: [0][10/40]	Time 1.940 (1.870)	Data 0.031 (0.028)	Loss 5.6542 (5.3298)	Accuracy 0.000 (15.909)
Epoch: [0][20/40]	Time 2.086 (2.372)	Data 0.023 (0.029)	Loss 0.9293 (4.1169)	Accuracy 50.000 (22.619)
Epoch: [0][30/40]	Time 1.830 (2.222)	Data 0.024 (0.027)	Loss 4.0936 (4.4216)	Accuracy 50.000 (26.613)
Test: [0/10]	Time 0.530 (0.530)	Loss 1.2308 (1.2308)	Accuracy 25.000 (25.000)
epoch: 1
Epoch: [1][0/40]	Time 4.334 (4.334)	Data 0.031 (0.031)	Loss 0.2978 (0.2978)	Accuracy 75.000 (75.000)
Epoch: [1][10/40]	Time 2.194 (2.253)	Data 0.025 (0.025)	Loss 4.8004 (2.6134)	Accuracy 75.000 (65.909)
Epoch: [1][20/40]	Time 2.115 (2.059)	Data 0.010 (0.023)	Loss 3.3649 (2.8544)	Accuracy 50.000 (57.143)
Epoch: [1][30/40]	Time 2.244 (2.304)	Data 0.032 (0.026)	Loss 1.8934 (2.7748)	Accuracy 50.000 (53.226)
Test: [0/10]	Time 0.922 (0.922)	Loss 6.1665 (6.1665)	Accuracy 0.000 (0.000)
epoch: 2
Epoch: [2][0/40]	Time 6.418 (6.418)	Data 0.036 (0.036)	Loss 0.6884 (0.6884)	Accuracy 75.000 (75.000)
Epoch: [2][10/40]	Time 2.296 (2.865)	Data 0.029 (0.031)	Loss 1.7252 (1.1256)	Accuracy 25.000 (68.182)
Epoch: [2][20/40]	Time 7.899 (3.202)	Data 0.018 (0.029)	Loss 2.2403 (1.1926)	Accuracy 75.000 (66.667)
Epoch: [2][30/40]	Time 2.374 (3.061)	Data 0.067 (0.032)	Loss 0.1416 (1.5594)	Accuracy 100.000 (62.903)
Test: [0/10]	Time 0.722 (0.722)	Loss 11.2238 (11.2238)	Accuracy 0.000 (0.000)
epoch: 3
Epoch: [3][0/40]	Time 5.131 (5.131)	Data 0.030 (0.030)	Loss 1.0304 (1.0304)	Accuracy 75.000 (75.000)
Epoch: [3][10/40]	Time 4.855 (3.974)	Data 0.041 (0.035)	Loss 0.6451 (2.1623)	Accuracy 75.000 (63.636)
Epoch: [3][20/40]	Time 3.088 (4.122)	Data 0.054 (0.038)	Loss 1.5233 (2.0206)	Accuracy 75.000 (66.667)
Epoch: [3][30/40]	Time 2.750 (3.700)	Data 0.031 (0.035)	Loss 0.3812 (1.7205)	Accuracy 75.000 (67.742)
Test: [0/10]	Time 0.661 (0.661)	Loss 2.0740 (2.0740)	Accuracy 50.000 (50.000)
epoch: 4
Epoch: [4][0/40]	Time 2.638 (2.638)	Data 0.027 (0.027)	Loss 0.0020 (0.0020)	Accuracy 100.000 (100.000)
Epoch: [4][10/40]	Time 1.741 (3.354)	Data 0.013 (0.031)	Loss 0.4105 (0.1941)	Accuracy 50.000 (86.364)
Epoch: [4][20/40]	Time 4.231 (2.943)	Data 0.028 (0.029)	Loss 0.0128 (0.1587)	Accuracy 100.000 (90.476)
Epoch: [4][30/40]	Time 1.710 (2.644)	Data 0.024 (0.029)	Loss 0.0293 (0.1360)	Accuracy 100.000 (93.548)
Test: [0/10]	Time 0.486 (0.486)	Loss 2.6859 (2.6859)	Accuracy 25.000 (25.000)
epoch: 5
Epoch: [5][0/40]	Time 1.771 (1.771)	Data 0.024 (0.024)	Loss 0.0371 (0.0371)	Accuracy 100.000 (100.000)
Epoch: [5][10/40]	Time 1.813 (1.834)	Data 0.025 (0.025)	Loss 2.1820 (0.3307)	Accuracy 75.000 (90.909)
Epoch: [5][20/40]	Time 1.926 (1.802)	Data 0.016 (0.022)	Loss 0.0372 (0.2584)	Accuracy 100.000 (94.048)
Epoch: [5][30/40]	Time 2.264 (1.983)	Data 0.029 (0.023)	Loss 0.0236 (0.3583)	Accuracy 100.000 (91.129)
Test: [0/10]	Time 0.506 (0.506)	Loss 3.0087 (3.0087)	Accuracy 0.000 (0.000)
epoch: 6
Epoch: [6][0/40]	Time 1.769 (1.769)	Data 0.024 (0.024)	Loss 0.0915 (0.0915)	Accuracy 100.000 (100.000)
Epoch: [6][10/40]	Time 1.865 (1.782)	Data 0.015 (0.025)	Loss 0.0010 (0.2122)	Accuracy 100.000 (97.727)
Epoch: [6][20/40]	Time 1.724 (1.786)	Data 0.029 (0.024)	Loss 0.0357 (0.1725)	Accuracy 100.000 (96.429)
Epoch: [6][30/40]	Time 1.743 (1.773)	Data 0.013 (0.025)	Loss 0.0872 (0.1604)	Accuracy 100.000 (95.968)
Test: [0/10]	Time 0.539 (0.539)	Loss 3.0194 (3.0194)	Accuracy 25.000 (25.000)
epoch: 7
Epoch: [7][0/40]	Time 1.764 (1.764)	Data 0.024 (0.024)	Loss 0.7424 (0.7424)	Accuracy 75.000 (75.000)
Epoch: [7][10/40]	Time 1.744 (1.905)	Data 0.032 (0.023)	Loss 0.3129 (0.1216)	Accuracy 75.000 (95.455)
Epoch: [7][20/40]	Time 2.040 (1.865)	Data 0.030 (0.023)	Loss 0.0016 (0.1417)	Accuracy 100.000 (94.048)
Epoch: [7][30/40]	Time 1.767 (1.839)	Data 0.028 (0.023)	Loss 0.0036 (0.1199)	Accuracy 100.000 (95.161)
Test: [0/10]	Time 1.215 (1.215)	Loss 4.2611 (4.2611)	Accuracy 25.000 (25.000)
epoch: 8
Epoch: [8][0/40]	Time 3.402 (3.402)	Data 0.049 (0.049)	Loss 0.0029 (0.0029)	Accuracy 100.000 (100.000)
Epoch: [8][10/40]	Time 1.848 (2.095)	Data 0.028 (0.031)	Loss 0.0017 (0.3523)	Accuracy 100.000 (88.636)
Epoch: [8][20/40]	Time 1.899 (2.108)	Data 0.033 (0.028)	Loss 0.0282 (0.2172)	Accuracy 100.000 (91.667)
Epoch: [8][30/40]	Time 1.728 (2.278)	Data 0.028 (0.027)	Loss 0.0053 (0.1675)	Accuracy 100.000 (92.742)
Test: [0/10]	Time 0.707 (0.707)	Loss 3.6589 (3.6589)	Accuracy 25.000 (25.000)
epoch: 9
Epoch: [9][0/40]	Time 2.202 (2.202)	Data 0.027 (0.027)	Loss 0.0297 (0.0297)	Accuracy 100.000 (100.000)
Epoch: [9][10/40]	Time 2.150 (1.876)	Data 0.042 (0.029)	Loss 0.0003 (0.0519)	Accuracy 100.000 (97.727)
Epoch: [9][20/40]	Time 2.631 (2.073)	Data 0.037 (0.029)	Loss 0.0271 (0.0416)	Accuracy 100.000 (98.810)
Epoch: [9][30/40]	Time 2.803 (2.178)	Data 0.044 (0.028)	Loss 0.6595 (0.0666)	Accuracy 75.000 (97.581)
Test: [0/10]	Time 0.482 (0.482)	Loss 4.9113 (4.9113)	Accuracy 25.000 (25.000)
epoch: 10
Epoch: [10][0/40]	Time 1.985 (1.985)	Data 0.024 (0.024)	Loss 0.0008 (0.0008)	Accuracy 100.000 (100.000)
Epoch: [10][10/40]	Time 1.810 (1.980)	Data 0.024 (0.023)	Loss 0.0337 (0.0160)	Accuracy 100.000 (100.000)
Epoch: [10][20/40]	Time 2.568 (2.471)	Data 0.027 (0.027)	Loss 0.0254 (0.0242)	Accuracy 100.000 (100.000)
Epoch: [10][30/40]	Time 3.150 (2.562)	Data 0.012 (0.025)	Loss 0.0001 (0.0195)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.532 (0.532)	Loss 3.3731 (3.3731)	Accuracy 25.000 (25.000)
epoch: 11
Epoch: [11][0/40]	Time 2.193 (2.193)	Data 0.009 (0.009)	Loss 0.0001 (0.0001)	Accuracy 100.000 (100.000)
Epoch: [11][10/40]	Time 1.706 (2.087)	Data 0.028 (0.022)	Loss 0.0001 (0.2720)	Accuracy 100.000 (95.455)
Epoch: [11][20/40]	Time 1.923 (1.973)	Data 0.031 (0.023)	Loss 1.0686 (0.4452)	Accuracy 75.000 (91.667)
Epoch: [11][30/40]	Time 3.110 (2.124)	Data 0.027 (0.025)	Loss 0.4587 (0.3891)	Accuracy 75.000 (90.323)
Test: [0/10]	Time 0.518 (0.518)	Loss 7.2590 (7.2590)	Accuracy 0.000 (0.000)
epoch: 12
Epoch: [12][0/40]	Time 1.711 (1.711)	Data 0.009 (0.009)	Loss 0.0071 (0.0071)	Accuracy 100.000 (100.000)
Epoch: [12][10/40]	Time 1.832 (1.817)	Data 0.009 (0.020)	Loss 0.0345 (0.4211)	Accuracy 100.000 (90.909)
Epoch: [12][20/40]	Time 1.703 (1.810)	Data 0.013 (0.019)	Loss 0.6646 (0.3837)	Accuracy 75.000 (91.667)
Epoch: [12][30/40]	Time 1.698 (1.772)	Data 0.028 (0.021)	Loss 0.0011 (0.3026)	Accuracy 100.000 (91.935)
Test: [0/10]	Time 0.481 (0.481)	Loss 6.1272 (6.1272)	Accuracy 0.000 (0.000)
epoch: 13
Epoch: [13][0/40]	Time 1.701 (1.701)	Data 0.024 (0.024)	Loss 1.7059 (1.7059)	Accuracy 50.000 (50.000)
Epoch: [13][10/40]	Time 1.645 (1.756)	Data 0.024 (0.035)	Loss 0.0082 (0.3397)	Accuracy 100.000 (93.182)
Epoch: [13][20/40]	Time 1.669 (1.716)	Data 0.028 (0.030)	Loss 0.2505 (0.2757)	Accuracy 75.000 (91.667)
Epoch: [13][30/40]	Time 1.707 (1.707)	Data 0.028 (0.029)	Loss 0.0317 (0.2405)	Accuracy 100.000 (92.742)
Test: [0/10]	Time 0.477 (0.477)	Loss 2.0964 (2.0964)	Accuracy 0.000 (0.000)
epoch: 14
Epoch: [14][0/40]	Time 1.658 (1.658)	Data 0.009 (0.009)	Loss 0.0080 (0.0080)	Accuracy 100.000 (100.000)
Epoch: [14][10/40]	Time 1.672 (1.676)	Data 0.028 (0.022)	Loss 0.2555 (0.0580)	Accuracy 100.000 (97.727)
Epoch: [14][20/40]	Time 1.860 (1.685)	Data 0.013 (0.022)	Loss 0.0080 (0.0410)	Accuracy 100.000 (98.810)
Epoch: [14][30/40]	Time 1.667 (1.681)	Data 0.028 (0.022)	Loss 0.0005 (0.1314)	Accuracy 100.000 (95.968)
Test: [0/10]	Time 0.490 (0.490)	Loss 5.8245 (5.8245)	Accuracy 25.000 (25.000)
epoch: 15
Epoch: [15][0/40]	Time 1.661 (1.661)	Data 0.024 (0.024)	Loss 0.0009 (0.0009)	Accuracy 100.000 (100.000)
Epoch: [15][10/40]	Time 1.687 (1.671)	Data 0.028 (0.026)	Loss 0.0012 (0.1876)	Accuracy 100.000 (97.727)
Epoch: [15][20/40]	Time 1.654 (1.677)	Data 0.024 (0.025)	Loss 0.0007 (0.1556)	Accuracy 100.000 (95.238)
Epoch: [15][30/40]	Time 1.721 (1.680)	Data 0.028 (0.023)	Loss 0.0016 (0.1289)	Accuracy 100.000 (95.968)
Test: [0/10]	Time 0.518 (0.518)	Loss 4.1934 (4.1934)	Accuracy 0.000 (0.000)
epoch: 16
Epoch: [16][0/40]	Time 1.705 (1.705)	Data 0.024 (0.024)	Loss 0.0115 (0.0115)	Accuracy 100.000 (100.000)
Epoch: [16][10/40]	Time 1.672 (1.796)	Data 0.028 (0.023)	Loss 0.0467 (0.0841)	Accuracy 100.000 (95.455)
Epoch: [16][20/40]	Time 1.692 (1.749)	Data 0.028 (0.023)	Loss 0.0000 (0.1470)	Accuracy 100.000 (96.429)
Epoch: [16][30/40]	Time 1.648 (1.733)	Data 0.026 (0.023)	Loss 0.0000 (0.1215)	Accuracy 100.000 (96.774)
Test: [0/10]	Time 0.490 (0.490)	Loss 1.3919 (1.3919)	Accuracy 75.000 (75.000)
epoch: 17
Epoch: [17][0/40]	Time 2.358 (2.358)	Data 0.024 (0.024)	Loss 0.0046 (0.0046)	Accuracy 100.000 (100.000)
Epoch: [17][10/40]	Time 1.883 (2.325)	Data 0.030 (0.025)	Loss 0.0000 (0.0900)	Accuracy 100.000 (97.727)
Epoch: [17][20/40]	Time 1.906 (2.449)	Data 0.027 (0.026)	Loss 0.0032 (0.0808)	Accuracy 100.000 (97.619)
Epoch: [17][30/40]	Time 8.549 (2.971)	Data 0.035 (0.028)	Loss 0.0054 (0.0561)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.532 (0.532)	Loss 4.5882 (4.5882)	Accuracy 0.000 (0.000)
epoch: 18
Epoch: [18][0/40]	Time 2.713 (2.713)	Data 0.029 (0.029)	Loss 0.0002 (0.0002)	Accuracy 100.000 (100.000)
Epoch: [18][10/40]	Time 3.544 (3.674)	Data 0.034 (0.025)	Loss 0.0001 (0.0381)	Accuracy 100.000 (97.727)
Epoch: [18][20/40]	Time 2.546 (4.690)	Data 0.024 (0.033)	Loss 0.0404 (0.0574)	Accuracy 100.000 (96.429)
Epoch: [18][30/40]	Time 3.915 (4.391)	Data 0.066 (0.032)	Loss 0.0000 (0.0587)	Accuracy 100.000 (95.968)
Test: [0/10]	Time 0.705 (0.705)	Loss 3.9803 (3.9803)	Accuracy 25.000 (25.000)
epoch: 19
Epoch: [19][0/40]	Time 2.340 (2.340)	Data 0.034 (0.034)	Loss 0.0004 (0.0004)	Accuracy 100.000 (100.000)
Epoch: [19][10/40]	Time 1.717 (2.170)	Data 0.024 (0.022)	Loss 0.0028 (0.5100)	Accuracy 100.000 (93.182)
Epoch: [19][20/40]	Time 2.060 (2.046)	Data 0.009 (0.019)	Loss 0.0076 (0.3177)	Accuracy 100.000 (95.238)
Epoch: [19][30/40]	Time 1.737 (1.973)	Data 0.028 (0.020)	Loss 0.0000 (0.2252)	Accuracy 100.000 (95.968)
Test: [0/10]	Time 0.485 (0.485)	Loss 2.5685 (2.5685)	Accuracy 50.000 (50.000)
epoch: 20
Epoch: [20][0/40]	Time 2.218 (2.218)	Data 0.024 (0.024)	Loss 0.0090 (0.0090)	Accuracy 100.000 (100.000)
Epoch: [20][10/40]	Time 1.882 (1.958)	Data 0.030 (0.030)	Loss 1.1995 (0.4398)	Accuracy 75.000 (90.909)
Epoch: [20][20/40]	Time 1.760 (1.934)	Data 0.028 (0.026)	Loss 0.7359 (0.3113)	Accuracy 75.000 (91.667)
Epoch: [20][30/40]	Time 1.736 (1.903)	Data 0.028 (0.026)	Loss 0.0001 (0.2147)	Accuracy 100.000 (94.355)
Test: [0/10]	Time 0.509 (0.509)	Loss 1.2783 (1.2783)	Accuracy 75.000 (75.000)
epoch: 21
Epoch: [21][0/40]	Time 1.805 (1.805)	Data 0.026 (0.026)	Loss 0.0015 (0.0015)	Accuracy 100.000 (100.000)
Epoch: [21][10/40]	Time 1.775 (1.887)	Data 0.014 (0.026)	Loss 0.0002 (0.0507)	Accuracy 100.000 (97.727)
Epoch: [21][20/40]	Time 1.829 (1.934)	Data 0.037 (0.027)	Loss 0.0093 (0.1451)	Accuracy 100.000 (95.238)
Epoch: [21][30/40]	Time 1.714 (1.888)	Data 0.013 (0.025)	Loss 0.0066 (0.1058)	Accuracy 100.000 (96.774)
Test: [0/10]	Time 0.491 (0.491)	Loss 0.4602 (0.4602)	Accuracy 75.000 (75.000)
epoch: 22
Epoch: [22][0/40]	Time 2.078 (2.078)	Data 0.024 (0.024)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [22][10/40]	Time 1.960 (1.907)	Data 0.031 (0.025)	Loss 0.0066 (0.0610)	Accuracy 100.000 (97.727)
Epoch: [22][20/40]	Time 1.746 (1.856)	Data 0.029 (0.024)	Loss 0.0000 (0.0645)	Accuracy 100.000 (96.429)
Epoch: [22][30/40]	Time 1.751 (1.839)	Data 0.029 (0.024)	Loss 0.0001 (0.0693)	Accuracy 100.000 (96.774)
Test: [0/10]	Time 0.570 (0.570)	Loss 0.7117 (0.7117)	Accuracy 75.000 (75.000)
epoch: 23
Epoch: [23][0/40]	Time 1.823 (1.823)	Data 0.028 (0.028)	Loss 0.1140 (0.1140)	Accuracy 100.000 (100.000)
Epoch: [23][10/40]	Time 1.816 (1.839)	Data 0.028 (0.025)	Loss 0.0001 (0.0125)	Accuracy 100.000 (100.000)
Epoch: [23][20/40]	Time 1.715 (1.795)	Data 0.024 (0.024)	Loss 0.0374 (0.0126)	Accuracy 100.000 (100.000)
Epoch: [23][30/40]	Time 2.006 (1.831)	Data 0.030 (0.023)	Loss 0.0000 (0.0119)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.497 (0.497)	Loss 4.3965 (4.3965)	Accuracy 25.000 (25.000)
epoch: 24
Epoch: [24][0/40]	Time 1.794 (1.794)	Data 0.025 (0.025)	Loss 0.7260 (0.7260)	Accuracy 75.000 (75.000)
Epoch: [24][10/40]	Time 1.738 (1.804)	Data 0.029 (0.026)	Loss 0.0166 (0.0684)	Accuracy 100.000 (97.727)
Epoch: [24][20/40]	Time 1.747 (1.793)	Data 0.031 (0.025)	Loss 0.1895 (0.0555)	Accuracy 100.000 (98.810)
Epoch: [24][30/40]	Time 1.756 (1.798)	Data 0.012 (0.024)	Loss 0.0000 (0.0959)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.518 (0.518)	Loss 4.1441 (4.1441)	Accuracy 50.000 (50.000)
epoch: 25
Epoch: [25][0/40]	Time 1.697 (1.697)	Data 0.024 (0.024)	Loss 0.0016 (0.0016)	Accuracy 100.000 (100.000)
Epoch: [25][10/40]	Time 1.726 (1.709)	Data 0.028 (0.024)	Loss 0.0000 (0.0361)	Accuracy 100.000 (97.727)
Epoch: [25][20/40]	Time 1.697 (1.700)	Data 0.028 (0.024)	Loss 0.0182 (0.0207)	Accuracy 100.000 (98.810)
Epoch: [25][30/40]	Time 1.857 (1.743)	Data 0.029 (0.022)	Loss 1.4483 (0.0651)	Accuracy 75.000 (98.387)
Test: [0/10]	Time 0.490 (0.490)	Loss 15.1011 (15.1011)	Accuracy 0.000 (0.000)
epoch: 26
Epoch: [26][0/40]	Time 1.709 (1.709)	Data 0.024 (0.024)	Loss 0.9482 (0.9482)	Accuracy 75.000 (75.000)
Epoch: [26][10/40]	Time 1.698 (1.695)	Data 0.013 (0.022)	Loss 1.0292 (0.2214)	Accuracy 75.000 (93.182)
Epoch: [26][20/40]	Time 1.703 (1.701)	Data 0.013 (0.023)	Loss 0.0001 (0.1196)	Accuracy 100.000 (96.429)
Epoch: [26][30/40]	Time 1.684 (1.703)	Data 0.028 (0.025)	Loss 0.0029 (0.1308)	Accuracy 100.000 (96.774)
Test: [0/10]	Time 0.488 (0.488)	Loss 3.0768 (3.0768)	Accuracy 25.000 (25.000)
epoch: 27
Epoch: [27][0/40]	Time 1.690 (1.690)	Data 0.024 (0.024)	Loss 0.0021 (0.0021)	Accuracy 100.000 (100.000)
Epoch: [27][10/40]	Time 1.738 (2.037)	Data 0.028 (0.028)	Loss 0.0014 (0.0374)	Accuracy 100.000 (97.727)
Epoch: [27][20/40]	Time 1.706 (1.935)	Data 0.030 (0.026)	Loss 0.0001 (0.1177)	Accuracy 100.000 (95.238)
Epoch: [27][30/40]	Time 1.740 (1.987)	Data 0.028 (0.026)	Loss 0.0000 (0.1678)	Accuracy 100.000 (94.355)
Test: [0/10]	Time 0.496 (0.496)	Loss 1.3435 (1.3435)	Accuracy 50.000 (50.000)
epoch: 28
Epoch: [28][0/40]	Time 1.764 (1.764)	Data 0.024 (0.024)	Loss 0.0001 (0.0001)	Accuracy 100.000 (100.000)
Epoch: [28][10/40]	Time 1.728 (1.844)	Data 0.028 (0.026)	Loss 0.0000 (0.1396)	Accuracy 100.000 (97.727)
Epoch: [28][20/40]	Time 1.682 (1.786)	Data 0.024 (0.024)	Loss 0.0000 (0.0782)	Accuracy 100.000 (98.810)
Epoch: [28][30/40]	Time 1.679 (1.773)	Data 0.028 (0.022)	Loss 0.4579 (0.0971)	Accuracy 75.000 (97.581)
Test: [0/10]	Time 0.518 (0.518)	Loss 3.2107 (3.2107)	Accuracy 25.000 (25.000)
epoch: 29
Epoch: [29][0/40]	Time 1.731 (1.731)	Data 0.025 (0.025)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [29][10/40]	Time 3.103 (2.178)	Data 0.024 (0.025)	Loss 0.0000 (0.0286)	Accuracy 100.000 (97.727)
Epoch: [29][20/40]	Time 2.505 (2.389)	Data 0.030 (0.028)	Loss 0.0000 (0.0813)	Accuracy 100.000 (96.429)
Epoch: [29][30/40]	Time 1.735 (2.213)	Data 0.028 (0.026)	Loss 0.0004 (0.0823)	Accuracy 100.000 (96.774)
Test: [0/10]	Time 0.502 (0.502)	Loss 2.0916 (2.0916)	Accuracy 50.000 (50.000)
epoch: 30
Epoch: [30][0/40]	Time 1.881 (1.881)	Data 0.024 (0.024)	Loss 0.0011 (0.0011)	Accuracy 100.000 (100.000)
Epoch: [30][10/40]	Time 1.749 (2.081)	Data 0.029 (0.024)	Loss 0.2608 (1.4607)	Accuracy 75.000 (77.273)
Epoch: [30][20/40]	Time 1.787 (1.936)	Data 0.024 (0.024)	Loss 0.1650 (0.9566)	Accuracy 100.000 (83.333)
Epoch: [30][30/40]	Time 1.807 (1.995)	Data 0.031 (0.025)	Loss 0.8403 (0.8000)	Accuracy 75.000 (86.290)
Test: [0/10]	Time 0.959 (0.959)	Loss 6.8147 (6.8147)	Accuracy 50.000 (50.000)
epoch: 31
Epoch: [31][0/40]	Time 1.924 (1.924)	Data 0.009 (0.009)	Loss 0.8936 (0.8936)	Accuracy 75.000 (75.000)
Epoch: [31][10/40]	Time 1.753 (1.943)	Data 0.024 (0.024)	Loss 0.5418 (0.3808)	Accuracy 75.000 (90.909)
Epoch: [31][20/40]	Time 1.724 (1.905)	Data 0.013 (0.023)	Loss 0.0036 (0.2229)	Accuracy 100.000 (92.857)
Epoch: [31][30/40]	Time 3.585 (1.941)	Data 0.010 (0.022)	Loss 0.0019 (0.2086)	Accuracy 100.000 (92.742)
Test: [0/10]	Time 0.483 (0.483)	Loss 1.7688 (1.7688)	Accuracy 50.000 (50.000)
epoch: 32
Epoch: [32][0/40]	Time 1.721 (1.721)	Data 0.009 (0.009)	Loss 0.1136 (0.1136)	Accuracy 100.000 (100.000)
Epoch: [32][10/40]	Time 1.725 (1.722)	Data 0.028 (0.019)	Loss 0.0070 (0.0681)	Accuracy 100.000 (97.727)
Epoch: [32][20/40]	Time 1.723 (1.719)	Data 0.028 (0.022)	Loss 0.0009 (0.1478)	Accuracy 100.000 (96.429)
Epoch: [32][30/40]	Time 1.743 (1.785)	Data 0.028 (0.023)	Loss 0.0167 (0.1049)	Accuracy 100.000 (97.581)
Test: [0/10]	Time 0.535 (0.535)	Loss 2.4865 (2.4865)	Accuracy 50.000 (50.000)
epoch: 33
Epoch: [33][0/40]	Time 1.782 (1.782)	Data 0.009 (0.009)	Loss 0.0001 (0.0001)	Accuracy 100.000 (100.000)
Epoch: [33][10/40]	Time 1.679 (1.938)	Data 0.024 (0.024)	Loss 0.0001 (0.2306)	Accuracy 100.000 (97.727)
Epoch: [33][20/40]	Time 2.049 (1.867)	Data 0.024 (0.021)	Loss 0.0000 (0.1549)	Accuracy 100.000 (97.619)
Epoch: [33][30/40]	Time 1.737 (1.915)	Data 0.029 (0.024)	Loss 0.0000 (0.1574)	Accuracy 100.000 (96.774)
Test: [0/10]	Time 0.497 (0.497)	Loss 5.3928 (5.3928)	Accuracy 25.000 (25.000)
epoch: 34
Epoch: [34][0/40]	Time 1.917 (1.917)	Data 0.009 (0.009)	Loss 0.0014 (0.0014)	Accuracy 100.000 (100.000)
Epoch: [34][10/40]	Time 1.718 (1.819)	Data 0.024 (0.020)	Loss 0.0000 (0.1091)	Accuracy 100.000 (97.727)
Epoch: [34][20/40]	Time 1.765 (1.839)	Data 0.058 (0.027)	Loss 0.0000 (0.4789)	Accuracy 100.000 (94.048)
Epoch: [34][30/40]	Time 2.027 (1.884)	Data 0.030 (0.027)	Loss 0.0025 (0.5574)	Accuracy 100.000 (91.129)
Test: [0/10]	Time 0.538 (0.538)	Loss 6.4694 (6.4694)	Accuracy 25.000 (25.000)
epoch: 35
Epoch: [35][0/40]	Time 1.740 (1.740)	Data 0.009 (0.009)	Loss 0.6631 (0.6631)	Accuracy 75.000 (75.000)
Epoch: [35][10/40]	Time 1.720 (1.716)	Data 0.028 (0.022)	Loss 0.0000 (1.1536)	Accuracy 100.000 (88.636)
Epoch: [35][20/40]	Time 1.680 (1.705)	Data 0.028 (0.024)	Loss 0.0000 (1.1577)	Accuracy 100.000 (84.524)
Epoch: [35][30/40]	Time 1.698 (1.703)	Data 0.013 (0.024)	Loss 0.1739 (1.1644)	Accuracy 75.000 (83.065)
Test: [0/10]	Time 0.668 (0.668)	Loss 7.1607 (7.1607)	Accuracy 0.000 (0.000)
epoch: 36
Epoch: [36][0/40]	Time 3.931 (3.931)	Data 0.010 (0.010)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [36][10/40]	Time 1.861 (2.470)	Data 0.029 (0.026)	Loss 0.0977 (0.2954)	Accuracy 100.000 (93.182)
Epoch: [36][20/40]	Time 1.967 (2.159)	Data 0.029 (0.026)	Loss 1.9145 (0.3734)	Accuracy 75.000 (92.857)
Epoch: [36][30/40]	Time 2.384 (2.412)	Data 0.042 (0.028)	Loss 0.0000 (0.3631)	Accuracy 100.000 (94.355)
Test: [0/10]	Time 0.525 (0.525)	Loss 3.4929 (3.4929)	Accuracy 25.000 (25.000)
epoch: 37
Epoch: [37][0/40]	Time 2.095 (2.095)	Data 0.010 (0.010)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [37][10/40]	Time 1.736 (2.039)	Data 0.028 (0.026)	Loss 1.1387 (0.1496)	Accuracy 50.000 (93.182)
Epoch: [37][20/40]	Time 1.768 (1.941)	Data 0.013 (0.026)	Loss 0.0583 (0.1610)	Accuracy 100.000 (95.238)
Epoch: [37][30/40]	Time 1.983 (1.906)	Data 0.013 (0.026)	Loss 0.0000 (0.2806)	Accuracy 100.000 (94.355)
Test: [0/10]	Time 0.516 (0.516)	Loss 10.2654 (10.2654)	Accuracy 25.000 (25.000)
epoch: 38
Epoch: [38][0/40]	Time 1.806 (1.806)	Data 0.009 (0.009)	Loss 0.0001 (0.0001)	Accuracy 100.000 (100.000)
Epoch: [38][10/40]	Time 1.731 (2.061)	Data 0.024 (0.022)	Loss 0.0000 (0.0118)	Accuracy 100.000 (100.000)
Epoch: [38][20/40]	Time 2.296 (2.014)	Data 0.027 (0.025)	Loss 0.0000 (0.2151)	Accuracy 100.000 (96.429)
Epoch: [38][30/40]	Time 2.265 (1.979)	Data 0.027 (0.024)	Loss 0.0017 (0.1539)	Accuracy 100.000 (97.581)
Test: [0/10]	Time 0.489 (0.489)	Loss 3.9843 (3.9843)	Accuracy 25.000 (25.000)
epoch: 39
Epoch: [39][0/40]	Time 1.973 (1.973)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [39][10/40]	Time 1.782 (1.904)	Data 0.013 (0.018)	Loss 0.0008 (0.0509)	Accuracy 100.000 (97.727)
Epoch: [39][20/40]	Time 4.466 (2.229)	Data 0.020 (0.022)	Loss 0.0000 (0.0271)	Accuracy 100.000 (98.810)
Epoch: [39][30/40]	Time 5.076 (2.504)	Data 0.034 (0.026)	Loss 0.3049 (0.0284)	Accuracy 75.000 (98.387)
Test: [0/10]	Time 0.508 (0.508)	Loss 5.7369 (5.7369)	Accuracy 50.000 (50.000)
epoch: 40
Epoch: [40][0/40]	Time 1.792 (1.792)	Data 0.011 (0.011)	Loss 0.0013 (0.0013)	Accuracy 100.000 (100.000)
Epoch: [40][10/40]	Time 2.069 (1.876)	Data 0.032 (0.026)	Loss 0.0002 (0.0975)	Accuracy 100.000 (95.455)
Epoch: [40][20/40]	Time 1.796 (1.882)	Data 0.025 (0.026)	Loss 0.0001 (0.0618)	Accuracy 100.000 (96.429)
Epoch: [40][30/40]	Time 1.763 (1.883)	Data 0.029 (0.027)	Loss 0.0000 (0.0851)	Accuracy 100.000 (96.774)
Test: [0/10]	Time 0.546 (0.546)	Loss 0.0032 (0.0032)	Accuracy 100.000 (100.000)
epoch: 41
Epoch: [41][0/40]	Time 1.930 (1.930)	Data 0.024 (0.024)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [41][10/40]	Time 2.173 (1.935)	Data 0.035 (0.027)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [41][20/40]	Time 1.926 (2.110)	Data 0.031 (0.024)	Loss 0.0646 (0.0031)	Accuracy 100.000 (100.000)
Epoch: [41][30/40]	Time 2.371 (2.063)	Data 0.028 (0.025)	Loss 0.0000 (0.0025)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.491 (0.491)	Loss 1.2362 (1.2362)	Accuracy 75.000 (75.000)
epoch: 42
Epoch: [42][0/40]	Time 1.772 (1.772)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [42][10/40]	Time 1.728 (1.739)	Data 0.028 (0.026)	Loss 0.0069 (0.3665)	Accuracy 100.000 (97.727)
Epoch: [42][20/40]	Time 1.730 (1.765)	Data 0.028 (0.028)	Loss 0.0000 (0.2109)	Accuracy 100.000 (97.619)
Epoch: [42][30/40]	Time 1.732 (1.759)	Data 0.024 (0.025)	Loss 0.0000 (0.1430)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.484 (0.484)	Loss 0.4622 (0.4622)	Accuracy 75.000 (75.000)
epoch: 43
Epoch: [43][0/40]	Time 1.994 (1.994)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [43][10/40]	Time 1.678 (1.789)	Data 0.024 (0.021)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [43][20/40]	Time 1.674 (1.773)	Data 0.028 (0.024)	Loss 0.0014 (0.0002)	Accuracy 100.000 (100.000)
Epoch: [43][30/40]	Time 1.688 (1.745)	Data 0.028 (0.024)	Loss 0.0000 (0.0001)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.473 (0.473)	Loss 5.3246 (5.3246)	Accuracy 25.000 (25.000)
epoch: 44
Epoch: [44][0/40]	Time 1.685 (1.685)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [44][10/40]	Time 1.671 (1.671)	Data 0.013 (0.024)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [44][20/40]	Time 1.682 (1.677)	Data 0.013 (0.025)	Loss 0.0000 (0.0034)	Accuracy 100.000 (100.000)
Epoch: [44][30/40]	Time 1.671 (1.677)	Data 0.028 (0.025)	Loss 0.0000 (0.0024)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.502 (0.502)	Loss 4.2155 (4.2155)	Accuracy 50.000 (50.000)
epoch: 45
Epoch: [45][0/40]	Time 1.843 (1.843)	Data 0.032 (0.032)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [45][10/40]	Time 1.651 (1.696)	Data 0.024 (0.025)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [45][20/40]	Time 1.670 (1.687)	Data 0.028 (0.024)	Loss 0.0004 (0.0657)	Accuracy 100.000 (98.810)
Epoch: [45][30/40]	Time 5.304 (1.946)	Data 0.037 (0.026)	Loss 0.0002 (0.0522)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.623 (0.623)	Loss 8.7674 (8.7674)	Accuracy 0.000 (0.000)
epoch: 46
Epoch: [46][0/40]	Time 2.020 (2.020)	Data 0.009 (0.009)	Loss 0.0293 (0.0293)	Accuracy 100.000 (100.000)
Epoch: [46][10/40]	Time 1.686 (1.748)	Data 0.028 (0.026)	Loss 0.0006 (0.0093)	Accuracy 100.000 (100.000)
Epoch: [46][20/40]	Time 1.685 (1.738)	Data 0.028 (0.026)	Loss 0.0000 (0.0353)	Accuracy 100.000 (98.810)
Epoch: [46][30/40]	Time 1.699 (1.731)	Data 0.030 (0.027)	Loss 0.0000 (0.0252)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.495 (0.495)	Loss 10.5854 (10.5854)	Accuracy 25.000 (25.000)
epoch: 47
Epoch: [47][0/40]	Time 1.682 (1.682)	Data 0.024 (0.024)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [47][10/40]	Time 1.712 (1.719)	Data 0.027 (0.024)	Loss 0.0065 (0.0033)	Accuracy 100.000 (100.000)
Epoch: [47][20/40]	Time 1.717 (1.717)	Data 0.028 (0.025)	Loss 0.0000 (0.0033)	Accuracy 100.000 (100.000)
Epoch: [47][30/40]	Time 1.693 (1.705)	Data 0.027 (0.026)	Loss 0.0000 (0.0024)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.500 (0.500)	Loss 3.8215 (3.8215)	Accuracy 75.000 (75.000)
epoch: 48
Epoch: [48][0/40]	Time 1.677 (1.677)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [48][10/40]	Time 1.709 (1.698)	Data 0.024 (0.019)	Loss 0.0000 (0.0418)	Accuracy 100.000 (97.727)
Epoch: [48][20/40]	Time 1.671 (1.691)	Data 0.028 (0.020)	Loss 0.0000 (0.1022)	Accuracy 100.000 (97.619)
Epoch: [48][30/40]	Time 1.664 (1.689)	Data 0.013 (0.021)	Loss 0.0000 (0.0693)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.490 (0.490)	Loss 3.2875 (3.2875)	Accuracy 25.000 (25.000)
epoch: 49
Epoch: [49][0/40]	Time 1.668 (1.668)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [49][10/40]	Time 1.684 (1.689)	Data 0.028 (0.022)	Loss 0.0000 (0.2250)	Accuracy 100.000 (97.727)
Epoch: [49][20/40]	Time 1.708 (1.689)	Data 0.024 (0.022)	Loss 0.0003 (0.1182)	Accuracy 100.000 (98.810)
Epoch: [49][30/40]	Time 1.686 (1.690)	Data 0.027 (0.024)	Loss 0.0000 (0.1108)	Accuracy 100.000 (97.581)
Test: [0/10]	Time 0.482 (0.482)	Loss 9.0107 (9.0107)	Accuracy 50.000 (50.000)
Test: [0/10]	Time 0.507 (0.507)	Loss 5.2479 (5.2479)	Accuracy 50.000 (50.000)
fold: 5
precision: 0.8
recall: 0.7111111111111111
f_score: 0.7529411764705882
ord_error: 0.525
####### FOLD: 1 #######
cut_df size is 160
cut_df size is 40
len(train_ds.y) 160
len(test_ds.y) 40
sum(test_ds.y) 75
train_loader
epoch: 0
Epoch: [0][0/40]	Time 1.725 (1.725)	Data 0.009 (0.009)	Loss 4.4753 (4.4753)	Accuracy 75.000 (75.000)
Epoch: [0][10/40]	Time 1.708 (1.701)	Data 0.024 (0.021)	Loss 0.2856 (1.4366)	Accuracy 75.000 (84.091)
Epoch: [0][20/40]	Time 1.688 (1.701)	Data 0.024 (0.021)	Loss 4.5093 (1.9276)	Accuracy 75.000 (80.952)
Epoch: [0][30/40]	Time 1.680 (1.702)	Data 0.028 (0.022)	Loss 10.2006 (3.1604)	Accuracy 50.000 (75.806)
Test: [0/10]	Time 0.487 (0.487)	Loss 0.0995 (0.0995)	Accuracy 100.000 (100.000)
epoch: 1
Epoch: [1][0/40]	Time 1.704 (1.704)	Data 0.010 (0.010)	Loss 0.8208 (0.8208)	Accuracy 75.000 (75.000)
Epoch: [1][10/40]	Time 1.631 (1.679)	Data 0.009 (0.020)	Loss 2.6121 (1.4199)	Accuracy 75.000 (79.545)
Epoch: [1][20/40]	Time 1.702 (1.685)	Data 0.028 (0.023)	Loss 0.4480 (1.5378)	Accuracy 75.000 (80.952)
Epoch: [1][30/40]	Time 5.067 (2.420)	Data 0.037 (0.027)	Loss 0.0000 (1.2348)	Accuracy 100.000 (83.871)
Test: [0/10]	Time 0.542 (0.542)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 2
Epoch: [2][0/40]	Time 2.478 (2.478)	Data 0.011 (0.011)	Loss 0.0003 (0.0003)	Accuracy 100.000 (100.000)
Epoch: [2][10/40]	Time 2.652 (2.477)	Data 0.033 (0.027)	Loss 0.0340 (0.3965)	Accuracy 100.000 (93.182)
Epoch: [2][20/40]	Time 4.989 (2.608)	Data 0.025 (0.028)	Loss 0.0278 (0.6614)	Accuracy 100.000 (91.667)
Epoch: [2][30/40]	Time 3.408 (2.671)	Data 0.028 (0.028)	Loss 0.0204 (0.5542)	Accuracy 100.000 (92.742)
Test: [0/10]	Time 0.688 (0.688)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 3
Epoch: [3][0/40]	Time 2.652 (2.652)	Data 0.011 (0.011)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [3][10/40]	Time 2.404 (2.794)	Data 0.032 (0.033)	Loss 0.0001 (0.0141)	Accuracy 100.000 (100.000)
Epoch: [3][20/40]	Time 2.635 (2.777)	Data 0.033 (0.035)	Loss 0.0192 (0.0193)	Accuracy 100.000 (100.000)
Epoch: [3][30/40]	Time 2.513 (2.746)	Data 0.044 (0.035)	Loss 0.0000 (0.0133)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.593 (0.593)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 4
Epoch: [4][0/40]	Time 3.033 (3.033)	Data 0.009 (0.009)	Loss 0.0002 (0.0002)	Accuracy 100.000 (100.000)
Epoch: [4][10/40]	Time 4.940 (2.990)	Data 0.035 (0.032)	Loss 0.0001 (0.0463)	Accuracy 100.000 (97.727)
Epoch: [4][20/40]	Time 2.986 (3.044)	Data 0.018 (0.035)	Loss 2.2443 (0.1314)	Accuracy 75.000 (97.619)
Epoch: [4][30/40]	Time 2.750 (3.098)	Data 0.017 (0.031)	Loss 0.0001 (0.1115)	Accuracy 100.000 (96.774)
Test: [0/10]	Time 0.724 (0.724)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 5
Epoch: [5][0/40]	Time 2.857 (2.857)	Data 0.011 (0.011)	Loss 0.0006 (0.0006)	Accuracy 100.000 (100.000)
Epoch: [5][10/40]	Time 2.797 (2.943)	Data 0.028 (0.032)	Loss 0.0142 (0.7744)	Accuracy 100.000 (90.909)
Epoch: [5][20/40]	Time 2.472 (2.785)	Data 0.037 (0.035)	Loss 0.0000 (0.6944)	Accuracy 100.000 (91.667)
Epoch: [5][30/40]	Time 4.433 (3.406)	Data 0.043 (0.037)	Loss 0.0007 (0.6019)	Accuracy 100.000 (91.935)
Test: [0/10]	Time 0.791 (0.791)	Loss 0.0001 (0.0001)	Accuracy 100.000 (100.000)
epoch: 6
Epoch: [6][0/40]	Time 3.750 (3.750)	Data 0.011 (0.011)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [6][10/40]	Time 2.887 (3.048)	Data 0.028 (0.032)	Loss 0.0000 (0.0288)	Accuracy 100.000 (97.727)
Epoch: [6][20/40]	Time 5.598 (3.172)	Data 0.018 (0.032)	Loss 1.1356 (0.2088)	Accuracy 75.000 (94.048)
Epoch: [6][30/40]	Time 2.684 (3.217)	Data 0.028 (0.032)	Loss 0.4550 (0.1933)	Accuracy 75.000 (94.355)
Test: [0/10]	Time 0.604 (0.604)	Loss 0.0046 (0.0046)	Accuracy 100.000 (100.000)
epoch: 7
Epoch: [7][0/40]	Time 2.921 (2.921)	Data 0.011 (0.011)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [7][10/40]	Time 1.517 (2.076)	Data 0.024 (0.027)	Loss 0.0032 (0.0018)	Accuracy 100.000 (100.000)
Epoch: [7][20/40]	Time 1.531 (1.848)	Data 0.028 (0.026)	Loss 0.0000 (0.0018)	Accuracy 100.000 (100.000)
Epoch: [7][30/40]	Time 1.630 (1.767)	Data 0.024 (0.026)	Loss 0.0002 (0.0039)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.496 (0.496)	Loss 0.3907 (0.3907)	Accuracy 75.000 (75.000)
epoch: 8
Epoch: [8][0/40]	Time 2.682 (2.682)	Data 0.009 (0.009)	Loss 0.7920 (0.7920)	Accuracy 75.000 (75.000)
Epoch: [8][10/40]	Time 1.676 (1.763)	Data 0.028 (0.024)	Loss 0.0000 (0.1023)	Accuracy 100.000 (95.455)
Epoch: [8][20/40]	Time 1.835 (1.762)	Data 0.013 (0.024)	Loss 0.0000 (0.0660)	Accuracy 100.000 (96.429)
Epoch: [8][30/40]	Time 1.494 (1.718)	Data 0.009 (0.023)	Loss 0.0000 (0.0828)	Accuracy 100.000 (96.774)
Test: [0/10]	Time 0.472 (0.472)	Loss 0.0002 (0.0002)	Accuracy 100.000 (100.000)
epoch: 9
Epoch: [9][0/40]	Time 1.705 (1.705)	Data 0.009 (0.009)	Loss 0.0001 (0.0001)	Accuracy 100.000 (100.000)
Epoch: [9][10/40]	Time 1.672 (1.594)	Data 0.028 (0.025)	Loss 0.0000 (0.1541)	Accuracy 100.000 (95.455)
Epoch: [9][20/40]	Time 1.644 (1.620)	Data 0.024 (0.023)	Loss 0.0000 (0.1597)	Accuracy 100.000 (96.429)
Epoch: [9][30/40]	Time 1.542 (1.666)	Data 0.028 (0.024)	Loss 0.0000 (0.1121)	Accuracy 100.000 (97.581)
Test: [0/10]	Time 0.468 (0.468)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 10
Epoch: [10][0/40]	Time 1.662 (1.662)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [10][10/40]	Time 1.548 (1.583)	Data 0.028 (0.022)	Loss 0.0000 (0.1147)	Accuracy 100.000 (97.727)
Epoch: [10][20/40]	Time 1.641 (1.592)	Data 0.024 (0.023)	Loss 0.0000 (0.1221)	Accuracy 100.000 (97.619)
Epoch: [10][30/40]	Time 1.834 (1.635)	Data 0.029 (0.024)	Loss 0.0000 (0.0874)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.472 (0.472)	Loss 0.0097 (0.0097)	Accuracy 100.000 (100.000)
epoch: 11
Epoch: [11][0/40]	Time 1.682 (1.682)	Data 0.009 (0.009)	Loss 0.0001 (0.0001)	Accuracy 100.000 (100.000)
Epoch: [11][10/40]	Time 1.519 (1.561)	Data 0.028 (0.026)	Loss 0.0000 (0.0362)	Accuracy 100.000 (97.727)
Epoch: [11][20/40]	Time 1.665 (1.567)	Data 0.028 (0.026)	Loss 0.0000 (0.0190)	Accuracy 100.000 (98.810)
Epoch: [11][30/40]	Time 1.542 (1.603)	Data 0.024 (0.025)	Loss 0.0000 (0.1702)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.480 (0.480)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 12
Epoch: [12][0/40]	Time 1.680 (1.680)	Data 0.009 (0.009)	Loss 0.1102 (0.1102)	Accuracy 100.000 (100.000)
Epoch: [12][10/40]	Time 1.530 (1.560)	Data 0.028 (0.026)	Loss 0.0000 (0.0103)	Accuracy 100.000 (100.000)
Epoch: [12][20/40]	Time 1.540 (1.570)	Data 0.024 (0.025)	Loss 0.0000 (0.0781)	Accuracy 100.000 (98.810)
Epoch: [12][30/40]	Time 1.676 (1.584)	Data 0.031 (0.024)	Loss 0.0000 (0.0545)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.478 (0.478)	Loss 0.0002 (0.0002)	Accuracy 100.000 (100.000)
epoch: 13
Epoch: [13][0/40]	Time 1.679 (1.679)	Data 0.009 (0.009)	Loss 0.0107 (0.0107)	Accuracy 100.000 (100.000)
Epoch: [13][10/40]	Time 1.707 (1.635)	Data 0.037 (0.020)	Loss 0.0000 (0.0014)	Accuracy 100.000 (100.000)
Epoch: [13][20/40]	Time 1.498 (1.597)	Data 0.028 (0.024)	Loss 0.0003 (0.0008)	Accuracy 100.000 (100.000)
Epoch: [13][30/40]	Time 1.673 (1.597)	Data 0.028 (0.025)	Loss 0.0000 (0.0022)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.469 (0.469)	Loss 0.0013 (0.0013)	Accuracy 100.000 (100.000)
epoch: 14
Epoch: [14][0/40]	Time 1.671 (1.671)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [14][10/40]	Time 1.697 (1.739)	Data 0.031 (0.032)	Loss 0.0020 (0.0008)	Accuracy 100.000 (100.000)
Epoch: [14][20/40]	Time 1.517 (1.674)	Data 0.013 (0.030)	Loss 0.0000 (0.0887)	Accuracy 100.000 (98.810)
Epoch: [14][30/40]	Time 1.513 (1.632)	Data 0.028 (0.029)	Loss 0.0000 (0.1128)	Accuracy 100.000 (97.581)
Test: [0/10]	Time 0.536 (0.536)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 15
Epoch: [15][0/40]	Time 6.518 (6.518)	Data 0.018 (0.018)	Loss 0.0008 (0.0008)	Accuracy 100.000 (100.000)
Epoch: [15][10/40]	Time 2.198 (3.713)	Data 0.033 (0.032)	Loss 0.0000 (0.0312)	Accuracy 100.000 (97.727)
Epoch: [15][20/40]	Time 1.906 (3.021)	Data 0.030 (0.031)	Loss 0.0000 (0.0166)	Accuracy 100.000 (98.810)
Epoch: [15][30/40]	Time 1.936 (2.718)	Data 0.024 (0.029)	Loss 0.0000 (0.0113)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.552 (0.552)	Loss 0.0002 (0.0002)	Accuracy 100.000 (100.000)
epoch: 16
Epoch: [16][0/40]	Time 2.171 (2.171)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [16][10/40]	Time 2.164 (2.349)	Data 0.031 (0.023)	Loss 0.0000 (0.0123)	Accuracy 100.000 (100.000)
Epoch: [16][20/40]	Time 1.875 (2.239)	Data 0.033 (0.025)	Loss 0.0000 (0.0106)	Accuracy 100.000 (100.000)
Epoch: [16][30/40]	Time 2.566 (2.351)	Data 0.036 (0.025)	Loss 0.0000 (0.0073)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.513 (0.513)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 17
Epoch: [17][0/40]	Time 1.818 (1.818)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [17][10/40]	Time 1.699 (1.646)	Data 0.028 (0.026)	Loss 0.0002 (0.0004)	Accuracy 100.000 (100.000)
Epoch: [17][20/40]	Time 1.569 (1.643)	Data 0.028 (0.027)	Loss 0.0000 (0.0002)	Accuracy 100.000 (100.000)
Epoch: [17][30/40]	Time 1.747 (1.713)	Data 0.028 (0.027)	Loss 0.0000 (0.0002)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.511 (0.511)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 18
Epoch: [18][0/40]	Time 1.744 (1.744)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [18][10/40]	Time 1.590 (1.634)	Data 0.013 (0.025)	Loss 0.0000 (0.0021)	Accuracy 100.000 (100.000)
Epoch: [18][20/40]	Time 2.462 (1.994)	Data 0.024 (0.026)	Loss 0.0007 (0.0014)	Accuracy 100.000 (100.000)
Epoch: [18][30/40]	Time 1.559 (2.187)	Data 0.028 (0.032)	Loss 0.0000 (0.0048)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.500 (0.500)	Loss 0.0001 (0.0001)	Accuracy 100.000 (100.000)
epoch: 19
Epoch: [19][0/40]	Time 1.729 (1.729)	Data 0.010 (0.010)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [19][10/40]	Time 1.907 (1.823)	Data 0.016 (0.021)	Loss 0.0000 (0.0001)	Accuracy 100.000 (100.000)
Epoch: [19][20/40]	Time 2.247 (2.136)	Data 0.045 (0.026)	Loss 0.0000 (0.0239)	Accuracy 100.000 (98.810)
Epoch: [19][30/40]	Time 3.428 (2.288)	Data 0.028 (0.028)	Loss 0.0000 (0.0821)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.592 (0.592)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 20
Epoch: [20][0/40]	Time 2.216 (2.216)	Data 0.010 (0.010)	Loss 0.0026 (0.0026)	Accuracy 100.000 (100.000)
Epoch: [20][10/40]	Time 3.819 (3.464)	Data 0.028 (0.022)	Loss 0.0000 (0.0003)	Accuracy 100.000 (100.000)
Epoch: [20][20/40]	Time 1.594 (2.942)	Data 0.028 (0.027)	Loss 1.0612 (0.0540)	Accuracy 75.000 (98.810)
Epoch: [20][30/40]	Time 3.222 (2.755)	Data 0.035 (0.029)	Loss 0.0022 (0.0529)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 1.078 (1.078)	Loss 0.0207 (0.0207)	Accuracy 100.000 (100.000)
epoch: 21
Epoch: [21][0/40]	Time 2.162 (2.162)	Data 0.013 (0.013)	Loss 0.0026 (0.0026)	Accuracy 100.000 (100.000)
Epoch: [21][10/40]	Time 3.866 (2.755)	Data 0.025 (0.024)	Loss 0.0000 (0.3318)	Accuracy 100.000 (93.182)
Epoch: [21][20/40]	Time 2.565 (2.431)	Data 0.028 (0.029)	Loss 0.0590 (0.2422)	Accuracy 100.000 (95.238)
Epoch: [21][30/40]	Time 1.861 (2.392)	Data 0.009 (0.026)	Loss 0.0000 (0.2848)	Accuracy 100.000 (94.355)
Test: [0/10]	Time 0.491 (0.491)	Loss 0.0038 (0.0038)	Accuracy 100.000 (100.000)
epoch: 22
Epoch: [22][0/40]	Time 2.421 (2.421)	Data 0.012 (0.012)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [22][10/40]	Time 1.923 (2.605)	Data 0.027 (0.032)	Loss 0.0005 (0.2316)	Accuracy 100.000 (97.727)
Epoch: [22][20/40]	Time 1.810 (2.264)	Data 0.028 (0.028)	Loss 0.0001 (0.1328)	Accuracy 100.000 (97.619)
Epoch: [22][30/40]	Time 2.504 (2.760)	Data 0.047 (0.037)	Loss 0.0000 (0.1545)	Accuracy 100.000 (97.581)
Test: [0/10]	Time 0.493 (0.493)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 23
Epoch: [23][0/40]	Time 1.665 (1.665)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [23][10/40]	Time 1.812 (2.364)	Data 0.027 (0.032)	Loss 0.0000 (0.0046)	Accuracy 100.000 (100.000)
Epoch: [23][20/40]	Time 2.412 (2.208)	Data 0.013 (0.030)	Loss 0.0388 (0.0044)	Accuracy 100.000 (100.000)
Epoch: [23][30/40]	Time 2.623 (2.229)	Data 0.021 (0.030)	Loss 0.0000 (0.0030)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.579 (0.579)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 24
Epoch: [24][0/40]	Time 5.362 (5.362)	Data 0.011 (0.011)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [24][10/40]	Time 2.025 (3.041)	Data 0.035 (0.029)	Loss 0.0000 (0.0035)	Accuracy 100.000 (100.000)
Epoch: [24][20/40]	Time 1.997 (2.678)	Data 0.029 (0.029)	Loss 2.7189 (0.1702)	Accuracy 75.000 (97.619)
Epoch: [24][30/40]	Time 1.783 (2.653)	Data 0.027 (0.029)	Loss 0.0000 (0.2583)	Accuracy 100.000 (96.774)
Test: [0/10]	Time 0.830 (0.830)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 25
Epoch: [25][0/40]	Time 2.538 (2.538)	Data 0.011 (0.011)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [25][10/40]	Time 3.064 (3.888)	Data 0.054 (0.035)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [25][20/40]	Time 3.774 (3.586)	Data 0.016 (0.036)	Loss 0.0000 (0.0749)	Accuracy 100.000 (98.810)
Epoch: [25][30/40]	Time 4.259 (3.888)	Data 0.038 (0.041)	Loss 0.5111 (0.1224)	Accuracy 75.000 (97.581)
Test: [0/10]	Time 0.604 (0.604)	Loss 0.3490 (0.3490)	Accuracy 75.000 (75.000)
epoch: 26
Epoch: [26][0/40]	Time 1.687 (1.687)	Data 0.009 (0.009)	Loss 0.0011 (0.0011)	Accuracy 100.000 (100.000)
Epoch: [26][10/40]	Time 1.534 (1.552)	Data 0.028 (0.027)	Loss 0.0000 (0.1444)	Accuracy 100.000 (97.727)
Epoch: [26][20/40]	Time 1.521 (1.570)	Data 0.028 (0.027)	Loss 0.0000 (0.3859)	Accuracy 100.000 (96.429)
Epoch: [26][30/40]	Time 1.506 (1.574)	Data 0.013 (0.027)	Loss 0.0000 (0.2624)	Accuracy 100.000 (97.581)
Test: [0/10]	Time 0.481 (0.481)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 27
Epoch: [27][0/40]	Time 1.618 (1.618)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [27][10/40]	Time 1.629 (1.546)	Data 0.024 (0.024)	Loss 0.0025 (0.0788)	Accuracy 100.000 (97.727)
Epoch: [27][20/40]	Time 1.753 (1.704)	Data 0.030 (0.024)	Loss 0.0001 (0.2241)	Accuracy 100.000 (97.619)
Epoch: [27][30/40]	Time 1.593 (1.692)	Data 0.028 (0.025)	Loss 0.0000 (0.1876)	Accuracy 100.000 (97.581)
Test: [0/10]	Time 0.486 (0.486)	Loss 0.2764 (0.2764)	Accuracy 75.000 (75.000)
epoch: 28
Epoch: [28][0/40]	Time 1.792 (1.792)	Data 0.009 (0.009)	Loss 0.0001 (0.0001)	Accuracy 100.000 (100.000)
Epoch: [28][10/40]	Time 1.853 (1.815)	Data 0.013 (0.023)	Loss 0.0000 (0.1651)	Accuracy 100.000 (97.727)
Epoch: [28][20/40]	Time 1.551 (2.115)	Data 0.028 (0.023)	Loss 0.0074 (0.0872)	Accuracy 100.000 (98.810)
Epoch: [28][30/40]	Time 2.039 (2.279)	Data 0.030 (0.025)	Loss 0.0000 (0.0591)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 1.238 (1.238)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 29
Epoch: [29][0/40]	Time 2.182 (2.182)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [29][10/40]	Time 2.075 (2.289)	Data 0.038 (0.029)	Loss 0.0006 (0.0169)	Accuracy 100.000 (97.727)
Epoch: [29][20/40]	Time 2.584 (2.290)	Data 0.041 (0.034)	Loss 0.0530 (0.1165)	Accuracy 100.000 (97.619)
Epoch: [29][30/40]	Time 1.941 (2.267)	Data 0.031 (0.031)	Loss 0.0000 (0.0789)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.493 (0.493)	Loss 0.0014 (0.0014)	Accuracy 100.000 (100.000)
epoch: 30
Epoch: [30][0/40]	Time 1.774 (1.774)	Data 0.012 (0.012)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [30][10/40]	Time 1.716 (1.819)	Data 0.024 (0.021)	Loss 0.0003 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [30][20/40]	Time 1.862 (1.771)	Data 0.014 (0.022)	Loss 0.0000 (0.0228)	Accuracy 100.000 (98.810)
Epoch: [30][30/40]	Time 2.459 (1.817)	Data 0.035 (0.023)	Loss 0.0000 (0.0154)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.550 (0.550)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 31
Epoch: [31][0/40]	Time 3.450 (3.450)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [31][10/40]	Time 3.427 (2.354)	Data 0.009 (0.019)	Loss 0.0028 (0.1861)	Accuracy 100.000 (97.727)
Epoch: [31][20/40]	Time 1.813 (2.226)	Data 0.016 (0.018)	Loss 0.0001 (0.1011)	Accuracy 100.000 (98.810)
Epoch: [31][30/40]	Time 1.998 (2.142)	Data 0.009 (0.019)	Loss 0.0002 (0.1066)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.868 (0.868)	Loss 0.0716 (0.0716)	Accuracy 100.000 (100.000)
epoch: 32
Epoch: [32][0/40]	Time 3.475 (3.475)	Data 0.014 (0.014)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [32][10/40]	Time 3.926 (2.787)	Data 0.014 (0.028)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [32][20/40]	Time 2.153 (2.601)	Data 0.032 (0.026)	Loss 0.0000 (0.0001)	Accuracy 100.000 (100.000)
Epoch: [32][30/40]	Time 2.493 (2.623)	Data 0.017 (0.026)	Loss 0.0000 (0.0310)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.510 (0.510)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 33
Epoch: [33][0/40]	Time 2.000 (2.000)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [33][10/40]	Time 2.502 (2.838)	Data 0.033 (0.028)	Loss 0.0000 (0.0001)	Accuracy 100.000 (100.000)
Epoch: [33][20/40]	Time 1.891 (2.451)	Data 0.029 (0.028)	Loss 0.0000 (0.0001)	Accuracy 100.000 (100.000)
Epoch: [33][30/40]	Time 1.807 (2.235)	Data 0.013 (0.028)	Loss 0.0000 (0.0894)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.521 (0.521)	Loss 0.1285 (0.1285)	Accuracy 100.000 (100.000)
epoch: 34
Epoch: [34][0/40]	Time 1.841 (1.841)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [34][10/40]	Time 1.709 (2.398)	Data 0.029 (0.034)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [34][20/40]	Time 1.501 (2.037)	Data 0.028 (0.029)	Loss 0.0000 (0.0002)	Accuracy 100.000 (100.000)
Epoch: [34][30/40]	Time 1.697 (1.901)	Data 0.013 (0.027)	Loss 0.0000 (0.0002)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.490 (0.490)	Loss 0.1613 (0.1613)	Accuracy 100.000 (100.000)
epoch: 35
Epoch: [35][0/40]	Time 1.686 (1.686)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [35][10/40]	Time 1.520 (1.569)	Data 0.028 (0.024)	Loss 0.0000 (0.0001)	Accuracy 100.000 (100.000)
Epoch: [35][20/40]	Time 1.653 (1.590)	Data 0.024 (0.024)	Loss 0.0005 (0.0016)	Accuracy 100.000 (100.000)
Epoch: [35][30/40]	Time 1.677 (1.599)	Data 0.028 (0.024)	Loss 0.0001 (0.0011)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.474 (0.474)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 36
Epoch: [36][0/40]	Time 1.675 (1.675)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [36][10/40]	Time 1.670 (1.563)	Data 0.029 (0.026)	Loss 0.0001 (0.1176)	Accuracy 100.000 (97.727)
Epoch: [36][20/40]	Time 1.659 (1.608)	Data 0.013 (0.026)	Loss 0.0000 (0.1023)	Accuracy 100.000 (97.619)
Epoch: [36][30/40]	Time 1.687 (1.604)	Data 0.013 (0.025)	Loss 0.0000 (0.0694)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.484 (0.484)	Loss 0.2967 (0.2967)	Accuracy 75.000 (75.000)
epoch: 37
Epoch: [37][0/40]	Time 1.681 (1.681)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [37][10/40]	Time 1.497 (1.627)	Data 0.028 (0.019)	Loss 0.0000 (0.0019)	Accuracy 100.000 (100.000)
Epoch: [37][20/40]	Time 1.665 (1.606)	Data 0.029 (0.023)	Loss 0.0000 (0.0998)	Accuracy 100.000 (98.810)
Epoch: [37][30/40]	Time 1.502 (1.602)	Data 0.024 (0.024)	Loss 0.0000 (0.0679)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.475 (0.475)	Loss 0.0527 (0.0527)	Accuracy 100.000 (100.000)
epoch: 38
Epoch: [38][0/40]	Time 1.710 (1.710)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [38][10/40]	Time 1.511 (1.582)	Data 0.026 (0.024)	Loss 0.0026 (0.0004)	Accuracy 100.000 (100.000)
Epoch: [38][20/40]	Time 1.544 (1.576)	Data 0.033 (0.025)	Loss 0.0000 (0.3939)	Accuracy 100.000 (97.619)
Epoch: [38][30/40]	Time 1.512 (1.571)	Data 0.028 (0.026)	Loss 0.0002 (0.3874)	Accuracy 100.000 (96.774)
Test: [0/10]	Time 0.482 (0.482)	Loss 0.3770 (0.3770)	Accuracy 75.000 (75.000)
epoch: 39
Epoch: [39][0/40]	Time 1.482 (1.482)	Data 0.025 (0.025)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [39][10/40]	Time 1.652 (1.579)	Data 0.024 (0.024)	Loss 0.0000 (0.0535)	Accuracy 100.000 (97.727)
Epoch: [39][20/40]	Time 1.514 (1.646)	Data 0.028 (0.024)	Loss 0.0000 (0.0280)	Accuracy 100.000 (98.810)
Epoch: [39][30/40]	Time 1.646 (1.631)	Data 0.024 (0.024)	Loss 0.0000 (0.0194)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.475 (0.475)	Loss 0.0007 (0.0007)	Accuracy 100.000 (100.000)
epoch: 40
Epoch: [40][0/40]	Time 1.665 (1.665)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [40][10/40]	Time 1.527 (1.566)	Data 0.028 (0.026)	Loss 0.0000 (0.0201)	Accuracy 100.000 (97.727)
Epoch: [40][20/40]	Time 1.494 (1.566)	Data 0.030 (0.026)	Loss 0.0000 (0.0106)	Accuracy 100.000 (98.810)
Epoch: [40][30/40]	Time 1.666 (1.572)	Data 0.024 (0.026)	Loss 0.0158 (0.0408)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.482 (0.482)	Loss 0.0001 (0.0001)	Accuracy 100.000 (100.000)
epoch: 41
Epoch: [41][0/40]	Time 1.678 (1.678)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [41][10/40]	Time 1.563 (1.629)	Data 0.028 (0.021)	Loss 0.0000 (0.0004)	Accuracy 100.000 (100.000)
Epoch: [41][20/40]	Time 1.688 (1.628)	Data 0.013 (0.022)	Loss 0.0003 (0.1377)	Accuracy 100.000 (98.810)
Epoch: [41][30/40]	Time 1.540 (1.620)	Data 0.028 (0.022)	Loss 0.0000 (0.1494)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.483 (0.483)	Loss 1.6838 (1.6838)	Accuracy 75.000 (75.000)
epoch: 42
Epoch: [42][0/40]	Time 1.684 (1.684)	Data 0.009 (0.009)	Loss 0.0002 (0.0002)	Accuracy 100.000 (100.000)
Epoch: [42][10/40]	Time 1.681 (1.632)	Data 0.028 (0.025)	Loss 0.0000 (0.0260)	Accuracy 100.000 (97.727)
Epoch: [42][20/40]	Time 1.534 (1.587)	Data 0.028 (0.025)	Loss 0.0000 (0.0138)	Accuracy 100.000 (98.810)
Epoch: [42][30/40]	Time 1.675 (1.594)	Data 0.013 (0.024)	Loss 2.8041 (0.0998)	Accuracy 75.000 (98.387)
Test: [0/10]	Time 0.488 (0.488)	Loss 0.0045 (0.0045)	Accuracy 100.000 (100.000)
epoch: 43
Epoch: [43][0/40]	Time 1.677 (1.677)	Data 0.009 (0.009)	Loss 0.0007 (0.0007)	Accuracy 100.000 (100.000)
Epoch: [43][10/40]	Time 1.518 (1.774)	Data 0.028 (0.024)	Loss 0.0000 (0.1093)	Accuracy 100.000 (97.727)
Epoch: [43][20/40]	Time 1.670 (1.685)	Data 0.029 (0.025)	Loss 0.0149 (0.0582)	Accuracy 100.000 (98.810)
Epoch: [43][30/40]	Time 1.526 (1.646)	Data 0.028 (0.025)	Loss 0.0154 (0.1765)	Accuracy 100.000 (96.774)
Test: [0/10]	Time 0.630 (0.630)	Loss 0.0333 (0.0333)	Accuracy 100.000 (100.000)
epoch: 44
Epoch: [44][0/40]	Time 2.463 (2.463)	Data 0.012 (0.012)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [44][10/40]	Time 1.658 (2.094)	Data 0.023 (0.025)	Loss 0.0004 (0.2658)	Accuracy 100.000 (97.727)
Epoch: [44][20/40]	Time 1.754 (2.028)	Data 0.029 (0.025)	Loss 1.2468 (0.2740)	Accuracy 50.000 (95.238)
Epoch: [44][30/40]	Time 2.920 (2.322)	Data 0.013 (0.028)	Loss 0.0000 (0.2079)	Accuracy 100.000 (95.968)
Test: [0/10]	Time 0.579 (0.579)	Loss 0.0108 (0.0108)	Accuracy 100.000 (100.000)
epoch: 45
Epoch: [45][0/40]	Time 2.931 (2.931)	Data 0.014 (0.014)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [45][10/40]	Time 1.679 (2.189)	Data 0.013 (0.027)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [45][20/40]	Time 1.767 (2.095)	Data 0.029 (0.026)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [45][30/40]	Time 1.950 (2.159)	Data 0.031 (0.029)	Loss 0.0000 (0.0001)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.491 (0.491)	Loss 0.0003 (0.0003)	Accuracy 100.000 (100.000)
epoch: 46
Epoch: [46][0/40]	Time 2.272 (2.272)	Data 0.011 (0.011)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [46][10/40]	Time 3.354 (2.214)	Data 0.030 (0.027)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [46][20/40]	Time 1.525 (2.317)	Data 0.028 (0.030)	Loss 0.0000 (0.0002)	Accuracy 100.000 (100.000)
Epoch: [46][30/40]	Time 5.602 (2.348)	Data 0.059 (0.031)	Loss 0.0000 (0.0006)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.493 (0.493)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 47
Epoch: [47][0/40]	Time 1.682 (1.682)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [47][10/40]	Time 1.606 (1.664)	Data 0.028 (0.019)	Loss 0.0000 (0.0003)	Accuracy 100.000 (100.000)
Epoch: [47][20/40]	Time 1.569 (1.736)	Data 0.029 (0.025)	Loss 0.0001 (0.0002)	Accuracy 100.000 (100.000)
Epoch: [47][30/40]	Time 1.546 (1.717)	Data 0.025 (0.024)	Loss 0.0000 (0.0001)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.822 (0.822)	Loss 0.0040 (0.0040)	Accuracy 100.000 (100.000)
epoch: 48
Epoch: [48][0/40]	Time 3.908 (3.908)	Data 0.032 (0.032)	Loss 0.0001 (0.0001)	Accuracy 100.000 (100.000)
Epoch: [48][10/40]	Time 1.585 (3.074)	Data 0.024 (0.029)	Loss 0.0000 (0.0066)	Accuracy 100.000 (100.000)
Epoch: [48][20/40]	Time 1.745 (2.426)	Data 0.028 (0.029)	Loss 0.0000 (0.0035)	Accuracy 100.000 (100.000)
Epoch: [48][30/40]	Time 1.751 (2.191)	Data 0.014 (0.029)	Loss 0.0000 (0.0104)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.490 (0.490)	Loss 1.9189 (1.9189)	Accuracy 50.000 (50.000)
epoch: 49
Epoch: [49][0/40]	Time 2.002 (2.002)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [49][10/40]	Time 2.396 (3.426)	Data 0.024 (0.035)	Loss 0.0000 (0.0002)	Accuracy 100.000 (100.000)
Epoch: [49][20/40]	Time 1.526 (2.566)	Data 0.028 (0.030)	Loss 0.0000 (0.0004)	Accuracy 100.000 (100.000)
Epoch: [49][30/40]	Time 1.559 (2.246)	Data 0.028 (0.029)	Loss 0.0000 (0.0486)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.495 (0.495)	Loss 1.1317 (1.1317)	Accuracy 50.000 (50.000)
Test: [0/10]	Time 0.494 (0.494)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
fold: 5
precision: 1.0
recall: 1.0
f_score: 1.0
ord_error: 0.0
####### FOLD: 2 #######
cut_df size is 160
cut_df size is 40
len(train_ds.y) 160
len(test_ds.y) 40
sum(test_ds.y) 63
train_loader
epoch: 0
Epoch: [0][0/40]	Time 1.781 (1.781)	Data 0.015 (0.015)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [0][10/40]	Time 1.714 (1.634)	Data 0.028 (0.027)	Loss 3.5988 (1.5867)	Accuracy 75.000 (88.636)
Epoch: [0][20/40]	Time 1.696 (1.640)	Data 0.028 (0.027)	Loss 2.9202 (1.5682)	Accuracy 50.000 (86.905)
Epoch: [0][30/40]	Time 1.707 (1.655)	Data 0.029 (0.028)	Loss 0.0000 (2.0869)	Accuracy 100.000 (86.290)
Test: [0/10]	Time 0.492 (0.492)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 1
Epoch: [1][0/40]	Time 1.698 (1.698)	Data 0.009 (0.009)	Loss 0.0152 (0.0152)	Accuracy 100.000 (100.000)
Epoch: [1][10/40]	Time 1.570 (1.609)	Data 0.025 (0.025)	Loss 0.0203 (0.0066)	Accuracy 100.000 (100.000)
Epoch: [1][20/40]	Time 1.620 (1.602)	Data 0.028 (0.027)	Loss 0.3834 (0.1781)	Accuracy 75.000 (97.619)
Epoch: [1][30/40]	Time 1.539 (1.608)	Data 0.028 (0.026)	Loss 0.0000 (0.5317)	Accuracy 100.000 (94.355)
Test: [0/10]	Time 0.495 (0.495)	Loss 6.3957 (6.3957)	Accuracy 75.000 (75.000)
epoch: 2
Epoch: [2][0/40]	Time 1.716 (1.716)	Data 0.009 (0.009)	Loss 0.2913 (0.2913)	Accuracy 75.000 (75.000)
Epoch: [2][10/40]	Time 1.541 (1.673)	Data 0.028 (0.027)	Loss 0.0000 (1.0915)	Accuracy 100.000 (90.909)
Epoch: [2][20/40]	Time 1.565 (1.664)	Data 0.032 (0.028)	Loss 0.0000 (0.6956)	Accuracy 100.000 (92.857)
Epoch: [2][30/40]	Time 2.128 (1.816)	Data 0.029 (0.029)	Loss 0.9589 (0.9229)	Accuracy 75.000 (92.742)
Test: [0/10]	Time 0.497 (0.497)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 3
Epoch: [3][0/40]	Time 1.735 (1.735)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [3][10/40]	Time 1.543 (1.758)	Data 0.028 (0.030)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [3][20/40]	Time 1.559 (1.744)	Data 0.029 (0.030)	Loss 0.0000 (0.0108)	Accuracy 100.000 (98.810)
Epoch: [3][30/40]	Time 1.727 (1.927)	Data 0.030 (0.030)	Loss 0.0000 (0.0257)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.568 (0.568)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 4
Epoch: [4][0/40]	Time 5.002 (5.002)	Data 0.013 (0.013)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [4][10/40]	Time 3.412 (3.454)	Data 0.026 (0.036)	Loss 0.0000 (0.5326)	Accuracy 100.000 (97.727)
Epoch: [4][20/40]	Time 2.042 (3.674)	Data 0.029 (0.044)	Loss 0.0060 (0.5724)	Accuracy 100.000 (97.619)
Epoch: [4][30/40]	Time 3.420 (3.577)	Data 0.033 (0.044)	Loss 0.0079 (0.3881)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.483 (0.483)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 5
Epoch: [5][0/40]	Time 1.676 (1.676)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [5][10/40]	Time 1.574 (1.593)	Data 0.028 (0.024)	Loss 0.0000 (0.1100)	Accuracy 100.000 (97.727)
Epoch: [5][20/40]	Time 1.676 (1.612)	Data 0.028 (0.025)	Loss 0.0003 (0.1718)	Accuracy 100.000 (96.429)
Epoch: [5][30/40]	Time 1.925 (1.628)	Data 0.028 (0.026)	Loss 0.0000 (0.1865)	Accuracy 100.000 (96.774)
Test: [0/10]	Time 0.521 (0.521)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 6
Epoch: [6][0/40]	Time 1.978 (1.978)	Data 0.010 (0.010)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [6][10/40]	Time 1.846 (1.966)	Data 0.029 (0.027)	Loss 0.0000 (0.0306)	Accuracy 100.000 (97.727)
Epoch: [6][20/40]	Time 1.662 (2.007)	Data 0.029 (0.029)	Loss 0.0000 (0.0161)	Accuracy 100.000 (98.810)
Epoch: [6][30/40]	Time 1.820 (2.080)	Data 0.028 (0.030)	Loss 0.0000 (0.0253)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.547 (0.547)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 7
Epoch: [7][0/40]	Time 1.810 (1.810)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [7][10/40]	Time 3.120 (1.978)	Data 0.029 (0.023)	Loss 0.0057 (0.1566)	Accuracy 100.000 (97.727)
Epoch: [7][20/40]	Time 2.143 (1.926)	Data 0.028 (0.027)	Loss 0.0000 (0.2194)	Accuracy 100.000 (97.619)
Epoch: [7][30/40]	Time 2.045 (2.105)	Data 0.031 (0.028)	Loss 0.0000 (0.1618)	Accuracy 100.000 (97.581)
Test: [0/10]	Time 0.613 (0.613)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 8
Epoch: [8][0/40]	Time 10.552 (10.552)	Data 0.018 (0.018)	Loss 0.0172 (0.0172)	Accuracy 100.000 (100.000)
Epoch: [8][10/40]	Time 3.313 (5.286)	Data 0.048 (0.050)	Loss 0.0000 (0.0335)	Accuracy 100.000 (97.727)
Epoch: [8][20/40]	Time 4.070 (3.993)	Data 0.036 (0.042)	Loss 0.0068 (0.0179)	Accuracy 100.000 (98.810)
Epoch: [8][30/40]	Time 2.216 (3.524)	Data 0.035 (0.040)	Loss 0.0000 (0.3446)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.651 (0.651)	Loss 0.0002 (0.0002)	Accuracy 100.000 (100.000)
epoch: 9
Epoch: [9][0/40]	Time 3.327 (3.327)	Data 0.057 (0.057)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [9][10/40]	Time 4.222 (3.191)	Data 0.035 (0.030)	Loss 0.0000 (0.0119)	Accuracy 100.000 (100.000)
Epoch: [9][20/40]	Time 3.302 (3.906)	Data 0.039 (0.049)	Loss 0.0000 (0.0063)	Accuracy 100.000 (100.000)
Epoch: [9][30/40]	Time 1.815 (3.991)	Data 0.028 (0.050)	Loss 0.0000 (0.0043)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.557 (0.557)	Loss 0.2204 (0.2204)	Accuracy 75.000 (75.000)
epoch: 10
Epoch: [10][0/40]	Time 4.594 (4.594)	Data 0.011 (0.011)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [10][10/40]	Time 2.100 (3.290)	Data 0.012 (0.022)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [10][20/40]	Time 2.307 (2.843)	Data 0.010 (0.020)	Loss 0.0000 (0.8706)	Accuracy 100.000 (98.810)
Epoch: [10][30/40]	Time 2.545 (2.883)	Data 0.013 (0.020)	Loss 0.0000 (0.6407)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.578 (0.578)	Loss 0.0001 (0.0001)	Accuracy 100.000 (100.000)
epoch: 11
Epoch: [11][0/40]	Time 1.752 (1.752)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [11][10/40]	Time 1.881 (2.329)	Data 0.026 (0.021)	Loss 0.0020 (0.2404)	Accuracy 100.000 (97.727)
Epoch: [11][20/40]	Time 2.247 (2.609)	Data 0.036 (0.027)	Loss 0.0000 (0.1548)	Accuracy 100.000 (97.619)
Epoch: [11][30/40]	Time 2.170 (2.482)	Data 0.027 (0.029)	Loss 0.0052 (0.2388)	Accuracy 100.000 (97.581)
Test: [0/10]	Time 0.514 (0.514)	Loss 0.0061 (0.0061)	Accuracy 100.000 (100.000)
epoch: 12
Epoch: [12][0/40]	Time 1.776 (1.776)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [12][10/40]	Time 3.964 (2.184)	Data 0.108 (0.033)	Loss 0.0000 (0.1741)	Accuracy 100.000 (97.727)
Epoch: [12][20/40]	Time 3.760 (2.454)	Data 0.033 (0.033)	Loss 0.0000 (0.0928)	Accuracy 100.000 (98.810)
Epoch: [12][30/40]	Time 3.287 (2.773)	Data 0.029 (0.036)	Loss 0.0000 (0.0631)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.549 (0.549)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 13
Epoch: [13][0/40]	Time 2.132 (2.132)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [13][10/40]	Time 1.755 (2.059)	Data 0.033 (0.027)	Loss 0.7295 (0.0665)	Accuracy 75.000 (97.727)
Epoch: [13][20/40]	Time 2.735 (2.215)	Data 0.036 (0.029)	Loss 0.0000 (0.0355)	Accuracy 100.000 (98.810)
Epoch: [13][30/40]	Time 3.252 (2.479)	Data 0.037 (0.031)	Loss 0.0000 (0.0240)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.482 (0.482)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 14
Epoch: [14][0/40]	Time 1.683 (1.683)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [14][10/40]	Time 1.534 (1.566)	Data 0.028 (0.026)	Loss 0.0000 (0.0278)	Accuracy 100.000 (97.727)
Epoch: [14][20/40]	Time 1.671 (1.586)	Data 0.028 (0.026)	Loss 0.0002 (0.0146)	Accuracy 100.000 (98.810)
Epoch: [14][30/40]	Time 1.683 (1.617)	Data 0.027 (0.026)	Loss 0.0000 (0.0099)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.487 (0.487)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 15
Epoch: [15][0/40]	Time 1.683 (1.683)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [15][10/40]	Time 1.719 (1.579)	Data 0.028 (0.026)	Loss 0.0000 (0.0031)	Accuracy 100.000 (100.000)
Epoch: [15][20/40]	Time 1.671 (1.590)	Data 0.028 (0.027)	Loss 0.0000 (0.0016)	Accuracy 100.000 (100.000)
Epoch: [15][30/40]	Time 1.507 (1.593)	Data 0.031 (0.027)	Loss 0.0014 (0.0097)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.483 (0.483)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 16
Epoch: [16][0/40]	Time 2.254 (2.254)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [16][10/40]	Time 1.511 (1.635)	Data 0.028 (0.026)	Loss 0.0516 (0.2659)	Accuracy 100.000 (95.455)
Epoch: [16][20/40]	Time 1.676 (1.624)	Data 0.028 (0.027)	Loss 0.0000 (0.1394)	Accuracy 100.000 (97.619)
Epoch: [16][30/40]	Time 1.527 (1.609)	Data 0.028 (0.028)	Loss 0.0000 (0.1009)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.483 (0.483)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 17
Epoch: [17][0/40]	Time 1.685 (1.685)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [17][10/40]	Time 1.687 (1.725)	Data 0.013 (0.020)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [17][20/40]	Time 1.687 (1.733)	Data 0.028 (0.022)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [17][30/40]	Time 1.699 (1.693)	Data 0.028 (0.024)	Loss 0.0000 (0.0037)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.482 (0.482)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 18
Epoch: [18][0/40]	Time 1.703 (1.703)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [18][10/40]	Time 1.650 (1.623)	Data 0.024 (0.021)	Loss 0.0001 (0.0001)	Accuracy 100.000 (100.000)
Epoch: [18][20/40]	Time 1.537 (1.600)	Data 0.028 (0.024)	Loss 0.0000 (0.0135)	Accuracy 100.000 (98.810)
Epoch: [18][30/40]	Time 2.988 (1.688)	Data 0.028 (0.025)	Loss 0.0000 (0.0123)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.497 (0.497)	Loss 0.0005 (0.0005)	Accuracy 100.000 (100.000)
epoch: 19
Epoch: [19][0/40]	Time 1.514 (1.514)	Data 0.026 (0.026)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [19][10/40]	Time 1.670 (1.621)	Data 0.013 (0.024)	Loss 0.0002 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [19][20/40]	Time 1.715 (1.611)	Data 0.013 (0.024)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [19][30/40]	Time 1.841 (1.650)	Data 0.028 (0.024)	Loss 0.0000 (0.1079)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.527 (0.527)	Loss 0.0643 (0.0643)	Accuracy 100.000 (100.000)
epoch: 20
Epoch: [20][0/40]	Time 1.682 (1.682)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [20][10/40]	Time 1.502 (1.601)	Data 0.028 (0.023)	Loss 0.0000 (0.1122)	Accuracy 100.000 (97.727)
Epoch: [20][20/40]	Time 1.511 (1.592)	Data 0.028 (0.025)	Loss 0.0000 (0.0588)	Accuracy 100.000 (98.810)
Epoch: [20][30/40]	Time 1.486 (1.588)	Data 0.024 (0.025)	Loss 0.1706 (0.0453)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.479 (0.479)	Loss 0.0208 (0.0208)	Accuracy 100.000 (100.000)
epoch: 21
Epoch: [21][0/40]	Time 1.660 (1.660)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [21][10/40]	Time 1.508 (1.565)	Data 0.028 (0.026)	Loss 0.0000 (0.3665)	Accuracy 100.000 (97.727)
Epoch: [21][20/40]	Time 1.647 (1.581)	Data 0.028 (0.027)	Loss 0.0000 (0.1921)	Accuracy 100.000 (98.810)
Epoch: [21][30/40]	Time 1.658 (1.583)	Data 0.028 (0.028)	Loss 0.0000 (0.1301)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.479 (0.479)	Loss 0.0148 (0.0148)	Accuracy 100.000 (100.000)
epoch: 22
Epoch: [22][0/40]	Time 1.660 (1.660)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [22][10/40]	Time 1.734 (2.060)	Data 0.028 (0.028)	Loss 0.0000 (0.0180)	Accuracy 100.000 (97.727)
Epoch: [22][20/40]	Time 4.748 (2.628)	Data 0.024 (0.032)	Loss 0.0000 (0.0367)	Accuracy 100.000 (97.619)
Epoch: [22][30/40]	Time 1.807 (2.504)	Data 0.030 (0.032)	Loss 0.0000 (0.0469)	Accuracy 100.000 (97.581)
Test: [0/10]	Time 0.636 (0.636)	Loss 0.0005 (0.0005)	Accuracy 100.000 (100.000)
epoch: 23
Epoch: [23][0/40]	Time 5.449 (5.449)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [23][10/40]	Time 1.535 (3.577)	Data 0.027 (0.039)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [23][20/40]	Time 1.595 (3.039)	Data 0.028 (0.035)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [23][30/40]	Time 3.018 (3.157)	Data 0.031 (0.035)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.839 (0.839)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 24
Epoch: [24][0/40]	Time 4.494 (4.494)	Data 0.012 (0.012)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [24][10/40]	Time 5.111 (3.453)	Data 0.048 (0.040)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [24][20/40]	Time 2.599 (3.342)	Data 0.039 (0.041)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [24][30/40]	Time 1.737 (3.073)	Data 0.024 (0.038)	Loss 0.0000 (0.0001)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.483 (0.483)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 25
Epoch: [25][0/40]	Time 1.682 (1.682)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [25][10/40]	Time 1.523 (1.583)	Data 0.028 (0.026)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [25][20/40]	Time 2.127 (1.812)	Data 0.035 (0.028)	Loss 0.0481 (0.0023)	Accuracy 100.000 (100.000)
Epoch: [25][30/40]	Time 4.088 (2.009)	Data 0.062 (0.029)	Loss 0.0000 (0.0016)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.493 (0.493)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 26
Epoch: [26][0/40]	Time 2.174 (2.174)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [26][10/40]	Time 1.531 (1.695)	Data 0.028 (0.025)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [26][20/40]	Time 2.024 (1.712)	Data 0.029 (0.027)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [26][30/40]	Time 1.557 (1.685)	Data 0.028 (0.028)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.486 (0.486)	Loss 0.3442 (0.3442)	Accuracy 75.000 (75.000)
epoch: 27
Epoch: [27][0/40]	Time 1.708 (1.708)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [27][10/40]	Time 3.849 (4.218)	Data 0.086 (0.053)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [27][20/40]	Time 2.311 (3.348)	Data 0.028 (0.044)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [27][30/40]	Time 1.575 (2.842)	Data 0.028 (0.040)	Loss 0.0001 (0.0938)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.487 (0.487)	Loss 0.0012 (0.0012)	Accuracy 100.000 (100.000)
epoch: 28
Epoch: [28][0/40]	Time 1.843 (1.843)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [28][10/40]	Time 1.707 (1.879)	Data 0.028 (0.026)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [28][20/40]	Time 1.565 (1.870)	Data 0.029 (0.028)	Loss 0.0011 (0.0002)	Accuracy 100.000 (100.000)
Epoch: [28][30/40]	Time 1.730 (1.805)	Data 0.030 (0.028)	Loss 0.0000 (0.0113)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.487 (0.487)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 29
Epoch: [29][0/40]	Time 1.699 (1.699)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [29][10/40]	Time 1.765 (2.153)	Data 0.032 (0.032)	Loss 0.0000 (0.2697)	Accuracy 100.000 (97.727)
Epoch: [29][20/40]	Time 1.843 (1.942)	Data 0.030 (0.031)	Loss 0.0000 (0.1412)	Accuracy 100.000 (98.810)
Epoch: [29][30/40]	Time 2.658 (2.007)	Data 0.029 (0.031)	Loss 0.0000 (0.0957)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.684 (0.684)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 30
Epoch: [30][0/40]	Time 2.108 (2.108)	Data 0.011 (0.011)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [30][10/40]	Time 1.684 (1.750)	Data 0.029 (0.027)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [30][20/40]	Time 2.202 (2.655)	Data 0.035 (0.031)	Loss 0.0000 (0.1925)	Accuracy 100.000 (98.810)
Epoch: [30][30/40]	Time 2.815 (2.908)	Data 0.076 (0.035)	Loss 0.0000 (0.1304)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.521 (0.521)	Loss 2.6512 (2.6512)	Accuracy 75.000 (75.000)
epoch: 31
Epoch: [31][0/40]	Time 1.904 (1.904)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [31][10/40]	Time 1.715 (1.848)	Data 0.028 (0.027)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [31][20/40]	Time 2.579 (1.933)	Data 0.028 (0.027)	Loss 0.0000 (0.1521)	Accuracy 100.000 (97.619)
Epoch: [31][30/40]	Time 1.811 (2.357)	Data 0.027 (0.031)	Loss 0.0000 (0.1030)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.642 (0.642)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 32
Epoch: [32][0/40]	Time 1.845 (1.845)	Data 0.010 (0.010)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [32][10/40]	Time 3.642 (1.961)	Data 0.042 (0.028)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [32][20/40]	Time 1.830 (2.083)	Data 0.028 (0.029)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [32][30/40]	Time 1.583 (2.039)	Data 0.034 (0.029)	Loss 0.0000 (0.0002)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.687 (0.687)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 33
Epoch: [33][0/40]	Time 1.965 (1.965)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [33][10/40]	Time 1.561 (1.756)	Data 0.028 (0.028)	Loss 0.0000 (0.2519)	Accuracy 100.000 (97.727)
Epoch: [33][20/40]	Time 4.550 (1.953)	Data 0.134 (0.033)	Loss 0.0000 (0.1319)	Accuracy 100.000 (98.810)
Epoch: [33][30/40]	Time 2.304 (2.213)	Data 0.028 (0.036)	Loss 0.0000 (0.1519)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.586 (0.586)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 34
Epoch: [34][0/40]	Time 2.074 (2.074)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [34][10/40]	Time 1.660 (2.251)	Data 0.028 (0.031)	Loss 0.0000 (0.0532)	Accuracy 100.000 (97.727)
Epoch: [34][20/40]	Time 1.558 (2.042)	Data 0.029 (0.030)	Loss 0.0000 (0.0279)	Accuracy 100.000 (98.810)
Epoch: [34][30/40]	Time 1.530 (1.907)	Data 0.028 (0.030)	Loss 0.0000 (0.0189)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.520 (0.520)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 35
Epoch: [35][0/40]	Time 2.088 (2.088)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [35][10/40]	Time 1.865 (2.311)	Data 0.045 (0.034)	Loss 0.0000 (0.0002)	Accuracy 100.000 (100.000)
Epoch: [35][20/40]	Time 1.591 (2.026)	Data 0.033 (0.032)	Loss 0.0040 (0.0003)	Accuracy 100.000 (100.000)
Epoch: [35][30/40]	Time 1.802 (1.919)	Data 0.028 (0.031)	Loss 0.0000 (0.0002)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.526 (0.526)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 36
Epoch: [36][0/40]	Time 1.884 (1.884)	Data 0.010 (0.010)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [36][10/40]	Time 2.522 (2.529)	Data 0.060 (0.033)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [36][20/40]	Time 1.571 (2.103)	Data 0.028 (0.030)	Loss 0.0000 (0.0005)	Accuracy 100.000 (100.000)
Epoch: [36][30/40]	Time 1.550 (1.947)	Data 0.028 (0.029)	Loss 0.0000 (0.0003)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.485 (0.485)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 37
Epoch: [37][0/40]	Time 1.699 (1.699)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [37][10/40]	Time 1.724 (1.645)	Data 0.029 (0.026)	Loss 0.0001 (0.0003)	Accuracy 100.000 (100.000)
Epoch: [37][20/40]	Time 5.794 (2.092)	Data 0.054 (0.029)	Loss 0.0000 (0.0002)	Accuracy 100.000 (100.000)
Epoch: [37][30/40]	Time 1.568 (1.962)	Data 0.032 (0.029)	Loss 0.0000 (0.0001)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.488 (0.488)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 38
Epoch: [38][0/40]	Time 1.827 (1.827)	Data 0.012 (0.012)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [38][10/40]	Time 1.613 (1.891)	Data 0.027 (0.028)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [38][20/40]	Time 1.806 (1.866)	Data 0.029 (0.029)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [38][30/40]	Time 1.856 (1.891)	Data 0.029 (0.030)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.487 (0.487)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 39
Epoch: [39][0/40]	Time 1.712 (1.712)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [39][10/40]	Time 1.722 (1.748)	Data 0.028 (0.027)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [39][20/40]	Time 1.707 (1.862)	Data 0.030 (0.028)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [39][30/40]	Time 1.927 (1.855)	Data 0.028 (0.028)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.496 (0.496)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 40
Epoch: [40][0/40]	Time 2.380 (2.380)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [40][10/40]	Time 1.526 (1.813)	Data 0.028 (0.024)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [40][20/40]	Time 2.177 (1.811)	Data 0.028 (0.027)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [40][30/40]	Time 1.712 (1.810)	Data 0.030 (0.027)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.523 (0.523)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 41
Epoch: [41][0/40]	Time 1.968 (1.968)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [41][10/40]	Time 1.562 (2.056)	Data 0.028 (0.028)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [41][20/40]	Time 2.395 (2.067)	Data 0.027 (0.030)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [41][30/40]	Time 2.072 (2.216)	Data 0.033 (0.030)	Loss 0.0000 (0.0001)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.491 (0.491)	Loss 0.0099 (0.0099)	Accuracy 100.000 (100.000)
epoch: 42
Epoch: [42][0/40]	Time 1.815 (1.815)	Data 0.010 (0.010)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [42][10/40]	Time 2.801 (2.029)	Data 0.028 (0.027)	Loss 0.0000 (0.0473)	Accuracy 100.000 (97.727)
Epoch: [42][20/40]	Time 1.731 (1.856)	Data 0.025 (0.027)	Loss 0.0000 (0.0248)	Accuracy 100.000 (98.810)
Epoch: [42][30/40]	Time 2.792 (2.104)	Data 0.041 (0.026)	Loss 0.0000 (0.0168)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.512 (0.512)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 43
Epoch: [43][0/40]	Time 5.049 (5.049)	Data 0.011 (0.011)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [43][10/40]	Time 3.596 (2.712)	Data 0.038 (0.030)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [43][20/40]	Time 4.406 (3.059)	Data 0.046 (0.036)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [43][30/40]	Time 3.745 (3.236)	Data 0.039 (0.037)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.533 (0.533)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 44
Epoch: [44][0/40]	Time 2.071 (2.071)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [44][10/40]	Time 4.271 (2.730)	Data 0.035 (0.034)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [44][20/40]	Time 2.153 (2.524)	Data 0.034 (0.034)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [44][30/40]	Time 1.971 (2.284)	Data 0.031 (0.032)	Loss 0.0000 (0.0057)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.494 (0.494)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 45
Epoch: [45][0/40]	Time 1.732 (1.732)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [45][10/40]	Time 1.602 (1.775)	Data 0.029 (0.027)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [45][20/40]	Time 1.572 (1.735)	Data 0.030 (0.028)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [45][30/40]	Time 1.850 (1.738)	Data 0.029 (0.028)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.511 (0.511)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 46
Epoch: [46][0/40]	Time 1.794 (1.794)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [46][10/40]	Time 1.627 (1.714)	Data 0.029 (0.025)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [46][20/40]	Time 1.987 (1.766)	Data 0.036 (0.028)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [46][30/40]	Time 1.606 (1.775)	Data 0.028 (0.028)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.500 (0.500)	Loss 0.0004 (0.0004)	Accuracy 100.000 (100.000)
epoch: 47
Epoch: [47][0/40]	Time 1.746 (1.746)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [47][10/40]	Time 1.962 (1.694)	Data 0.028 (0.026)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [47][20/40]	Time 1.585 (1.719)	Data 0.028 (0.027)	Loss 0.0000 (0.0371)	Accuracy 100.000 (98.810)
Epoch: [47][30/40]	Time 1.705 (1.703)	Data 0.028 (0.027)	Loss 0.0000 (0.0252)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.491 (0.491)	Loss 0.9345 (0.9345)	Accuracy 75.000 (75.000)
epoch: 48
Epoch: [48][0/40]	Time 1.725 (1.725)	Data 0.009 (0.009)	Loss 0.0001 (0.0001)	Accuracy 100.000 (100.000)
Epoch: [48][10/40]	Time 1.705 (1.594)	Data 0.028 (0.026)	Loss 0.0004 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [48][20/40]	Time 1.745 (1.739)	Data 0.034 (0.027)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [48][30/40]	Time 1.590 (1.752)	Data 0.028 (0.028)	Loss 0.0000 (0.0920)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.522 (0.522)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 49
Epoch: [49][0/40]	Time 2.444 (2.444)	Data 0.010 (0.010)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [49][10/40]	Time 1.900 (2.496)	Data 0.024 (0.028)	Loss 0.0000 (0.0020)	Accuracy 100.000 (100.000)
Epoch: [49][20/40]	Time 3.490 (2.619)	Data 0.041 (0.031)	Loss 0.0000 (0.0011)	Accuracy 100.000 (100.000)
Epoch: [49][30/40]	Time 3.724 (2.734)	Data 0.031 (0.032)	Loss 0.0000 (0.2070)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.581 (0.581)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.549 (0.549)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
fold: 5
precision: 1.0
recall: 1.0
f_score: 1.0
ord_error: 0.0
####### FOLD: 3 #######
cut_df size is 160
cut_df size is 40
len(train_ds.y) 160
len(test_ds.y) 40
sum(test_ds.y) 74
train_loader
epoch: 0
Epoch: [0][0/40]	Time 3.711 (3.711)	Data 0.048 (0.048)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [0][10/40]	Time 3.306 (3.360)	Data 0.079 (0.050)	Loss 0.0010 (0.2136)	Accuracy 100.000 (95.455)
Epoch: [0][20/40]	Time 6.086 (3.469)	Data 0.036 (0.040)	Loss 0.0000 (0.1470)	Accuracy 100.000 (96.429)
Epoch: [0][30/40]	Time 2.875 (3.186)	Data 0.035 (0.038)	Loss 0.0054 (0.1268)	Accuracy 100.000 (95.968)
Test: [0/10]	Time 0.504 (0.504)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 1
Epoch: [1][0/40]	Time 1.738 (1.738)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [1][10/40]	Time 1.966 (1.681)	Data 0.029 (0.025)	Loss 0.0000 (0.0001)	Accuracy 100.000 (100.000)
Epoch: [1][20/40]	Time 1.676 (1.720)	Data 0.027 (0.024)	Loss 0.3028 (0.0145)	Accuracy 75.000 (98.810)
Epoch: [1][30/40]	Time 1.712 (1.825)	Data 0.028 (0.025)	Loss 0.0000 (0.0381)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.511 (0.511)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 2
Epoch: [2][0/40]	Time 1.704 (1.704)	Data 0.024 (0.024)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [2][10/40]	Time 1.763 (1.769)	Data 0.033 (0.022)	Loss 0.0000 (0.7374)	Accuracy 100.000 (93.182)
Epoch: [2][20/40]	Time 1.578 (1.850)	Data 0.028 (0.025)	Loss 0.0206 (0.3873)	Accuracy 100.000 (96.429)
Epoch: [2][30/40]	Time 1.876 (1.938)	Data 0.030 (0.027)	Loss 0.0000 (0.3620)	Accuracy 100.000 (95.968)
Test: [0/10]	Time 0.535 (0.535)	Loss 0.0007 (0.0007)	Accuracy 100.000 (100.000)
epoch: 3
Epoch: [3][0/40]	Time 2.394 (2.394)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [3][10/40]	Time 1.577 (1.708)	Data 0.030 (0.024)	Loss 0.0000 (0.0008)	Accuracy 100.000 (100.000)
Epoch: [3][20/40]	Time 1.706 (1.706)	Data 0.028 (0.026)	Loss 0.0000 (0.3850)	Accuracy 100.000 (97.619)
Epoch: [3][30/40]	Time 1.839 (1.711)	Data 0.033 (0.026)	Loss 0.0000 (0.2771)	Accuracy 100.000 (97.581)
Test: [0/10]	Time 0.668 (0.668)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 4
Epoch: [4][0/40]	Time 1.565 (1.565)	Data 0.024 (0.024)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [4][10/40]	Time 1.912 (1.726)	Data 0.014 (0.025)	Loss 7.1576 (0.7105)	Accuracy 75.000 (95.455)
Epoch: [4][20/40]	Time 1.631 (1.733)	Data 0.028 (0.023)	Loss 0.0000 (0.3722)	Accuracy 100.000 (97.619)
Epoch: [4][30/40]	Time 1.576 (1.720)	Data 0.029 (0.024)	Loss 0.0000 (0.4377)	Accuracy 100.000 (97.581)
Test: [0/10]	Time 0.507 (0.507)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 5
Epoch: [5][0/40]	Time 3.540 (3.540)	Data 0.010 (0.010)	Loss 0.1964 (0.1964)	Accuracy 75.000 (75.000)
Epoch: [5][10/40]	Time 2.244 (1.874)	Data 0.030 (0.025)	Loss 0.0000 (0.0671)	Accuracy 100.000 (95.455)
Epoch: [5][20/40]	Time 1.744 (1.790)	Data 0.028 (0.025)	Loss 0.0000 (0.0823)	Accuracy 100.000 (96.429)
Epoch: [5][30/40]	Time 1.752 (1.754)	Data 0.036 (0.027)	Loss 0.0000 (0.1322)	Accuracy 100.000 (96.774)
Test: [0/10]	Time 0.528 (0.528)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 6
Epoch: [6][0/40]	Time 1.789 (1.789)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [6][10/40]	Time 2.568 (2.009)	Data 0.032 (0.025)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [6][20/40]	Time 1.753 (2.067)	Data 0.041 (0.025)	Loss 0.0000 (0.0001)	Accuracy 100.000 (100.000)
Epoch: [6][30/40]	Time 3.216 (2.080)	Data 0.029 (0.025)	Loss 0.0000 (0.1171)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.574 (0.574)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 7
Epoch: [7][0/40]	Time 2.016 (2.016)	Data 0.027 (0.027)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [7][10/40]	Time 1.706 (2.221)	Data 0.029 (0.028)	Loss 0.0007 (0.0086)	Accuracy 100.000 (100.000)
Epoch: [7][20/40]	Time 2.045 (2.157)	Data 0.028 (0.028)	Loss 0.0000 (0.0048)	Accuracy 100.000 (100.000)
Epoch: [7][30/40]	Time 1.773 (2.094)	Data 0.024 (0.029)	Loss 0.0000 (0.0180)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.514 (0.514)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 8
Epoch: [8][0/40]	Time 1.932 (1.932)	Data 0.010 (0.010)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [8][10/40]	Time 2.038 (2.306)	Data 0.042 (0.027)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [8][20/40]	Time 2.211 (2.281)	Data 0.054 (0.027)	Loss 0.0002 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [8][30/40]	Time 1.951 (2.328)	Data 0.024 (0.027)	Loss 0.0044 (0.0264)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.560 (0.560)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 9
Epoch: [9][0/40]	Time 1.785 (1.785)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [9][10/40]	Time 1.647 (1.930)	Data 0.029 (0.026)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [9][20/40]	Time 1.754 (1.955)	Data 0.032 (0.027)	Loss 0.0000 (0.0148)	Accuracy 100.000 (98.810)
Epoch: [9][30/40]	Time 1.737 (1.893)	Data 0.028 (0.028)	Loss 0.0000 (0.0101)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.517 (0.517)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 10
Epoch: [10][0/40]	Time 1.758 (1.758)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [10][10/40]	Time 1.559 (1.631)	Data 0.029 (0.026)	Loss 0.0000 (0.0003)	Accuracy 100.000 (100.000)
Epoch: [10][20/40]	Time 1.735 (1.649)	Data 0.024 (0.026)	Loss 0.0000 (0.0002)	Accuracy 100.000 (100.000)
Epoch: [10][30/40]	Time 1.556 (1.648)	Data 0.013 (0.025)	Loss 0.0000 (0.0011)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.519 (0.519)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 11
Epoch: [11][0/40]	Time 1.759 (1.759)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [11][10/40]	Time 1.551 (1.650)	Data 0.028 (0.023)	Loss 0.0000 (0.0003)	Accuracy 100.000 (100.000)
Epoch: [11][20/40]	Time 1.603 (1.657)	Data 0.028 (0.025)	Loss 0.0000 (0.0029)	Accuracy 100.000 (100.000)
Epoch: [11][30/40]	Time 1.556 (1.657)	Data 0.028 (0.026)	Loss 0.0000 (0.0019)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.499 (0.499)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 12
Epoch: [12][0/40]	Time 1.770 (1.770)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [12][10/40]	Time 1.698 (1.634)	Data 0.024 (0.024)	Loss 0.0000 (0.2394)	Accuracy 100.000 (97.727)
Epoch: [12][20/40]	Time 1.749 (1.633)	Data 0.029 (0.026)	Loss 1.9567 (0.5400)	Accuracy 50.000 (94.048)
Epoch: [12][30/40]	Time 1.724 (1.640)	Data 0.028 (0.026)	Loss 0.0000 (0.4548)	Accuracy 100.000 (95.161)
Test: [0/10]	Time 0.489 (0.489)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 13
Epoch: [13][0/40]	Time 2.255 (2.255)	Data 0.010 (0.010)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [13][10/40]	Time 1.578 (1.697)	Data 0.024 (0.025)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [13][20/40]	Time 1.738 (1.662)	Data 0.029 (0.026)	Loss 1.2058 (0.0865)	Accuracy 75.000 (97.619)
Epoch: [13][30/40]	Time 2.914 (1.753)	Data 0.068 (0.029)	Loss 0.0000 (0.0588)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.492 (0.492)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 14
Epoch: [14][0/40]	Time 2.002 (2.002)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [14][10/40]	Time 1.673 (2.149)	Data 0.028 (0.023)	Loss 0.0058 (0.1116)	Accuracy 100.000 (97.727)
Epoch: [14][20/40]	Time 1.962 (2.103)	Data 0.028 (0.026)	Loss 0.0000 (0.0585)	Accuracy 100.000 (98.810)
Epoch: [14][30/40]	Time 1.650 (2.042)	Data 0.029 (0.028)	Loss 0.0000 (0.0396)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.512 (0.512)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 15
Epoch: [15][0/40]	Time 2.632 (2.632)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [15][10/40]	Time 1.764 (2.081)	Data 0.029 (0.026)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [15][20/40]	Time 1.794 (1.950)	Data 0.010 (0.024)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [15][30/40]	Time 2.400 (1.934)	Data 0.028 (0.026)	Loss 0.0000 (0.1603)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.513 (0.513)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 16
Epoch: [16][0/40]	Time 1.809 (1.809)	Data 0.011 (0.011)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [16][10/40]	Time 2.803 (2.226)	Data 0.026 (0.024)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [16][20/40]	Time 1.724 (2.062)	Data 0.029 (0.024)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [16][30/40]	Time 1.997 (2.038)	Data 0.028 (0.023)	Loss 0.0000 (0.0001)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.503 (0.503)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 17
Epoch: [17][0/40]	Time 1.761 (1.761)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [17][10/40]	Time 1.624 (1.877)	Data 0.028 (0.024)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [17][20/40]	Time 1.574 (1.765)	Data 0.028 (0.026)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [17][30/40]	Time 1.854 (1.820)	Data 0.013 (0.026)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.536 (0.536)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 18
Epoch: [18][0/40]	Time 1.790 (1.790)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [18][10/40]	Time 3.287 (2.454)	Data 0.029 (0.021)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [18][20/40]	Time 1.607 (2.384)	Data 0.028 (0.019)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [18][30/40]	Time 1.579 (2.195)	Data 0.028 (0.023)	Loss 0.0000 (0.0314)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.989 (0.989)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 19
Epoch: [19][0/40]	Time 2.296 (2.296)	Data 0.009 (0.009)	Loss 0.0070 (0.0070)	Accuracy 100.000 (100.000)
Epoch: [19][10/40]	Time 1.629 (1.856)	Data 0.028 (0.028)	Loss 0.0000 (0.0006)	Accuracy 100.000 (100.000)
Epoch: [19][20/40]	Time 1.619 (1.829)	Data 0.029 (0.029)	Loss 0.0000 (0.0003)	Accuracy 100.000 (100.000)
Epoch: [19][30/40]	Time 2.209 (1.900)	Data 0.029 (0.029)	Loss 0.0000 (0.0002)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.535 (0.535)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 20
Epoch: [20][0/40]	Time 2.456 (2.456)	Data 0.010 (0.010)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [20][10/40]	Time 1.746 (2.084)	Data 0.023 (0.024)	Loss 0.0000 (0.0011)	Accuracy 100.000 (100.000)
Epoch: [20][20/40]	Time 2.289 (1.968)	Data 0.039 (0.027)	Loss 0.0000 (0.0072)	Accuracy 100.000 (100.000)
Epoch: [20][30/40]	Time 5.340 (2.325)	Data 0.033 (0.028)	Loss 0.0000 (0.0389)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.604 (0.604)	Loss 0.0263 (0.0263)	Accuracy 100.000 (100.000)
epoch: 21
Epoch: [21][0/40]	Time 1.733 (1.733)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [21][10/40]	Time 1.733 (1.885)	Data 0.028 (0.023)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [21][20/40]	Time 1.939 (1.901)	Data 0.024 (0.025)	Loss 1.7969 (0.1215)	Accuracy 75.000 (97.619)
Epoch: [21][30/40]	Time 2.568 (2.324)	Data 0.049 (0.026)	Loss 0.0000 (0.0823)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.495 (0.495)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 22
Epoch: [22][0/40]	Time 2.743 (2.743)	Data 0.010 (0.010)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [22][10/40]	Time 3.133 (2.366)	Data 0.009 (0.025)	Loss 0.0000 (0.0023)	Accuracy 100.000 (100.000)
Epoch: [22][20/40]	Time 2.679 (2.291)	Data 0.024 (0.027)	Loss 0.0000 (0.0012)	Accuracy 100.000 (100.000)
Epoch: [22][30/40]	Time 2.072 (2.246)	Data 0.031 (0.025)	Loss 0.0000 (0.0008)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.572 (0.572)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 23
Epoch: [23][0/40]	Time 4.672 (4.672)	Data 0.012 (0.012)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [23][10/40]	Time 2.744 (3.934)	Data 0.026 (0.026)	Loss 0.0000 (0.0030)	Accuracy 100.000 (100.000)
Epoch: [23][20/40]	Time 1.656 (3.203)	Data 0.024 (0.027)	Loss 0.0000 (0.0016)	Accuracy 100.000 (100.000)
Epoch: [23][30/40]	Time 1.666 (2.801)	Data 0.027 (0.028)	Loss 0.0000 (0.0011)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.543 (0.543)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 24
Epoch: [24][0/40]	Time 1.993 (1.993)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [24][10/40]	Time 2.762 (2.912)	Data 0.029 (0.022)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [24][20/40]	Time 2.241 (2.492)	Data 0.036 (0.031)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [24][30/40]	Time 2.202 (2.502)	Data 0.032 (0.033)	Loss 0.0000 (0.0002)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.557 (0.557)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 25
Epoch: [25][0/40]	Time 2.079 (2.079)	Data 0.010 (0.010)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [25][10/40]	Time 1.872 (2.182)	Data 0.026 (0.024)	Loss 5.0535 (0.5195)	Accuracy 75.000 (95.455)
Epoch: [25][20/40]	Time 2.109 (2.151)	Data 0.034 (0.024)	Loss 0.0000 (0.6489)	Accuracy 100.000 (95.238)
Epoch: [25][30/40]	Time 4.018 (2.473)	Data 0.029 (0.027)	Loss 0.0000 (0.9747)	Accuracy 100.000 (94.355)
Test: [0/10]	Time 0.506 (0.506)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 26
Epoch: [26][0/40]	Time 2.169 (2.169)	Data 0.010 (0.010)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [26][10/40]	Time 2.333 (1.888)	Data 0.030 (0.026)	Loss 0.0744 (0.1154)	Accuracy 100.000 (97.727)
Epoch: [26][20/40]	Time 2.821 (2.324)	Data 0.031 (0.027)	Loss 0.0003 (0.1161)	Accuracy 100.000 (97.619)
Epoch: [26][30/40]	Time 1.749 (2.523)	Data 0.027 (0.033)	Loss 0.0000 (0.0786)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.512 (0.512)	Loss 0.0015 (0.0015)	Accuracy 100.000 (100.000)
epoch: 27
Epoch: [27][0/40]	Time 1.824 (1.824)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [27][10/40]	Time 1.916 (1.792)	Data 0.029 (0.024)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [27][20/40]	Time 1.668 (1.822)	Data 0.028 (0.023)	Loss 0.0000 (0.1722)	Accuracy 100.000 (97.619)
Epoch: [27][30/40]	Time 1.732 (1.801)	Data 0.013 (0.023)	Loss 0.0000 (0.1304)	Accuracy 100.000 (97.581)
Test: [0/10]	Time 0.522 (0.522)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 28
Epoch: [28][0/40]	Time 1.864 (1.864)	Data 0.009 (0.009)	Loss 0.0826 (0.0826)	Accuracy 100.000 (100.000)
Epoch: [28][10/40]	Time 1.764 (1.768)	Data 0.031 (0.026)	Loss 0.0000 (0.8911)	Accuracy 100.000 (97.727)
Epoch: [28][20/40]	Time 1.784 (1.866)	Data 0.032 (0.027)	Loss 0.0000 (0.4668)	Accuracy 100.000 (98.810)
Epoch: [28][30/40]	Time 2.196 (1.956)	Data 0.009 (0.028)	Loss 0.0000 (0.3162)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.489 (0.489)	Loss 10.8848 (10.8848)	Accuracy 50.000 (50.000)
epoch: 29
Epoch: [29][0/40]	Time 2.000 (2.000)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [29][10/40]	Time 2.069 (1.824)	Data 0.013 (0.020)	Loss 0.0000 (0.7763)	Accuracy 100.000 (97.727)
Epoch: [29][20/40]	Time 1.541 (1.772)	Data 0.009 (0.021)	Loss 0.0000 (0.7734)	Accuracy 100.000 (95.238)
Epoch: [29][30/40]	Time 2.949 (1.847)	Data 0.024 (0.023)	Loss 0.0000 (0.5978)	Accuracy 100.000 (95.968)
Test: [0/10]	Time 0.499 (0.499)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 30
Epoch: [30][0/40]	Time 4.249 (4.249)	Data 0.011 (0.011)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [30][10/40]	Time 3.262 (3.795)	Data 0.019 (0.040)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [30][20/40]	Time 5.296 (3.897)	Data 0.037 (0.035)	Loss 0.0000 (0.0721)	Accuracy 100.000 (98.810)
Epoch: [30][30/40]	Time 7.171 (4.641)	Data 0.078 (0.042)	Loss 0.0000 (0.7680)	Accuracy 100.000 (97.581)
Test: [0/10]	Time 1.418 (1.418)	Loss 0.2084 (0.2084)	Accuracy 75.000 (75.000)
epoch: 31
Epoch: [31][0/40]	Time 6.703 (6.703)	Data 0.011 (0.011)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [31][10/40]	Time 3.510 (5.409)	Data 0.045 (0.041)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [31][20/40]	Time 4.534 (4.901)	Data 0.019 (0.043)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [31][30/40]	Time 1.751 (3.947)	Data 0.029 (0.040)	Loss 0.0047 (0.0002)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.491 (0.491)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 32
Epoch: [32][0/40]	Time 1.860 (1.860)	Data 0.010 (0.010)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [32][10/40]	Time 1.697 (1.750)	Data 0.026 (0.024)	Loss 0.0000 (0.0048)	Accuracy 100.000 (100.000)
Epoch: [32][20/40]	Time 2.235 (1.997)	Data 0.013 (0.027)	Loss 0.0000 (0.0025)	Accuracy 100.000 (100.000)
Epoch: [32][30/40]	Time 1.708 (2.180)	Data 0.031 (0.027)	Loss 0.0000 (0.0246)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 1.518 (1.518)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 33
Epoch: [33][0/40]	Time 2.002 (2.002)	Data 0.011 (0.011)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [33][10/40]	Time 1.673 (1.861)	Data 0.028 (0.026)	Loss 0.0000 (0.0002)	Accuracy 100.000 (100.000)
Epoch: [33][20/40]	Time 1.660 (1.739)	Data 0.013 (0.024)	Loss 0.0000 (0.6695)	Accuracy 100.000 (94.048)
Epoch: [33][30/40]	Time 1.512 (1.691)	Data 0.028 (0.025)	Loss 0.0006 (0.5831)	Accuracy 100.000 (94.355)
Test: [0/10]	Time 0.478 (0.478)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 34
Epoch: [34][0/40]	Time 1.666 (1.666)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [34][10/40]	Time 1.642 (1.599)	Data 0.013 (0.021)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [34][20/40]	Time 1.518 (1.647)	Data 0.028 (0.025)	Loss 0.0000 (0.0001)	Accuracy 100.000 (100.000)
Epoch: [34][30/40]	Time 1.510 (1.674)	Data 0.028 (0.024)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.480 (0.480)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 35
Epoch: [35][0/40]	Time 1.660 (1.660)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [35][10/40]	Time 1.619 (1.594)	Data 0.009 (0.023)	Loss 0.0000 (0.1053)	Accuracy 100.000 (97.727)
Epoch: [35][20/40]	Time 1.672 (1.578)	Data 0.013 (0.023)	Loss 0.0000 (0.0552)	Accuracy 100.000 (98.810)
Epoch: [35][30/40]	Time 1.500 (1.569)	Data 0.013 (0.023)	Loss 0.0000 (0.0374)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.477 (0.477)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 36
Epoch: [36][0/40]	Time 1.683 (1.683)	Data 0.009 (0.009)	Loss 0.0099 (0.0099)	Accuracy 100.000 (100.000)
Epoch: [36][10/40]	Time 1.675 (1.637)	Data 0.014 (0.018)	Loss 0.0582 (0.6100)	Accuracy 100.000 (95.455)
Epoch: [36][20/40]	Time 1.524 (1.613)	Data 0.028 (0.022)	Loss 0.0000 (0.3198)	Accuracy 100.000 (97.619)
Epoch: [36][30/40]	Time 1.488 (1.601)	Data 0.028 (0.023)	Loss 0.0000 (0.2171)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.492 (0.492)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 37
Epoch: [37][0/40]	Time 1.657 (1.657)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [37][10/40]	Time 1.683 (1.556)	Data 0.028 (0.027)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [37][20/40]	Time 1.510 (1.548)	Data 0.028 (0.027)	Loss 0.0000 (0.0018)	Accuracy 100.000 (100.000)
Epoch: [37][30/40]	Time 1.487 (1.563)	Data 0.028 (0.027)	Loss 0.0000 (0.0012)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.476 (0.476)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 38
Epoch: [38][0/40]	Time 1.659 (1.659)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [38][10/40]	Time 1.534 (1.556)	Data 0.028 (0.026)	Loss 0.0000 (0.4243)	Accuracy 100.000 (97.727)
Epoch: [38][20/40]	Time 1.657 (1.582)	Data 0.028 (0.024)	Loss 0.0000 (0.2222)	Accuracy 100.000 (98.810)
Epoch: [38][30/40]	Time 1.678 (1.582)	Data 0.013 (0.023)	Loss 0.0000 (0.1505)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.481 (0.481)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 39
Epoch: [39][0/40]	Time 1.675 (1.675)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [39][10/40]	Time 1.524 (1.556)	Data 0.028 (0.027)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [39][20/40]	Time 1.526 (1.568)	Data 0.028 (0.025)	Loss 0.0000 (0.0343)	Accuracy 100.000 (98.810)
Epoch: [39][30/40]	Time 1.644 (1.562)	Data 0.028 (0.026)	Loss 0.0000 (0.0233)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.481 (0.481)	Loss 4.8010 (4.8010)	Accuracy 50.000 (50.000)
epoch: 40
Epoch: [40][0/40]	Time 1.662 (1.662)	Data 0.009 (0.009)	Loss 0.2835 (0.2835)	Accuracy 75.000 (75.000)
Epoch: [40][10/40]	Time 1.648 (1.533)	Data 0.028 (0.026)	Loss 0.0000 (0.1293)	Accuracy 100.000 (95.455)
Epoch: [40][20/40]	Time 1.810 (1.659)	Data 0.036 (0.026)	Loss 0.0000 (0.0677)	Accuracy 100.000 (97.619)
Epoch: [40][30/40]	Time 2.799 (1.985)	Data 0.029 (0.027)	Loss 0.0000 (0.0459)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.496 (0.496)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 41
Epoch: [41][0/40]	Time 2.292 (2.292)	Data 0.011 (0.011)	Loss 0.0002 (0.0002)	Accuracy 100.000 (100.000)
Epoch: [41][10/40]	Time 1.606 (1.735)	Data 0.028 (0.025)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [41][20/40]	Time 1.822 (1.725)	Data 0.034 (0.027)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [41][30/40]	Time 1.624 (1.791)	Data 0.028 (0.026)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.484 (0.484)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 42
Epoch: [42][0/40]	Time 2.041 (2.041)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [42][10/40]	Time 2.342 (2.087)	Data 0.015 (0.028)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [42][20/40]	Time 1.797 (2.021)	Data 0.031 (0.028)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [42][30/40]	Time 1.596 (1.885)	Data 0.028 (0.029)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.489 (0.489)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 43
Epoch: [43][0/40]	Time 1.698 (1.698)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [43][10/40]	Time 2.708 (2.447)	Data 0.030 (0.033)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [43][20/40]	Time 2.402 (2.472)	Data 0.039 (0.034)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [43][30/40]	Time 1.677 (2.226)	Data 0.028 (0.033)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.523 (0.523)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 44
Epoch: [44][0/40]	Time 2.179 (2.179)	Data 0.030 (0.030)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [44][10/40]	Time 1.533 (1.675)	Data 0.028 (0.028)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [44][20/40]	Time 1.718 (1.646)	Data 0.013 (0.027)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [44][30/40]	Time 1.541 (1.637)	Data 0.028 (0.026)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.557 (0.557)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 45
Epoch: [45][0/40]	Time 1.819 (1.819)	Data 0.026 (0.026)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [45][10/40]	Time 1.706 (1.863)	Data 0.030 (0.023)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [45][20/40]	Time 1.716 (1.826)	Data 0.031 (0.025)	Loss 0.0016 (0.0001)	Accuracy 100.000 (100.000)
Epoch: [45][30/40]	Time 1.723 (1.778)	Data 0.029 (0.026)	Loss 0.0000 (0.0001)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.482 (0.482)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 46
Epoch: [46][0/40]	Time 1.727 (1.727)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [46][10/40]	Time 1.730 (1.714)	Data 0.028 (0.029)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [46][20/40]	Time 1.637 (1.720)	Data 0.029 (0.027)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [46][30/40]	Time 1.773 (1.725)	Data 0.028 (0.027)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.694 (0.694)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 47
Epoch: [47][0/40]	Time 3.080 (3.080)	Data 0.013 (0.013)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [47][10/40]	Time 1.582 (2.385)	Data 0.028 (0.033)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [47][20/40]	Time 1.935 (2.356)	Data 0.037 (0.032)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [47][30/40]	Time 1.800 (2.373)	Data 0.030 (0.031)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.643 (0.643)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 48
Epoch: [48][0/40]	Time 5.224 (5.224)	Data 0.017 (0.017)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [48][10/40]	Time 1.788 (2.189)	Data 0.029 (0.030)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [48][20/40]	Time 1.689 (1.929)	Data 0.013 (0.027)	Loss 0.0000 (0.0025)	Accuracy 100.000 (100.000)
Epoch: [48][30/40]	Time 1.537 (1.847)	Data 0.028 (0.025)	Loss 0.0000 (0.0017)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.516 (0.516)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 49
Epoch: [49][0/40]	Time 1.956 (1.956)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [49][10/40]	Time 1.589 (1.764)	Data 0.029 (0.030)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [49][20/40]	Time 1.642 (1.723)	Data 0.029 (0.029)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [49][30/40]	Time 1.584 (1.705)	Data 0.030 (0.029)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.483 (0.483)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.529 (0.529)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
fold: 5
precision: 1.0
recall: 1.0
f_score: 1.0
ord_error: 0.0
####### FOLD: 4 #######
cut_df size is 160
cut_df size is 40
len(train_ds.y) 160
len(test_ds.y) 40
sum(test_ds.y) 53
train_loader
epoch: 0
Epoch: [0][0/40]	Time 1.850 (1.850)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [0][10/40]	Time 1.577 (1.778)	Data 0.028 (0.024)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [0][20/40]	Time 1.559 (1.801)	Data 0.028 (0.027)	Loss 0.0086 (0.0004)	Accuracy 100.000 (100.000)
Epoch: [0][30/40]	Time 1.638 (1.791)	Data 0.015 (0.027)	Loss 0.0000 (0.0003)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.568 (0.568)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 1
Epoch: [1][0/40]	Time 1.881 (1.881)	Data 0.010 (0.010)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [1][10/40]	Time 1.705 (1.775)	Data 0.028 (0.021)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [1][20/40]	Time 2.899 (2.160)	Data 0.046 (0.022)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [1][30/40]	Time 2.608 (2.533)	Data 0.075 (0.028)	Loss 0.0000 (0.0001)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.518 (0.518)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 2
Epoch: [2][0/40]	Time 1.719 (1.719)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [2][10/40]	Time 2.149 (2.331)	Data 0.029 (0.025)	Loss 4.4018 (0.4002)	Accuracy 75.000 (97.727)
Epoch: [2][20/40]	Time 4.320 (2.719)	Data 0.032 (0.029)	Loss 0.0000 (0.2096)	Accuracy 100.000 (98.810)
Epoch: [2][30/40]	Time 1.588 (2.584)	Data 0.029 (0.032)	Loss 0.0000 (0.4532)	Accuracy 100.000 (97.581)
Test: [0/10]	Time 0.488 (0.488)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 3
Epoch: [3][0/40]	Time 1.793 (1.793)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [3][10/40]	Time 2.045 (1.900)	Data 0.029 (0.023)	Loss 0.0000 (0.0682)	Accuracy 100.000 (97.727)
Epoch: [3][20/40]	Time 1.816 (2.602)	Data 0.029 (0.033)	Loss 0.0000 (0.0358)	Accuracy 100.000 (98.810)
Epoch: [3][30/40]	Time 1.967 (2.321)	Data 0.013 (0.030)	Loss 0.0000 (0.3114)	Accuracy 100.000 (97.581)
Test: [0/10]	Time 0.584 (0.584)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 4
Epoch: [4][0/40]	Time 1.795 (1.795)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [4][10/40]	Time 1.820 (1.933)	Data 0.034 (0.026)	Loss 0.0000 (0.0002)	Accuracy 100.000 (100.000)
Epoch: [4][20/40]	Time 1.578 (1.840)	Data 0.028 (0.028)	Loss 10.1426 (0.4846)	Accuracy 75.000 (98.810)
Epoch: [4][30/40]	Time 1.584 (1.799)	Data 0.029 (0.029)	Loss 0.0000 (0.3331)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.540 (0.540)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 5
Epoch: [5][0/40]	Time 1.856 (1.856)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [5][10/40]	Time 2.207 (1.799)	Data 0.009 (0.015)	Loss 0.0000 (0.0001)	Accuracy 100.000 (100.000)
Epoch: [5][20/40]	Time 2.086 (1.816)	Data 0.029 (0.019)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [5][30/40]	Time 1.757 (1.816)	Data 0.009 (0.020)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.481 (0.481)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 6
Epoch: [6][0/40]	Time 1.678 (1.678)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [6][10/40]	Time 1.933 (1.812)	Data 0.009 (0.011)	Loss 0.0000 (0.0908)	Accuracy 100.000 (97.727)
Epoch: [6][20/40]	Time 1.878 (3.155)	Data 0.028 (0.023)	Loss 0.0000 (0.0476)	Accuracy 100.000 (98.810)
Epoch: [6][30/40]	Time 1.701 (2.692)	Data 0.024 (0.020)	Loss 0.0000 (0.0322)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.502 (0.502)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 7
Epoch: [7][0/40]	Time 1.516 (1.516)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [7][10/40]	Time 1.706 (1.672)	Data 0.014 (0.014)	Loss 0.0000 (0.1284)	Accuracy 100.000 (97.727)
Epoch: [7][20/40]	Time 1.822 (1.690)	Data 0.013 (0.015)	Loss 0.0000 (0.0673)	Accuracy 100.000 (98.810)
Epoch: [7][30/40]	Time 1.721 (1.750)	Data 0.013 (0.017)	Loss 0.0000 (0.0507)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.500 (0.500)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 8
Epoch: [8][0/40]	Time 1.588 (1.588)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [8][10/40]	Time 3.852 (3.178)	Data 0.048 (0.021)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [8][20/40]	Time 4.730 (3.587)	Data 0.030 (0.023)	Loss 0.0000 (0.1091)	Accuracy 100.000 (98.810)
Epoch: [8][30/40]	Time 1.884 (3.313)	Data 0.009 (0.023)	Loss 0.0000 (0.0743)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.526 (0.526)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 9
Epoch: [9][0/40]	Time 9.017 (9.017)	Data 0.047 (0.047)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [9][10/40]	Time 2.909 (5.036)	Data 0.104 (0.031)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [9][20/40]	Time 2.210 (3.699)	Data 0.034 (0.028)	Loss 0.0000 (0.0141)	Accuracy 100.000 (98.810)
Epoch: [9][30/40]	Time 4.582 (3.665)	Data 0.019 (0.025)	Loss 0.0000 (0.0150)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.493 (0.493)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 10
Epoch: [10][0/40]	Time 2.086 (2.086)	Data 0.009 (0.009)	Loss 0.0025 (0.0025)	Accuracy 100.000 (100.000)
Epoch: [10][10/40]	Time 2.212 (2.705)	Data 0.028 (0.016)	Loss 0.0000 (0.2929)	Accuracy 100.000 (97.727)
Epoch: [10][20/40]	Time 1.893 (2.384)	Data 0.027 (0.016)	Loss 0.0000 (0.7366)	Accuracy 100.000 (97.619)
Epoch: [10][30/40]	Time 3.403 (2.299)	Data 0.009 (0.016)	Loss 0.0000 (0.4991)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.517 (0.517)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 11
Epoch: [11][0/40]	Time 1.590 (1.590)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [11][10/40]	Time 2.008 (2.646)	Data 0.009 (0.010)	Loss 0.0000 (0.8348)	Accuracy 100.000 (95.455)
Epoch: [11][20/40]	Time 1.712 (2.238)	Data 0.024 (0.014)	Loss 0.0000 (0.7341)	Accuracy 100.000 (96.429)
Epoch: [11][30/40]	Time 2.051 (2.118)	Data 0.016 (0.015)	Loss 0.0000 (0.4973)	Accuracy 100.000 (97.581)
Test: [0/10]	Time 0.823 (0.823)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 12
Epoch: [12][0/40]	Time 3.020 (3.020)	Data 0.013 (0.013)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [12][10/40]	Time 2.039 (3.210)	Data 0.013 (0.020)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [12][20/40]	Time 1.773 (2.594)	Data 0.009 (0.019)	Loss 12.0633 (0.6780)	Accuracy 75.000 (97.619)
Epoch: [12][30/40]	Time 1.563 (2.346)	Data 0.009 (0.019)	Loss 0.0008 (0.5262)	Accuracy 100.000 (97.581)
Test: [0/10]	Time 0.477 (0.477)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 13
Epoch: [13][0/40]	Time 1.515 (1.515)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [13][10/40]	Time 1.520 (1.629)	Data 0.009 (0.009)	Loss 0.0000 (0.0277)	Accuracy 100.000 (97.727)
Epoch: [13][20/40]	Time 1.515 (1.632)	Data 0.009 (0.012)	Loss 0.0000 (0.0166)	Accuracy 100.000 (98.810)
Epoch: [13][30/40]	Time 1.796 (1.647)	Data 0.024 (0.013)	Loss 0.0000 (0.1253)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.499 (0.499)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 14
Epoch: [14][0/40]	Time 1.563 (1.563)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [14][10/40]	Time 1.861 (1.685)	Data 0.009 (0.015)	Loss 0.0000 (0.1158)	Accuracy 100.000 (97.727)
Epoch: [14][20/40]	Time 1.671 (1.720)	Data 0.013 (0.015)	Loss 0.0000 (0.0608)	Accuracy 100.000 (98.810)
Epoch: [14][30/40]	Time 1.512 (1.700)	Data 0.009 (0.015)	Loss 0.0000 (0.0412)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.494 (0.494)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 15
Epoch: [15][0/40]	Time 1.504 (1.504)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [15][10/40]	Time 1.584 (1.678)	Data 0.025 (0.018)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [15][20/40]	Time 1.718 (1.690)	Data 0.014 (0.020)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [15][30/40]	Time 1.661 (1.734)	Data 0.038 (0.021)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 1.141 (1.141)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 16
Epoch: [16][0/40]	Time 5.270 (5.270)	Data 0.013 (0.013)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [16][10/40]	Time 7.269 (6.154)	Data 0.027 (0.021)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [16][20/40]	Time 3.085 (5.910)	Data 0.037 (0.034)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [16][30/40]	Time 4.449 (5.362)	Data 0.033 (0.036)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.487 (0.487)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 17
Epoch: [17][0/40]	Time 3.400 (3.400)	Data 0.011 (0.011)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [17][10/40]	Time 2.472 (4.410)	Data 0.011 (0.014)	Loss 0.0000 (0.0001)	Accuracy 100.000 (100.000)
Epoch: [17][20/40]	Time 4.164 (5.494)	Data 0.025 (0.020)	Loss 0.0000 (0.0001)	Accuracy 100.000 (100.000)
Epoch: [17][30/40]	Time 2.283 (4.390)	Data 0.037 (0.021)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.960 (0.960)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 18
Epoch: [18][0/40]	Time 1.781 (1.781)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [18][10/40]	Time 2.057 (1.979)	Data 0.013 (0.013)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [18][20/40]	Time 2.459 (2.193)	Data 0.011 (0.015)	Loss 0.7487 (0.0357)	Accuracy 75.000 (98.810)
Epoch: [18][30/40]	Time 4.385 (3.377)	Data 0.015 (0.014)	Loss 0.0000 (0.0243)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.654 (0.654)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 19
Epoch: [19][0/40]	Time 1.843 (1.843)	Data 0.009 (0.009)	Loss 1.1357 (1.1357)	Accuracy 75.000 (75.000)
Epoch: [19][10/40]	Time 2.691 (1.922)	Data 0.013 (0.022)	Loss 0.0000 (0.1032)	Accuracy 100.000 (97.727)
Epoch: [19][20/40]	Time 1.936 (1.978)	Data 0.013 (0.021)	Loss 0.0000 (0.0541)	Accuracy 100.000 (98.810)
Epoch: [19][30/40]	Time 1.558 (1.965)	Data 0.013 (0.021)	Loss 0.0084 (0.0369)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.491 (0.491)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 20
Epoch: [20][0/40]	Time 1.818 (1.818)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [20][10/40]	Time 2.605 (2.027)	Data 0.034 (0.018)	Loss 0.2845 (0.0277)	Accuracy 75.000 (97.727)
Epoch: [20][20/40]	Time 1.673 (2.096)	Data 0.028 (0.024)	Loss 0.0000 (0.0145)	Accuracy 100.000 (98.810)
Epoch: [20][30/40]	Time 1.737 (2.039)	Data 0.026 (0.023)	Loss 0.0000 (0.0098)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.474 (0.474)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 21
Epoch: [21][0/40]	Time 1.529 (1.529)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [21][10/40]	Time 1.659 (1.571)	Data 0.013 (0.018)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [21][20/40]	Time 1.670 (1.584)	Data 0.013 (0.020)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [21][30/40]	Time 1.743 (1.606)	Data 0.013 (0.020)	Loss 0.0000 (0.0309)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.502 (0.502)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 22
Epoch: [22][0/40]	Time 1.515 (1.515)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [22][10/40]	Time 3.960 (2.154)	Data 0.013 (0.020)	Loss 0.0000 (0.0486)	Accuracy 100.000 (97.727)
Epoch: [22][20/40]	Time 2.701 (2.331)	Data 0.017 (0.021)	Loss 0.0000 (0.0481)	Accuracy 100.000 (97.619)
Epoch: [22][30/40]	Time 2.037 (2.459)	Data 0.010 (0.021)	Loss 0.0000 (0.0326)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.478 (0.478)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 23
Epoch: [23][0/40]	Time 1.622 (1.622)	Data 0.014 (0.014)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [23][10/40]	Time 5.262 (2.509)	Data 0.016 (0.023)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [23][20/40]	Time 1.934 (2.574)	Data 0.016 (0.025)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [23][30/40]	Time 5.137 (2.707)	Data 0.025 (0.025)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.529 (0.529)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 24
Epoch: [24][0/40]	Time 3.301 (3.301)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [24][10/40]	Time 2.420 (2.709)	Data 0.009 (0.021)	Loss 0.0000 (0.0002)	Accuracy 100.000 (100.000)
Epoch: [24][20/40]	Time 2.301 (2.616)	Data 0.032 (0.024)	Loss 0.0000 (0.0001)	Accuracy 100.000 (100.000)
Epoch: [24][30/40]	Time 2.524 (3.049)	Data 0.016 (0.022)	Loss 0.0000 (0.0001)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.941 (0.941)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 25
Epoch: [25][0/40]	Time 2.736 (2.736)	Data 0.010 (0.010)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [25][10/40]	Time 1.673 (2.962)	Data 0.027 (0.031)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [25][20/40]	Time 1.879 (2.441)	Data 0.009 (0.025)	Loss 0.0000 (0.1457)	Accuracy 100.000 (98.810)
Epoch: [25][30/40]	Time 1.763 (2.280)	Data 0.017 (0.023)	Loss 0.0000 (0.0988)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.512 (0.512)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 26
Epoch: [26][0/40]	Time 1.663 (1.663)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [26][10/40]	Time 2.261 (2.667)	Data 0.009 (0.017)	Loss 0.0000 (0.3297)	Accuracy 100.000 (97.727)
Epoch: [26][20/40]	Time 1.766 (2.210)	Data 0.009 (0.016)	Loss 0.0000 (0.3482)	Accuracy 100.000 (96.429)
Epoch: [26][30/40]	Time 1.736 (2.049)	Data 0.013 (0.016)	Loss 0.0000 (0.2359)	Accuracy 100.000 (97.581)
Test: [0/10]	Time 0.504 (0.504)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 27
Epoch: [27][0/40]	Time 1.590 (1.590)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [27][10/40]	Time 1.787 (2.148)	Data 0.024 (0.019)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [27][20/40]	Time 1.903 (1.983)	Data 0.013 (0.017)	Loss 0.0000 (0.0406)	Accuracy 100.000 (98.810)
Epoch: [27][30/40]	Time 1.553 (1.944)	Data 0.013 (0.018)	Loss 0.0000 (0.0275)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.533 (0.533)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 28
Epoch: [28][0/40]	Time 1.487 (1.487)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [28][10/40]	Time 1.683 (1.649)	Data 0.009 (0.013)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [28][20/40]	Time 1.651 (1.627)	Data 0.009 (0.013)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [28][30/40]	Time 1.707 (1.642)	Data 0.025 (0.015)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 1.589 (1.589)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 29
Epoch: [29][0/40]	Time 2.014 (2.014)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [29][10/40]	Time 2.935 (3.034)	Data 0.009 (0.014)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [29][20/40]	Time 1.756 (2.923)	Data 0.014 (0.016)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [29][30/40]	Time 1.507 (2.552)	Data 0.028 (0.019)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.471 (0.471)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 30
Epoch: [30][0/40]	Time 1.471 (1.471)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [30][10/40]	Time 1.527 (2.206)	Data 0.030 (0.013)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [30][20/40]	Time 1.498 (1.913)	Data 0.024 (0.018)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [30][30/40]	Time 2.873 (2.178)	Data 0.013 (0.020)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.484 (0.484)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 31
Epoch: [31][0/40]	Time 1.517 (1.517)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [31][10/40]	Time 1.699 (1.823)	Data 0.013 (0.011)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [31][20/40]	Time 1.522 (1.726)	Data 0.025 (0.015)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [31][30/40]	Time 1.569 (1.772)	Data 0.025 (0.015)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.509 (0.509)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 32
Epoch: [32][0/40]	Time 1.526 (1.526)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [32][10/40]	Time 1.760 (1.632)	Data 0.024 (0.016)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [32][20/40]	Time 1.763 (1.713)	Data 0.028 (0.018)	Loss 0.0000 (0.0023)	Accuracy 100.000 (100.000)
Epoch: [32][30/40]	Time 2.286 (1.801)	Data 0.029 (0.021)	Loss 0.0000 (0.0015)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.514 (0.514)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 33
Epoch: [33][0/40]	Time 1.579 (1.579)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [33][10/40]	Time 1.563 (1.754)	Data 0.028 (0.022)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [33][20/40]	Time 1.666 (1.745)	Data 0.009 (0.021)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [33][30/40]	Time 1.713 (1.756)	Data 0.009 (0.020)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.701 (0.701)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 34
Epoch: [34][0/40]	Time 1.907 (1.907)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [34][10/40]	Time 1.689 (1.855)	Data 0.028 (0.020)	Loss 0.0000 (0.1181)	Accuracy 100.000 (97.727)
Epoch: [34][20/40]	Time 1.568 (1.933)	Data 0.013 (0.020)	Loss 0.0000 (0.0619)	Accuracy 100.000 (98.810)
Epoch: [34][30/40]	Time 2.365 (1.938)	Data 0.029 (0.021)	Loss 0.0000 (0.0419)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.487 (0.487)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 35
Epoch: [35][0/40]	Time 1.569 (1.569)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [35][10/40]	Time 1.561 (1.670)	Data 0.013 (0.020)	Loss 0.0000 (0.0674)	Accuracy 100.000 (97.727)
Epoch: [35][20/40]	Time 1.527 (1.754)	Data 0.009 (0.020)	Loss 0.0000 (0.3548)	Accuracy 100.000 (97.619)
Epoch: [35][30/40]	Time 1.824 (1.766)	Data 0.029 (0.019)	Loss 0.0001 (0.2404)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.666 (0.666)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 36
Epoch: [36][0/40]	Time 2.447 (2.447)	Data 0.049 (0.049)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [36][10/40]	Time 1.803 (2.207)	Data 0.024 (0.024)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [36][20/40]	Time 2.315 (2.232)	Data 0.029 (0.022)	Loss 0.0000 (0.2700)	Accuracy 100.000 (98.810)
Epoch: [36][30/40]	Time 1.843 (2.752)	Data 0.014 (0.022)	Loss 0.0000 (0.1829)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.527 (0.527)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 37
Epoch: [37][0/40]	Time 1.775 (1.775)	Data 0.011 (0.011)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [37][10/40]	Time 1.520 (1.851)	Data 0.009 (0.015)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [37][20/40]	Time 1.883 (1.762)	Data 0.035 (0.017)	Loss 0.0000 (0.1144)	Accuracy 100.000 (98.810)
Epoch: [37][30/40]	Time 2.730 (1.785)	Data 0.032 (0.018)	Loss 0.0000 (0.0775)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.683 (0.683)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 38
Epoch: [38][0/40]	Time 2.610 (2.610)	Data 0.011 (0.011)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [38][10/40]	Time 1.521 (2.624)	Data 0.013 (0.025)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [38][20/40]	Time 1.477 (2.099)	Data 0.024 (0.023)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [38][30/40]	Time 1.651 (1.919)	Data 0.013 (0.022)	Loss 0.0000 (0.0422)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.470 (0.470)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 39
Epoch: [39][0/40]	Time 1.478 (1.478)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [39][10/40]	Time 1.773 (1.643)	Data 0.024 (0.017)	Loss 0.0000 (0.7098)	Accuracy 100.000 (95.455)
Epoch: [39][20/40]	Time 1.484 (1.624)	Data 0.009 (0.016)	Loss 0.0000 (0.9760)	Accuracy 100.000 (95.238)
Epoch: [39][30/40]	Time 1.620 (1.626)	Data 0.024 (0.017)	Loss 0.0000 (0.6612)	Accuracy 100.000 (96.774)
Test: [0/10]	Time 0.470 (0.470)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 40
Epoch: [40][0/40]	Time 1.461 (1.461)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [40][10/40]	Time 2.416 (1.838)	Data 0.028 (0.013)	Loss 0.0000 (0.2505)	Accuracy 100.000 (97.727)
Epoch: [40][20/40]	Time 1.640 (1.746)	Data 0.024 (0.014)	Loss 0.0000 (0.1442)	Accuracy 100.000 (97.619)
Epoch: [40][30/40]	Time 1.644 (1.706)	Data 0.024 (0.014)	Loss 0.0000 (0.0977)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.483 (0.483)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 41
Epoch: [41][0/40]	Time 1.573 (1.573)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [41][10/40]	Time 3.049 (2.744)	Data 0.035 (0.024)	Loss 0.0000 (0.2319)	Accuracy 100.000 (97.727)
Epoch: [41][20/40]	Time 1.628 (2.377)	Data 0.024 (0.021)	Loss 0.0000 (0.1215)	Accuracy 100.000 (98.810)
Epoch: [41][30/40]	Time 1.708 (2.125)	Data 0.009 (0.019)	Loss 0.0000 (0.1868)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.696 (0.696)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 42
Epoch: [42][0/40]	Time 1.488 (1.488)	Data 0.009 (0.009)	Loss 0.0007 (0.0007)	Accuracy 100.000 (100.000)
Epoch: [42][10/40]	Time 2.930 (2.279)	Data 0.014 (0.015)	Loss 0.0000 (0.3116)	Accuracy 100.000 (97.727)
Epoch: [42][20/40]	Time 2.035 (1.990)	Data 0.009 (0.016)	Loss 0.0000 (0.2716)	Accuracy 100.000 (97.619)
Epoch: [42][30/40]	Time 1.657 (2.008)	Data 0.013 (0.017)	Loss 0.0000 (0.1840)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.525 (0.525)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 43
Epoch: [43][0/40]	Time 1.601 (1.601)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [43][10/40]	Time 2.042 (2.215)	Data 0.010 (0.012)	Loss 0.0000 (0.0237)	Accuracy 100.000 (97.727)
Epoch: [43][20/40]	Time 2.499 (2.148)	Data 0.024 (0.016)	Loss 0.0000 (0.0124)	Accuracy 100.000 (98.810)
Epoch: [43][30/40]	Time 2.204 (2.163)	Data 0.029 (0.017)	Loss 0.0000 (0.0093)	Accuracy 100.000 (99.194)
Test: [0/10]	Time 0.485 (0.485)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 44
Epoch: [44][0/40]	Time 1.518 (1.518)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [44][10/40]	Time 2.193 (2.059)	Data 0.028 (0.014)	Loss 0.0000 (0.0002)	Accuracy 100.000 (100.000)
Epoch: [44][20/40]	Time 1.652 (2.228)	Data 0.013 (0.017)	Loss 0.0000 (0.0005)	Accuracy 100.000 (100.000)
Epoch: [44][30/40]	Time 2.770 (2.279)	Data 0.028 (0.018)	Loss 0.0000 (0.0004)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.475 (0.475)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 45
Epoch: [45][0/40]	Time 1.640 (1.640)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [45][10/40]	Time 1.662 (1.551)	Data 0.024 (0.017)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [45][20/40]	Time 4.253 (1.985)	Data 0.017 (0.017)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [45][30/40]	Time 2.828 (2.524)	Data 0.020 (0.019)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.474 (0.474)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 46
Epoch: [46][0/40]	Time 1.579 (1.579)	Data 0.009 (0.009)	Loss 0.0114 (0.0114)	Accuracy 100.000 (100.000)
Epoch: [46][10/40]	Time 1.600 (1.713)	Data 0.024 (0.012)	Loss 0.0000 (0.0010)	Accuracy 100.000 (100.000)
Epoch: [46][20/40]	Time 1.515 (1.702)	Data 0.013 (0.014)	Loss 0.0000 (0.0005)	Accuracy 100.000 (100.000)
Epoch: [46][30/40]	Time 1.788 (1.705)	Data 0.016 (0.014)	Loss 1.5350 (0.0499)	Accuracy 75.000 (99.194)
Test: [0/10]	Time 0.477 (0.477)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 47
Epoch: [47][0/40]	Time 1.512 (1.512)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [47][10/40]	Time 1.635 (1.596)	Data 0.013 (0.018)	Loss 0.0000 (0.0248)	Accuracy 100.000 (97.727)
Epoch: [47][20/40]	Time 1.632 (1.620)	Data 0.024 (0.020)	Loss 0.0000 (0.1592)	Accuracy 100.000 (97.619)
Epoch: [47][30/40]	Time 1.956 (1.642)	Data 0.029 (0.020)	Loss 0.0000 (0.1079)	Accuracy 100.000 (98.387)
Test: [0/10]	Time 0.472 (0.472)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
epoch: 48
Epoch: [48][0/40]	Time 1.475 (1.475)	Data 0.009 (0.009)	Loss 13.2000 (13.2000)	Accuracy 75.000 (75.000)
Epoch: [48][10/40]	Time 1.476 (1.575)	Data 0.024 (0.014)	Loss 0.0000 (1.2000)	Accuracy 100.000 (97.727)
Epoch: [48][20/40]	Time 1.976 (1.625)	Data 0.013 (0.019)	Loss 0.0000 (0.7267)	Accuracy 100.000 (96.429)
Epoch: [48][30/40]	Time 3.406 (2.011)	Data 0.012 (0.018)	Loss 0.0000 (0.8102)	Accuracy 100.000 (95.161)
Test: [0/10]	Time 0.473 (0.473)	Loss 2.9487 (2.9487)	Accuracy 75.000 (75.000)
epoch: 49
Epoch: [49][0/40]	Time 1.540 (1.540)	Data 0.009 (0.009)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Epoch: [49][10/40]	Time 4.374 (3.250)	Data 0.013 (0.032)	Loss 0.0000 (0.2029)	Accuracy 100.000 (95.455)
Epoch: [49][20/40]	Time 1.761 (2.653)	Data 0.024 (0.026)	Loss 0.0065 (0.5098)	Accuracy 100.000 (95.238)
Epoch: [49][30/40]	Time 1.555 (2.414)	Data 0.027 (0.024)	Loss 0.0000 (0.3589)	Accuracy 100.000 (95.968)
Test: [0/10]	Time 0.626 (0.626)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
Test: [0/10]	Time 0.572 (0.572)	Loss 0.0000 (0.0000)	Accuracy 100.000 (100.000)
fold: 5
precision: 1.0
recall: 1.0
f_score: 1.0
ord_error: 0.0
4.8 4.711111111111111 4.752941176470588 0.525
