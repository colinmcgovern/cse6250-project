longest_post_len: 6675
test_size
40
train_size
160
####### FOLD: 0 #######
cut_df size is 160
cut_df size is 40
len(train_ds.get_y) 160
len(test_ds.get_y) 40
sum(test_ds.get_y) 53
train_loader
epoch: 0
output
tensor([[ -3.4811,  -3.4075,   2.8428,  -7.5349,   0.6536],
        [-11.7069,   2.1782,   5.7304,  -3.9458,  -2.7817],
        [ -4.3083,   1.7401,   1.1235, -10.6004,   5.4080],
        [ -7.4249,  -2.9461,   0.5544,  -5.8436,  -1.5035]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([2., 0., 0., 0.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
Epoch: [0][0/40]	Time 1.793 (1.793)	Data 0.026 (0.026)	Loss 8.8645 (8.8645)	Accuracy 25.000 (25.000)
output
tensor([[-1.4725, -2.9421, -0.7125, -9.3113,  4.8228],
        [ 0.7264, -2.0915, -1.4105, -7.9815, -0.9805],
        [ 0.8439, -1.5935, -3.3148, -3.8043, -1.3549],
        [-1.2664, -5.7020, -1.2964, -9.6884,  5.1628]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([0., 0., 0., 2.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[  5.3984, -12.4340,  -3.1506,  -4.1381,  -6.2244],
        [  5.4459,  -4.1351,  -0.3466,  -6.8466,  -6.8512],
        [  5.3746,  -3.9666,   0.0196,  -7.3260,  -2.2229],
        [  2.9139,  -0.8423,   1.5413,  -5.1704,  -1.7256]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([1., 0., 2., 3.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[  4.6428,  -3.5214,  -1.6284, -12.1793,  -6.7508],
        [  7.2367,  -1.3932,  -4.8255,  -4.8496,  -7.1707],
        [  4.8656,  -2.9861,   1.3816, -10.5546,  -5.7322],
        [  4.6534,  -5.6869,  -2.5264,  -4.1592,  -5.9641]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([1., 1., 0., 2.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[  4.6098,  -2.5528,   3.4806,  -6.5510,  -9.3010],
        [  2.9480,  -0.9617,  -1.2354,  -6.0083, -11.7831],
        [  0.7087,  -3.4469,  -1.2916,  -5.4736,  -8.2734],
        [  6.2209,  -2.6718,   1.9308,  -4.4238,  -9.3032]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([2., 0., 2., 3.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[ -2.4067,  -3.7237,  -2.8506,   1.3487, -15.6365],
        [  1.7589,  -1.2156,  -2.3662,  -2.3577, -14.2541],
        [  1.5739,   2.8562,  -2.7865,  -6.3783, -16.3454],
        [ -1.8452,   1.9817,   0.9137,  -6.1619,  -9.4173]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([0., 1., 1., 2.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[ -2.5383,   1.9955,   2.1628,  -3.1231, -19.4680],
        [ -0.8321,   9.2131,   3.8157,  -9.5234, -17.0288],
        [  2.7903,  -2.8720,   2.2449,  -3.9864, -14.6387],
        [ -2.0119,   2.7651,   3.3713,  -1.0040, -14.3079]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([4., 1., 1., 2.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[-3.5863e+00,  6.8791e+00,  1.0519e+01, -5.9007e+00, -1.4769e+01],
        [-4.4063e+00,  3.8967e+00,  7.2225e+00, -4.3187e+00, -1.2891e+01],
        [-3.1318e+00,  3.9550e+00,  5.3622e+00,  4.6771e-03, -2.1010e+01],
        [-3.0090e+00,  4.2003e-01,  4.9133e+00, -2.6266e-01, -1.3694e+01]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([2., 1., 1., 4.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[ -1.7175,   5.4038,   3.1388,  -0.2262, -20.4223],
        [ -6.4983,   9.2975,   5.9176,  -1.5389, -21.8567],
        [ -4.9354,   4.5897,   2.8022,   2.5223, -18.8244],
        [ -2.1165,  10.3038,   2.8844,   0.5717, -14.4745]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([2., 0., 0., 1.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[ -5.4035,   4.6876,   3.1856,  -2.2743, -18.9127],
        [ -8.1128,  11.5192,   0.2160,  -3.3243, -14.2651],
        [ -7.9751,   3.3841,   1.9500,  -1.7160, -17.9465],
        [ -6.1129,   5.7373,   6.4873,  -7.0736, -12.7177]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([2., 1., 0., 0.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[ -5.4029,   9.7405,   5.2203,  -1.8779, -18.7878],
        [-12.7136,  12.8168,   6.8229,  -0.5031, -23.4629],
        [-11.3386,   9.4810,   5.3612,  -8.1048, -13.8797],
        [ -7.1600,   5.3352,   4.0536,  -3.1442, -18.6625]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([2., 2., 1., 2.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
Epoch: [0][10/40]	Time 1.763 (1.760)	Data 0.024 (0.024)	Loss 3.0176 (5.5860)	Accuracy 25.000 (29.545)
output
tensor([[ -4.8500,   2.8416,   3.2373,  -5.8749, -16.9644],
        [-12.4845,   5.2879,   3.8459,  -3.8293, -21.4250],
        [-16.6468,   2.4010,   3.0984,  -3.9581, -15.2535],
        [ -5.6317,   2.9898,   6.8630,  -1.4998, -16.9079]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([0., 4., 2., 2.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[ -4.3874,  -1.4514,   4.9215,  -1.9798, -21.6350],
        [ -2.5204,   2.2129,   3.7290,   3.7791, -13.0870],
        [ -9.0674,  -1.2843,   3.8866,   0.9380, -17.9956],
        [ -5.8212,   9.5666,   7.8312,  -0.4497, -12.2613]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([1., 3., 3., 2.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[ -5.8380,   2.9931,   7.4035,   1.4371, -16.8847],
        [ -6.6735,   3.3374,   7.4764,  -0.2369, -20.3940],
        [ -3.4495,  -0.8899,   4.1373,   0.6397, -15.5912],
        [ -6.0342,   8.1348,   4.9964,  -0.6391, -15.1357]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([3., 2., 0., 3.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[ -3.3419,  -5.5806,   6.3810,   2.9743, -15.5813],
        [ -3.4739,  -1.7333,   3.9635,   1.1016, -16.2461],
        [ -6.1476,  -3.6491,   4.4692,  -3.7627, -13.6964],
        [ -8.0401,   2.1433,   6.7845,   5.1767, -16.2632]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([2., 2., 2., 3.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[ -2.2194,  -0.3632,   0.3529,   6.9834, -22.7674],
        [  0.2914,  -1.3679,   4.4837,   1.0063, -13.6234],
        [ -5.4013,  -0.1924,   3.3682,   2.2584,  -9.8716],
        [ -0.2566,  -7.4469,   8.2297,   0.9592, -20.8402]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([1., 4., 0., 2.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[  1.6817,  -3.4103,   6.6932,   3.4102, -12.3978],
        [  0.3979,  -3.4688,   2.1357,   5.2065, -10.9829],
        [  1.3886,  -6.8596,  -1.3828,   1.9304,  -8.3662],
        [ -7.9990,  -5.2908,   2.7470,   2.0410, -15.9556]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([1., 4., 0., 2.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[  1.2206,  -5.4067,  -0.8634,   4.8329, -12.1653],
        [ -1.0244,  -4.5227,   2.8335,   4.5748, -14.4747],
        [ -2.9288,  -2.4852,  -0.0879,   1.7680, -13.5884],
        [ -1.0414,  -9.8689,  -4.4013,  -1.6622, -10.3439]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([2., 1., 2., 0.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[ -0.0925,  -6.3871,   2.0950,   3.1455,  -9.1809],
        [  1.6179,  -9.8050,   1.1728,   7.1134, -12.3989],
        [  3.8225,  -6.4089,  -1.6420,   2.6702, -10.0098],
        [  4.1762,  -8.0754,  -1.7618,  -1.2490,  -8.9448]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([0., 2., 1., 0.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[  1.4697,   0.4945,  -2.3685,   0.7808,  -9.5867],
        [  4.7047,  -5.1338,  -2.2569,  -1.8233,  -8.9486],
        [  3.2654, -10.7350,  -1.9028,   7.8880, -12.1898],
        [  1.9240,  -5.3253,   0.2247,   2.4318, -10.2004]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([4., 0., 2., 0.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[  0.9411,  -8.3894,   1.0873,  -3.9118,  -9.0543],
        [ -4.8952,  -2.8861,   2.2899,  -4.9644,  -7.0065],
        [  8.0448,  -3.6241,   4.3297,  -2.6934,  -9.3700],
        [  3.0958,  -5.9841,   1.7480,  -0.1631, -11.0273]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([1., 1., 3., 2.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
Epoch: [0][20/40]	Time 1.736 (1.766)	Data 0.013 (0.024)	Loss 6.9144 (5.5739)	Accuracy 0.000 (29.762)
output
tensor([[  3.1104,  -1.6404,  -2.9103,  -4.5610,  -7.4475],
        [  1.9574,  -7.6174,   5.4010,  -0.2731, -12.9106],
        [ -8.8028,  -5.8350,  -2.5867,  -4.7894, -11.8018],
        [  0.2851, -10.2135,   3.9418,  -3.7606,  -5.4186]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([2., 0., 1., 2.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[ 2.0167, -2.1230,  1.4429, -9.8374, -8.2915],
        [ 3.7486,  0.4418,  3.3731, -6.1886, -5.9453],
        [-0.1808, -6.1370, -2.1845, -1.0398, -4.1708],
        [ 5.7422, -7.1705,  0.5796, -5.7514, -4.9875]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([1., 0., 0., 1.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[ 5.4537e+00, -1.3210e+00,  2.3172e-01, -1.3899e+00,  3.7268e-03],
        [ 1.3631e+00,  1.7136e+00, -3.7387e-01, -5.6326e+00,  1.0729e-01],
        [-1.7486e+00, -2.3895e+00, -3.3647e+00, -5.1197e+00, -7.5364e+00],
        [ 4.9016e+00, -3.2987e+00, -4.0227e+00, -1.6489e+00, -6.3934e-01]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([2., 4., 4., 3.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[ 1.4032,  1.2869,  0.2976, -7.5666, -0.6581],
        [ 3.6268, -0.5132,  1.1248, -3.1866, -0.8468],
        [-1.8072,  0.5967, -1.1428, -2.3610, -6.5206],
        [-5.3219,  4.5563, -0.4414,  1.0165, -0.5832]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([4., 0., 4., 3.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[  2.9725,  -2.3517,  -3.2177,  -6.6778,  -0.9264],
        [ -0.2485,  -4.3696,  -2.4349,  -7.4226,  -3.2195],
        [ -0.7057,   6.8521,   0.7927, -10.3713,   1.8144],
        [ -2.2925,  -0.3520,   1.8986,  -6.9826,   1.2461]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([4., 2., 3., 1.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[ 1.4345,  0.7776,  4.3490, -6.7907,  1.8933],
        [ 1.1527,  2.6231,  0.1836, -3.9479,  1.9687],
        [-1.2240, -2.0223, -9.9633, -4.4492,  4.6459],
        [-1.9350,  2.6425, -2.8361, -9.2458,  4.2896]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([3., 2., 2., 2.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[ -3.9442,  -2.5283,   3.7285, -11.8223,   6.5584],
        [ -7.3002,  -0.3710,  -1.9771,  -7.2146,   1.0879],
        [ -1.8731,   9.2811,   2.7828, -11.6102,   5.3856],
        [ -5.7994,   2.1328,   1.9317,  -3.3438,  -0.8898]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([1., 1., 0., 0.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[-5.0405e+00, -4.3079e-01,  7.3530e+00, -4.9606e+00,  6.6565e-01],
        [-1.8164e+00,  3.3673e+00, -8.8688e+00, -7.0025e+00,  5.9862e+00],
        [-3.2329e+00,  1.1371e+00, -4.1581e+00, -4.4748e+00,  2.2355e-03],
        [ 2.5092e-01,  5.2140e+00,  9.5071e-01, -2.0015e+00,  7.7975e+00]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([2., 2., 3., 2.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[-3.7781,  3.3052, -1.4778, -6.8312, -0.6384],
        [-2.7053,  4.2324,  0.3025, -3.6688,  0.9801],
        [-4.7558,  2.5753,  4.0251, -4.4610,  5.3869],
        [-6.5626,  4.0307, -2.6778, -4.2293, -1.7424]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([2., 0., 0., 0.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[-1.8158, -5.2075,  4.2533, -3.5445, -3.7015],
        [ 1.3294, -1.5835,  7.0152, -0.4008,  4.1520],
        [-8.5654, -4.2257,  0.3029, -7.1448,  2.8605],
        [-6.2513,  1.5788,  7.1220, -4.6396,  1.8380]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([2., 0., 0., 1.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
Epoch: [0][30/40]	Time 1.914 (1.802)	Data 0.013 (0.023)	Loss 5.7005 (5.7305)	Accuracy 25.000 (25.000)
output
tensor([[-3.7218,  1.1295, -2.0645, -2.4664, -2.6237],
        [-4.4353, -0.5645, -0.8221, -3.0220, -0.2578],
        [-3.4461, -3.3806,  2.7805, -3.7498, -1.3086],
        [-1.1855, -1.5082, -0.9193, -1.6601,  5.0288]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([1., 3., 2., 2.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[-1.1841, -4.2694, -2.9581, -0.0896, -2.4597],
        [-0.7730, -2.7937, -1.6181,  4.0437, -4.7810],
        [-3.0762, -3.4584,  2.6661, -4.8040, -1.5256],
        [-1.3660, -2.5560, -1.0225,  2.8194, -2.9449]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([0., 2., 1., 2.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[-4.6606, -0.7032,  4.2464,  4.1409, -7.4891],
        [-2.5082, -0.4354, -0.5534, -5.2893,  0.6139],
        [ 1.7015, -4.6535, -0.2156, -2.1304, -5.4461],
        [ 3.4044,  2.9469,  0.5011, -1.7710, -5.1228]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([3., 2., 3., 0.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[-2.0396, -1.5508,  6.9610, -0.1816, -7.2436],
        [ 1.8291, -3.7616,  2.3848, -3.2556, -1.4385],
        [ 0.2260,  0.0797, -0.7997, -2.5763, -3.0733],
        [-4.9531, -2.2857,  0.8019, -2.2747, -5.0647]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([0., 2., 0., 3.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[-0.3006, -1.9988, -0.0908,  1.9984, -4.0667],
        [ 1.1546, -3.1603,  0.0842, -0.2742, -2.3085],
        [ 0.9536, -5.2610,  4.9043,  0.1987, -6.4260],
        [ 0.9256, -7.6036,  2.2149, -1.7465,  0.7581]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([2., 2., 1., 1.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[ 0.3087, -5.1989,  5.7755,  1.3563, -7.8419],
        [ 1.9099, -6.7001,  0.3625, -1.8312, -7.3150],
        [-2.9338, -6.9758, -0.7646, -1.1123, -9.3711],
        [-3.3103, -6.4263,  2.1264,  1.8192, -8.8162]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([3., 0., 1., 2.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[ -1.4065,  -1.6100,   1.7563,   1.7843,  -8.4776],
        [  2.6286,  -3.7812,   1.8878,   3.3612,  -7.6392],
        [  1.0190,  -0.1827,  -1.0832,  -0.9725, -11.8010],
        [  5.4309,  -1.7481,   4.0543,  -1.5611,  -9.1817]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([0., 3., 0., 3.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[ -3.9877,   0.9233,   5.9925,   2.6982, -13.9283],
        [ -0.5808,   1.9360,  -1.8894,  -0.2731,  -8.9776],
        [  4.5591,  -1.9184,   4.3502,   0.8257, -14.2438],
        [  1.5942,  -5.4611,   2.7390,   3.0861, -11.3131]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([4., 0., 1., 1.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[ -0.6747,   0.9124,  -2.5322,  -1.9187, -14.0753],
        [ -2.2531,   3.5835,   3.3699,   4.0177,  -8.5708],
        [ -0.6111,  -2.5032,  -1.3260,   1.5339, -11.0121],
        [  0.8651,   3.5051,  -1.8837,   2.3896,  -9.6543]],
       grad_fn=<AddmmBackward0>)
torch.Size([4, 5])
target
tensor([2., 3., 3., 2.], dtype=torch.float64)
torch.Size([4])
1
1
2
3
4
5
6
7
output
tensor([[  0.8714,   0.4174,  -2.3499,   1.0264, -12.0635],
        [  2.6019,  -1.1122,  -1.6987,   1.4373, -13.1091],
        [  3.7443,  -0.7371,  -2.3853,   2.3552,  -8.3265],
        [  1.0371,  -1.5714,  -1.8949,   1.6585, -12.3427]])
torch.Size([4, 5])
target
tensor([1., 3., 0., 0.], dtype=torch.float64)
torch.Size([4])
Test: [0/10]	Time 0.880 (0.880)	Loss 1.0729 (1.0729)	Accuracy 25.000 (25.000)
output
tensor([[  0.6669,  -1.3635,  -1.6195,   1.6521, -11.4536],
        [  1.9599,  -0.9268,  -2.9294,   2.8368, -12.4422],
        [  1.9358,  -0.2020,  -3.1463,   3.5699, -12.0089],
        [  0.6358,  -2.4046,  -3.0909,   4.2028, -14.0283]])
torch.Size([4, 5])
target
tensor([1., 2., 0., 2.], dtype=torch.float64)
torch.Size([4])
output
tensor([[  0.1736,   0.7749,  -2.5258,   2.0968, -12.4684],
        [  2.1860,  -1.5671,  -2.5268,   2.8791, -13.1636],
        [  1.4022,  -1.7953,  -2.3086,   1.3941, -10.7926],
        [  2.1395,  -0.2215,  -1.9204,   1.6533, -11.6713]])
torch.Size([4, 5])
target
tensor([3., 0., 0., 2.], dtype=torch.float64)
torch.Size([4])
output
tensor([[  2.2441,  -0.8252,  -2.0529,   1.4551, -10.6904],
        [  2.6205,  -0.5657,  -2.1889,   1.6690, -11.1633],
        [  2.8476,  -1.5168,  -2.0187,   2.6807,  -9.6821],
        [ -0.0340,  -3.5596,  -1.6993,   1.7044, -11.5827]])
torch.Size([4, 5])
target
tensor([0., 0., 1., 3.], dtype=torch.float64)
torch.Size([4])
output
tensor([[ -0.6713,  -0.9925,  -1.1645,   3.4073, -14.4195],
        [ -0.3000,  -1.2800,  -1.9136,   3.0915, -13.8689],
        [ -0.0207,  -1.3106,  -1.6612,   2.9467, -11.2743],
        [  1.6155,   0.4872,  -1.8486,   2.3761,  -9.6476]])
torch.Size([4, 5])
target
tensor([4., 3., 3., 1.], dtype=torch.float64)
torch.Size([4])
output
tensor([[  1.3265,  -1.5916,  -2.3731,   2.3446, -12.9490],
        [  0.1758,  -1.7519,  -1.6302,   4.2234, -13.2705],
        [  0.1438,  -1.0095,  -1.5485,   3.3114, -14.9467],
        [  0.7726,  -0.1162,  -2.3280,   2.1812, -12.4745]])
torch.Size([4, 5])
target
tensor([1., 2., 0., 0.], dtype=torch.float64)
torch.Size([4])
output
tensor([[ 8.2392e-01,  7.4563e-01, -2.2024e+00,  1.6375e+00, -1.0749e+01],
        [ 7.9773e-01, -5.5937e-01, -1.5672e+00,  2.4051e+00, -1.3215e+01],
        [ 4.1938e-01, -2.7084e+00, -2.0935e+00,  2.3261e+00, -8.6274e+00],
        [-4.9717e-03, -2.8463e+00, -1.4137e+00,  3.6270e+00, -1.2513e+01]])
torch.Size([4, 5])
target
tensor([1., 2., 2., 3.], dtype=torch.float64)
torch.Size([4])
output
tensor([[  1.8699,  -2.8537,  -1.8496,   3.4870, -13.7471],
        [  1.6447,   0.4114,  -3.2855,   1.6163, -10.0003],
        [  2.9356,  -0.2218,  -3.8772,   0.8688,  -9.8978],
        [  0.9244,  -2.6065,  -1.5632,   1.9284,  -9.0015]])
torch.Size([4, 5])
target
tensor([3., 1., 1., 1.], dtype=torch.float64)
torch.Size([4])
output
tensor([[ 9.0878e-01, -1.6675e+00, -3.0280e+00,  2.2478e+00, -1.2509e+01],
        [-4.5456e-01, -5.5770e-01, -1.0393e+00,  2.0229e+00, -1.1847e+01],
        [-5.9279e-01,  3.7356e-01,  2.6367e-01,  8.8122e-01, -1.0461e+01],
        [-1.1039e-02, -1.0170e+00, -3.7104e-01,  1.8078e+00, -9.3633e+00]])
torch.Size([4, 5])
target
tensor([0., 1., 2., 1.], dtype=torch.float64)
torch.Size([4])
output
tensor([[ -0.0779,  -2.4849,  -2.4722,   3.4104, -14.8685],
        [  2.0546,  -1.6561,  -2.1622,   2.9945, -10.9176],
        [  2.5658,  -0.3586,  -4.0516,   4.1706, -15.2748],
        [ -0.1102,  -1.5390,  -2.6406,   3.2848, -14.4288]])
torch.Size([4, 5])
target
tensor([0., 0., 0., 3.], dtype=torch.float64)
torch.Size([4])
test_accuracy
27.5
best_val_acc
0.0
Traceback (most recent call last):
  File "main.py", line 535, in <module>
    fold_testing()
  File "main.py", line 424, in fold_testing
    torch.save(model_used, os.path.join(PATH_OUTPUT, save_file), _use_new_zipfile_serialization=False)
  File "/home/colin/anaconda3/envs/hw5/lib/python3.6/site-packages/torch/serialization.py", line 376, in save
    with _open_file_like(f, 'wb') as opened_file:
  File "/home/colin/anaconda3/envs/hw5/lib/python3.6/site-packages/torch/serialization.py", line 230, in _open_file_like
    return _open_file(name_or_buffer, mode)
  File "/home/colin/anaconda3/envs/hw5/lib/python3.6/site-packages/torch/serialization.py", line 211, in __init__
    super(_open_file, self).__init__(open(name, mode))
FileNotFoundError: [Errno 2] No such file or directory: 'output/output/CNN_10.pth'
longest_post_len: 6216
test_size
40
train_size
160
####### FOLD: 0 #######
cut_df size is 160
cut_df size is 40
len(train_ds.get_y) 160
len(test_ds.get_y) 40
sum(test_ds.get_y) 67
fold: 5
precision: 0.75
recall: 0.6666666666666666
f_score: 0.7058823529411765
ord_error: 0.625
####### FOLD: 1 #######
cut_df size is 160
cut_df size is 40
len(train_ds.get_y) 160
len(test_ds.get_y) 40
sum(test_ds.get_y) 69
fold: 5
precision: 0.7
recall: 0.6666666666666667
f_score: 0.6829268292682927
ord_error: 0.65
####### FOLD: 2 #######
cut_df size is 160
cut_df size is 40
len(train_ds.get_y) 160
len(test_ds.get_y) 40
sum(test_ds.get_y) 66
fold: 5
precision: 0.725
recall: 0.6590909090909091
f_score: 0.6904761904761905
ord_error: 0.65
####### FOLD: 3 #######
cut_df size is 160
cut_df size is 40
len(train_ds.get_y) 160
len(test_ds.get_y) 40
sum(test_ds.get_y) 68
fold: 5
precision: 0.675
recall: 0.6428571428571429
f_score: 0.6585365853658538
ord_error: 0.7
####### FOLD: 4 #######
cut_df size is 160
cut_df size is 40
len(train_ds.get_y) 160
len(test_ds.get_y) 40
sum(test_ds.get_y) 77
fold: 5
precision: 0.75
recall: 0.6976744186046512
f_score: 0.7228915662650601
ord_error: 0.575
0.72 0.6665911607772073 0.6921427048633146 0.64
Killed
WARNING
Correct input is: script.py DATA_SIZE NUM_EPOCHS [SVM-RBF|SVM-L|RF|FFNN|CNN] [5|4|3+1]
Using default input parameters...
longest_post_len: 6675
test_size
40
train_size
160
####### FOLD: 0 #######
cut_df size is 160
cut_df size is 40
len(train_ds.get_y) 160
len(test_ds.get_y) 40
sum(test_ds.get_y) 76
fold: 5
precision: 0.7
recall: 0.6829268292682927
f_score: 0.691358024691358
ord_error: 0.625
####### FOLD: 1 #######
cut_df size is 160
cut_df size is 40
len(train_ds.get_y) 160
len(test_ds.get_y) 40
sum(test_ds.get_y) 73
fold: 5
precision: 0.675
recall: 0.5869565217391305
f_score: 0.6279069767441862
ord_error: 0.8
####### FOLD: 2 #######
cut_df size is 160
cut_df size is 40
len(train_ds.get_y) 160
len(test_ds.get_y) 40
sum(test_ds.get_y) 78
fold: 5
precision: 0.6
recall: 0.6486486486486486
f_score: 0.6233766233766234
ord_error: 0.725
####### FOLD: 3 #######
cut_df size is 160
cut_df size is 40
len(train_ds.get_y) 160
len(test_ds.get_y) 40
sum(test_ds.get_y) 58
fold: 5
precision: 0.475
recall: 0.6333333333333333
f_score: 0.5428571428571428
ord_error: 0.8
####### FOLD: 4 #######
cut_df size is 160
cut_df size is 40
len(train_ds.get_y) 160
len(test_ds.get_y) 40
sum(test_ds.get_y) 70
fold: 5
precision: 0.7
recall: 0.6666666666666667
f_score: 0.6829268292682927
ord_error: 0.65
0.6300000000000001 0.6437063999312145 0.6336851193875207 0.72
WARNING
Correct input is: script.py DATA_SIZE NUM_EPOCHS [SVM-RBF|SVM-L|RF|FFNN|CNN] [5|4|3+1]
Using default input parameters...
longest_post_len: 6675
test_size
40
train_size
160
####### FOLD: 0 #######
cut_df size is 160
cut_df size is 40
Traceback (most recent call last):
  File "main.py", line 550, in <module>
    out = 0
  File "main.py", line 410, in fold_testing
    if(start+test_len > len(df)):
TypeError: object of type 'int' has no len()
